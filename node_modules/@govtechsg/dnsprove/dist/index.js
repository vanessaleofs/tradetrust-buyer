"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDocumentStoreRecords = exports.parseDnsResults = exports.EthereumNetworkId = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _logger = require("./util/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { if (i % 2) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } else { Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i])); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const _getLogger = (0, _logger.getLogger)("index"),
      trace = _getLogger.trace;

let EthereumNetworkId;
exports.EthereumNetworkId = EthereumNetworkId;

(function (EthereumNetworkId) {
  EthereumNetworkId["homestead"] = "1";
  EthereumNetworkId["ropsten"] = "3";
  EthereumNetworkId["rinkeby"] = "4";
})(EthereumNetworkId || (exports.EthereumNetworkId = EthereumNetworkId = {}));

/**
 * Returns true for strings that are openattestation records
 * @param txtDataString e.g: '"openatts net=ethereum netId=3 addr=0x0c9d5E6C766030cc6f0f49951D275Ad0701F81EC"'
 */
const isOpenAttestationRecord = txtDataString => {
  return txtDataString.startsWith("openatts");
};
/**
 * Takes a string in the format of "key=value" and adds it to a JS object as key: value
 * @param obj Object that will be modified
 * @param keyValuePair A key value pair to add to the given object
 * @example addKeyValuePairToObject(objectToModify, "foo=bar")
 */


const addKeyValuePairToObject = (obj, keyValuePair) => {
  const _keyValuePair$split = keyValuePair.split("="),
        _keyValuePair$split2 = _toArray(_keyValuePair$split),
        key = _keyValuePair$split2[0],
        values = _keyValuePair$split2.slice(1);

  const value = values.join("="); // in case there were values with = in them

  /* eslint-disable no-param-reassign */
  // this is necessary because we modify the accumulator in .reduce

  obj[key.trim()] = value.trim();
  return obj;
};
/**
 * Parses one openattestation DNS-TXT record and turns it into an OpenAttestationsDNSTextRecord object
 * @param record e.g: '"openatts net=ethereum netId=3 addr=0x0c9d5E6C766030cc6f0f49951D275Ad0701F81EC"'
 */


const parseOpenAttestationRecord = record => {
  trace(`Parsing record: ${record}`);
  const keyValuePairs = record.trim().split(" "); // tokenize into key=value elements

  const recordObject = {}; // @ts-ignore: we already checked for this token

  recordObject.type = keyValuePairs.shift();
  keyValuePairs.reduce(addKeyValuePairToObject, recordObject);
  return recordObject;
};
/**
 * Currying function that applies a given dnssec result
 */


const applyDnssecResults = dnssecStatus => record => {
  return _objectSpread({}, record, {
    dnssec: dnssecStatus
  });
};
/**
 * Takes a DNS-TXT Record set and returns openattestation document store records if any
 * @param recordSet Refer to tests for examples
 */


const parseDnsResults = (recordSet = []) => {
  trace(`Parsing DNS results: ${JSON.stringify(recordSet)}`);
  return recordSet.map(record => record.data).map(record => record.slice(1, -1)) // removing leading and trailing quotes
  .filter(isOpenAttestationRecord).map(parseOpenAttestationRecord);
};
/**
 * Queries a given domain and parses the results to retrieve openattestation document store records if any
 * @param domain e.g: "example.openattestation.com"
 * @example
 * > getDocumentStoreRecords("example.openattestation.com")
 * > [ { type: 'openatts',
    net: 'ethereum',
    netId: '3',
    addr: '0x2f60375e8144e16Adf1979936301D8341D58C36C',
    dnssec: true } ]
 */


exports.parseDnsResults = parseDnsResults;

const getDocumentStoreRecords =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (domain) {
    trace(`Received request to resolve ${domain}`);
    const query = yield _axios.default.get(`https://dns.google/resolve?name=${domain}&type=TXT`);
    const results = query.data;
    const answers = results.Answer || [];
    trace(`Lookup results: ${JSON.stringify(answers)}`);
    return parseDnsResults(answers).map(applyDnssecResults(results.AD));
  });

  return function getDocumentStoreRecords(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.getDocumentStoreRecords = getDocumentStoreRecords;