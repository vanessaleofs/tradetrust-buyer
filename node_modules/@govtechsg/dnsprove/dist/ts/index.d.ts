export declare type RecordTypes = "openatts";
export declare type BlockchainNetwork = "ethereum";
export declare type EthereumAddress = string;
export declare enum EthereumNetworkId {
    homestead = "1",
    ropsten = "3",
    rinkeby = "4"
}
export interface OpenAttestationDNSTextRecord {
    type: RecordTypes;
    net: BlockchainNetwork;
    netId: EthereumNetworkId;
    addr: EthereumAddress;
    dnssec: boolean;
}
export interface IDNSRecord {
    name: string;
    type: number;
    TTL: number;
    data: string;
}
export interface IDNSQueryResponse {
    AD: boolean;
    Answer: IDNSRecord[];
}
/**
 * Takes a DNS-TXT Record set and returns openattestation document store records if any
 * @param recordSet Refer to tests for examples
 */
export declare const parseDnsResults: (recordSet?: IDNSRecord[]) => OpenAttestationDNSTextRecord[];
/**
 * Queries a given domain and parses the results to retrieve openattestation document store records if any
 * @param domain e.g: "example.openattestation.com"
 * @example
 * > getDocumentStoreRecords("example.openattestation.com")
 * > [ { type: 'openatts',
    net: 'ethereum',
    netId: '3',
    addr: '0x2f60375e8144e16Adf1979936301D8341D58C36C',
    dnssec: true } ]
 */
export declare const getDocumentStoreRecords: (domain: string) => Promise<OpenAttestationDNSTextRecord[]>;
