import { DeepStringify, SchematisedDocument, WrappedDocument } from "../@types/document";
declare type Extract<P> = P extends WrappedDocument<infer T> ? T : never;
export declare const getData: <T extends {
    data: any;
}>(document: T) => Extract<T>;
/**
 * Takes a partial originating document, possibly only with a schema.id and returns a document with the given data and obfuscated data
 * @param document the metadata container
 * @param data the data
 * @param obfuscatedData hashes of replaced data to put into the privacy field
 */
export declare const setData: <T extends SchematisedDocument<U> | WrappedDocument<U>, U = any>(document: T, data: DeepStringify<U>, obfuscatedData?: string[]) => T & {
    data: DeepStringify<U>;
    privacy: {
        obfuscatedData: string[];
    } | {
        obfuscatedData: string[];
    };
};
export declare const obfuscateData: (_data: any, fields: string | string[]) => {
    data: any;
    obfuscatedData: string[];
};
export declare const obfuscateDocument: <T = any>(document: WrappedDocument<T>, fields: string | string[]) => WrappedDocument<T>;
export {};
