export declare type SignatureProofAlgorithm = "SHA3MerkleProof";
export interface Signature {
    type: SignatureProofAlgorithm;
    targetHash: string;
    proof: string[];
    merkleRoot: string;
}
export interface ObfuscationMetadata {
    obfuscatedData?: string[];
}
export interface SchematisedDocument<T = any> {
    version: string;
    data: DeepStringify<T>;
    schema?: string;
    privacy?: ObfuscationMetadata;
}
export interface WrappedDocument<T = any> {
    version: string;
    signature: Signature;
    data: DeepStringify<T>;
    schema?: string;
    privacy?: ObfuscationMetadata;
}
export declare type DeepStringify<T> = {
    [P in keyof T]: T[P] extends Array<number> ? Array<string> : T[P] extends Array<string> ? Array<string> : T[P] extends Record<string, any> ? DeepStringify<T[P]> : T[P] extends Array<Record<string, infer U>> ? DeepStringify<U> : number extends T[P] ? string : undefined extends T[P] ? DeepStringify<T[P]> : string;
};
