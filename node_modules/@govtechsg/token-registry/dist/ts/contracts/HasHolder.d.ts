/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface HasHolderInterface extends Interface {
  functions: {
    holder: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {
    HolderChanged: TypedEventDescription<{
      encodeTopics([previousHolder, newHolder]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class HasHolder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): HasHolder;
  attach(addressOrName: string): HasHolder;
  deployed(): Promise<HasHolder>;

  on(event: EventFilter | string, listener: Listener): HasHolder;
  once(event: EventFilter | string, listener: Listener): HasHolder;
  addListener(eventName: EventFilter | string, listener: Listener): HasHolder;
  removeAllListeners(eventName: EventFilter | string): HasHolder;
  removeListener(eventName: any, listener: Listener): HasHolder;

  interface: HasHolderInterface;

  functions: {
    holder(): Promise<string>;
  };

  holder(): Promise<string>;

  filters: {
    HolderChanged(
      previousHolder: string | null,
      newHolder: string | null
    ): EventFilter;
  };

  estimate: {
    holder(): Promise<BigNumber>;
  };
}
