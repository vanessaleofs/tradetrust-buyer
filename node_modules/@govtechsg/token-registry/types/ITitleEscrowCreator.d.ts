/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ITitleEscrowCreatorInterface extends Interface {
  functions: {
    deployNewTitleEscrow: TypedFunctionDescription<{
      encode([tokenRegistry, beneficiary, holder]: [
        string,
        string,
        string
      ]): string;
    }>;
  };

  events: {};
}

export class ITitleEscrowCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ITitleEscrowCreator;
  attach(addressOrName: string): ITitleEscrowCreator;
  deployed(): Promise<ITitleEscrowCreator>;

  on(event: EventFilter | string, listener: Listener): ITitleEscrowCreator;
  once(event: EventFilter | string, listener: Listener): ITitleEscrowCreator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ITitleEscrowCreator;
  removeAllListeners(eventName: EventFilter | string): ITitleEscrowCreator;
  removeListener(eventName: any, listener: Listener): ITitleEscrowCreator;

  interface: ITitleEscrowCreatorInterface;

  functions: {
    deployNewTitleEscrow(
      tokenRegistry: string,
      beneficiary: string,
      holder: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  deployNewTitleEscrow(
    tokenRegistry: string,
    beneficiary: string,
    holder: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    deployNewTitleEscrow(
      tokenRegistry: string,
      beneficiary: string,
      holder: string
    ): Promise<BigNumber>;
  };
}
