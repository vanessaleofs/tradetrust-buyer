/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MinterRoleInterface extends Interface {
  functions: {
    isMinter: TypedFunctionDescription<{encode([account]: [string]): string}>;

    addMinter: TypedFunctionDescription<{encode([account]: [string]): string}>;

    renounceMinter: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {
    MinterAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    MinterRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;
  };
}

export class MinterRole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MinterRole;
  attach(addressOrName: string): MinterRole;
  deployed(): Promise<MinterRole>;

  on(event: EventFilter | string, listener: Listener): MinterRole;
  once(event: EventFilter | string, listener: Listener): MinterRole;
  addListener(eventName: EventFilter | string, listener: Listener): MinterRole;
  removeAllListeners(eventName: EventFilter | string): MinterRole;
  removeListener(eventName: any, listener: Listener): MinterRole;

  interface: MinterRoleInterface;

  functions: {
    isMinter(account: string): Promise<boolean>;

    addMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renounceMinter(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  isMinter(account: string): Promise<boolean>;

  addMinter(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  renounceMinter(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    MinterAdded(account: string | null): EventFilter;

    MinterRemoved(account: string | null): EventFilter;
  };

  estimate: {
    isMinter(account: string): Promise<BigNumber>;

    addMinter(account: string): Promise<BigNumber>;

    renounceMinter(): Promise<BigNumber>;
  };
}
