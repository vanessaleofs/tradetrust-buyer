/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CalculateSelectorInterface extends Interface {
  functions: {
    calculateSelector: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {};
}

export class CalculateSelector extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CalculateSelector;
  attach(addressOrName: string): CalculateSelector;
  deployed(): Promise<CalculateSelector>;

  on(event: EventFilter | string, listener: Listener): CalculateSelector;
  once(event: EventFilter | string, listener: Listener): CalculateSelector;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CalculateSelector;
  removeAllListeners(eventName: EventFilter | string): CalculateSelector;
  removeListener(eventName: any, listener: Listener): CalculateSelector;

  interface: CalculateSelectorInterface;

  functions: {
    calculateSelector(): Promise<string>;
  };

  calculateSelector(): Promise<string>;

  filters: {};

  estimate: {
    calculateSelector(): Promise<BigNumber>;
  };
}
