/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TitleEscrowInterface extends Interface {
  functions: {
    _tokenId: TypedFunctionDescription<{encode([]: []): string}>;

    approvedBeneficiary: TypedFunctionDescription<{encode([]: []): string}>;

    approvedHolder: TypedFunctionDescription<{encode([]: []): string}>;

    approvedOwner: TypedFunctionDescription<{encode([]: []): string}>;

    beneficiary: TypedFunctionDescription<{encode([]: []): string}>;

    holder: TypedFunctionDescription<{encode([]: []): string}>;

    status: TypedFunctionDescription<{encode([]: []): string}>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    titleEscrowFactory: TypedFunctionDescription<{encode([]: []): string}>;

    tokenRegistry: TypedFunctionDescription<{encode([]: []): string}>;

    onERC721Received: TypedFunctionDescription<{
      encode([operator, from, tokenId, data]: [
        string,
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    changeHolder: TypedFunctionDescription<{
      encode([newHolder]: [string]): string;
    }>;

    approveNewOwner: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    transferTo: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    transferToNewEscrow: TypedFunctionDescription<{
      encode([newBeneficiary, newHolder]: [string, string]): string;
    }>;

    approveNewTransferTargets: TypedFunctionDescription<{
      encode([newBeneficiary, newHolder]: [string, string]): string;
    }>;
  };

  events: {
    HolderChanged: TypedEventDescription<{
      encodeTopics([previousHolder, newHolder]: [
        string | null,
        string | null
      ]): string[];
    }>;

    TitleCeded: TypedEventDescription<{
      encodeTopics([_tokenRegistry, _to, _id]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    TitleReceived: TypedEventDescription<{
      encodeTopics([_tokenRegistry, _from, _id]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    TransferOwnerApproval: TypedEventDescription<{
      encodeTopics([_tokenid, _from, _to]: [
        BigNumberish | null,
        string | null,
        string | null
      ]): string[];
    }>;

    TransferTitleEscrowApproval: TypedEventDescription<{
      encodeTopics([newBeneficiary, newHolder]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class TitleEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TitleEscrow;
  attach(addressOrName: string): TitleEscrow;
  deployed(): Promise<TitleEscrow>;

  on(event: EventFilter | string, listener: Listener): TitleEscrow;
  once(event: EventFilter | string, listener: Listener): TitleEscrow;
  addListener(eventName: EventFilter | string, listener: Listener): TitleEscrow;
  removeAllListeners(eventName: EventFilter | string): TitleEscrow;
  removeListener(eventName: any, listener: Listener): TitleEscrow;

  interface: TitleEscrowInterface;

  functions: {
    _tokenId(): Promise<BigNumber>;

    approvedBeneficiary(): Promise<string>;

    approvedHolder(): Promise<string>;

    approvedOwner(): Promise<string>;

    beneficiary(): Promise<string>;

    holder(): Promise<string>;

    status(): Promise<number>;

    supportsInterface(interfaceId: Arrayish): Promise<boolean>;

    titleEscrowFactory(): Promise<string>;

    tokenRegistry(): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    changeHolder(
      newHolder: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approveNewOwner(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferTo(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferToNewEscrow(
      newBeneficiary: string,
      newHolder: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approveNewTransferTargets(
      newBeneficiary: string,
      newHolder: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  _tokenId(): Promise<BigNumber>;

  approvedBeneficiary(): Promise<string>;

  approvedHolder(): Promise<string>;

  approvedOwner(): Promise<string>;

  beneficiary(): Promise<string>;

  holder(): Promise<string>;

  status(): Promise<number>;

  supportsInterface(interfaceId: Arrayish): Promise<boolean>;

  titleEscrowFactory(): Promise<string>;

  tokenRegistry(): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  changeHolder(
    newHolder: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approveNewOwner(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferTo(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferToNewEscrow(
    newBeneficiary: string,
    newHolder: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approveNewTransferTargets(
    newBeneficiary: string,
    newHolder: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    HolderChanged(
      previousHolder: string | null,
      newHolder: string | null
    ): EventFilter;

    TitleCeded(
      _tokenRegistry: string | null,
      _to: string | null,
      _id: BigNumberish | null
    ): EventFilter;

    TitleReceived(
      _tokenRegistry: string | null,
      _from: string | null,
      _id: BigNumberish | null
    ): EventFilter;

    TransferOwnerApproval(
      _tokenid: BigNumberish | null,
      _from: string | null,
      _to: string | null
    ): EventFilter;

    TransferTitleEscrowApproval(
      newBeneficiary: string | null,
      newHolder: string | null
    ): EventFilter;
  };

  estimate: {
    _tokenId(): Promise<BigNumber>;

    approvedBeneficiary(): Promise<BigNumber>;

    approvedHolder(): Promise<BigNumber>;

    approvedOwner(): Promise<BigNumber>;

    beneficiary(): Promise<BigNumber>;

    holder(): Promise<BigNumber>;

    status(): Promise<BigNumber>;

    supportsInterface(interfaceId: Arrayish): Promise<BigNumber>;

    titleEscrowFactory(): Promise<BigNumber>;

    tokenRegistry(): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    changeHolder(newHolder: string): Promise<BigNumber>;

    approveNewOwner(newOwner: string): Promise<BigNumber>;

    transferTo(newOwner: string): Promise<BigNumber>;

    transferToNewEscrow(
      newBeneficiary: string,
      newHolder: string
    ): Promise<BigNumber>;

    approveNewTransferTargets(
      newBeneficiary: string,
      newHolder: string
    ): Promise<BigNumber>;
  };
}
