var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { useContractFunctionHook } from "./index";
import { renderHook, act } from "@testing-library/react-hooks";
import { transactionExample, receiptExample } from "./test/example";
var mockMethod = jest.fn();
var mockContractImpl = { functions: { mockMethod: mockMethod } };
var mockContract = mockContractImpl;
var onSendSuccessResponse = function () {
    var mockTransaction = jest.fn();
    mockMethod.mockResolvedValueOnce(__assign(__assign({}, transactionExample), { wait: mockTransaction }));
    mockTransaction.mockResolvedValueOnce(receiptExample);
};
var onCallSuccessResponse = function () {
    mockMethod.mockResolvedValueOnce("RETURNED_VALUE");
};
var onErrorResponse = function () {
    mockMethod.mockRejectedValueOnce(new Error("Error: VM Exception while processing transaction: revert Error: Something cryptic, because blockchain?"));
};
describe("useContractFunctionHook", function () {
    // eslint-disable-next-line jest/no-hooks
    beforeEach(function () {
        mockMethod.mockReset();
    });
    it("should initialize to default state", function () {
        var result = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }).result;
        var _a = result.current, state = _a.state, events = _a.events, receipt = _a.receipt, transaction = _a.transaction, error = _a.error, value = _a.value;
        expect(state).toBe("UNINITIALIZED");
        expect(events).toBeUndefined();
        expect(receipt).toBeUndefined();
        expect(transaction).toBeUndefined();
        expect(error).toBeUndefined();
        expect(value).toBeUndefined();
    });
    describe("send", function () {
        it("should initialize state on send", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result, deferredTx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onSendSuccessResponse();
                        result = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }).result;
                        act(function () {
                            deferredTx = result.current.send("SOME_VALUE");
                        });
                        expect(result.current.state).toBe("INITIALIZED");
                        expect(result.current.events).toBeUndefined();
                        expect(result.current.receipt).toBeUndefined();
                        expect(result.current.transaction).toBeUndefined();
                        expect(result.current.error).toBeUndefined();
                        expect(result.current.value).toBeUndefined();
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, deferredTx];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it("should populate transaction when transaction is received & accepted by node", function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, result, wait, deferredTx, intermediateStateValidation;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect.assertions(2); // Ensures that the 2 intermediate state validation is ran
                        onSendSuccessResponse();
                        _a = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }), result = _a.result, wait = _a.wait;
                        intermediateStateValidation = function () {
                            var _a;
                            if (result.current.state !== "PENDING_CONFIRMATION")
                                throw "SKIPPING";
                            expect(result.current.state).toBe("PENDING_CONFIRMATION");
                            expect((_a = result.current.transaction) === null || _a === void 0 ? void 0 : _a.hash).toBe("0x8418e15d561f95a1d8cc78e96e751b6368302180b7f33a881132484d238d76af");
                        };
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            deferredTx = result.current.send("SOME_VALUE");
                                            return [4 /*yield*/, wait(intermediateStateValidation)];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, deferredTx];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it("should update all states upon confirmation when transaction is mined", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        onSendSuccessResponse();
                        result = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }).result;
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, result.current.send("SOME_VALUE")];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _b.sent();
                        expect(result.current.state).toBe("CONFIRMED");
                        expect(result.current.receipt).toStrictEqual(receiptExample);
                        expect((_a = result.current.transaction) === null || _a === void 0 ? void 0 : _a.data).toStrictEqual(transactionExample.data);
                        expect(result.current.events).toStrictEqual(receiptExample.events);
                        expect(result.current.transactionHash).toBe("0x8418e15d561f95a1d8cc78e96e751b6368302180b7f33a881132484d238d76af");
                        expect(result.current.error).toBeUndefined();
                        expect(result.current.value).toBeUndefined();
                        expect(result.current.errorMessage).toBeUndefined();
                        return [2 /*return*/];
                }
            });
        }); });
        it("should update error when transaction fails", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        onErrorResponse();
                        result = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }).result;
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, result.current.send("SOME_VALUE")];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _b.sent();
                        expect(result.current.state).toBe("ERROR");
                        expect(result.current.errorMessage).toBe("Error: VM Exception while processing transaction: revert Error: Something cryptic, because blockchain?");
                        expect(result.current.receipt).toBeUndefined();
                        expect((_a = result.current.transaction) === null || _a === void 0 ? void 0 : _a.data).toBeUndefined();
                        expect(result.current.events).toBeUndefined();
                        expect(result.current.value).toBeUndefined();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("call", function () {
        it("should initialize state on call", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result, deferredTx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onCallSuccessResponse();
                        result = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }).result;
                        act(function () {
                            deferredTx = result.current.call("SOME_VALUE");
                        });
                        expect(result.current.state).toBe("INITIALIZED");
                        expect(result.current.events).toBeUndefined();
                        expect(result.current.receipt).toBeUndefined();
                        expect(result.current.transaction).toBeUndefined();
                        expect(result.current.error).toBeUndefined();
                        expect(result.current.value).toBeUndefined();
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, deferredTx];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it("should update all states upon confirmation when transaction is mined", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onCallSuccessResponse();
                        result = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }).result;
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, result.current.call("SOME_VALUE")];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        expect(result.current.state).toBe("CONFIRMED");
                        expect(result.current.value).toBe("RETURNED_VALUE");
                        expect(result.current.receipt).toBeUndefined();
                        expect(result.current.transaction).toBeUndefined();
                        expect(result.current.events).toBeUndefined();
                        expect(result.current.transactionHash).toBeUndefined();
                        expect(result.current.error).toBeUndefined();
                        expect(result.current.errorMessage).toBeUndefined();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("reset", function () {
        it("should reset all states", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onCallSuccessResponse();
                        result = renderHook(function () { return useContractFunctionHook(mockContract, "mockMethod"); }).result;
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, result.current.call("SOME_VALUE")];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        expect(result.current.state).toBe("CONFIRMED");
                        expect(result.current.value).toBe("RETURNED_VALUE");
                        expect(result.current.receipt).toBeUndefined();
                        expect(result.current.transaction).toBeUndefined();
                        expect(result.current.events).toBeUndefined();
                        expect(result.current.transactionHash).toBeUndefined();
                        expect(result.current.error).toBeUndefined();
                        expect(result.current.errorMessage).toBeUndefined();
                        return [4 /*yield*/, act(function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, result.current.reset()];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 2:
                        _a.sent();
                        expect(result.current.state).toBe("UNINITIALIZED");
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=index.test.js.map