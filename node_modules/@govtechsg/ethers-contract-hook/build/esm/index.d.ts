import { Contract, ContractTransaction } from "ethers";
import { ContractReceipt } from "ethers/contract";
export declare type ContractFunctionState = "UNINITIALIZED" | "INITIALIZED" | "PENDING_CONFIRMATION" | "CONFIRMED" | "ERROR";
declare type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;
export declare function useContractFunctionHook<T extends Contract, S extends keyof T["functions"]>(contract?: T, method?: S): {
    call: T["functions"][S];
    send: T["functions"][S];
    reset: () => void;
    state: ContractFunctionState;
    receipt?: ContractReceipt;
    transaction?: ContractTransaction;
    error?: Error;
    value?: UnwrapPromise<ReturnType<T["functions"][S]>>;
    events?: ContractReceipt["events"];
    transactionHash?: string;
    errorMessage?: string;
};
export {};
