var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { useCallback, useState } from "react";
// Todo
// Deploy
// Deploy & Initialize
// interface useContractFunctionHookReturn<T extends Contract, S extends keyof T["functions"]> {
//   state: ContractFunctionState;
//   receipt?: ContractReceipt;
//   transaction?: ContractTransaction;
//   error?: Error;
//   value:
// }
export function useContractFunctionHook(contract, method) {
    var _this = this;
    var _a = useState("UNINITIALIZED"), state = _a[0], setState = _a[1];
    var _b = useState(), receipt = _b[0], setReceipt = _b[1];
    var _c = useState(), transaction = _c[0], setTransaction = _c[1];
    var _d = useState(), error = _d[0], setError = _d[1];
    var _e = useState(), value = _e[0], setValue = _e[1];
    // Reset state is added to allow the same hook to be used for multiple transactions although
    // it is highly unrecommended.
    var resetState = function () {
        setState("UNINITIALIZED");
        setReceipt(undefined);
        setTransaction(undefined);
        setError(undefined);
    };
    var sendFn = (function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
            var contractMethod, deferredTx, transaction_1, receipt_1, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!contract || !method) {
                            setState("ERROR");
                            setError(new Error("Contract or method is not specified"));
                            return [2 /*return*/];
                        }
                        resetState();
                        contractMethod = contract.functions[method];
                        deferredTx = contractMethod.apply(void 0, params);
                        setState("INITIALIZED");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, deferredTx];
                    case 2:
                        transaction_1 = _a.sent();
                        setState("PENDING_CONFIRMATION");
                        setTransaction(transaction_1);
                        return [4 /*yield*/, transaction_1.wait()];
                    case 3:
                        receipt_1 = _a.sent();
                        setState("CONFIRMED");
                        setReceipt(receipt_1);
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        setError(e_1);
                        setState("ERROR");
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    });
    var callFn = (function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
            var contractMethod, deferredTx, response, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!contract || !method) {
                            setState("ERROR");
                            setError(new Error("Contract or method is not specified"));
                            return [2 /*return*/];
                        }
                        resetState();
                        contractMethod = contract.functions[method];
                        deferredTx = contractMethod.apply(void 0, params);
                        setState("INITIALIZED");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, deferredTx];
                    case 2:
                        response = _a.sent();
                        setState("CONFIRMED");
                        setValue(response);
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        setError(e_2);
                        setState("ERROR");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    });
    var transactionHash = transaction === null || transaction === void 0 ? void 0 : transaction.hash;
    var events = receipt === null || receipt === void 0 ? void 0 : receipt.events;
    var errorMessage = error === null || error === void 0 ? void 0 : error.message;
    var send = useCallback(sendFn, [contract, method]);
    var call = useCallback(callFn, [contract, method]);
    var reset = useCallback(resetState, [contract, method]);
    return { state: state, call: call, events: events, send: send, receipt: receipt, transaction: transaction, transactionHash: transactionHash, errorMessage: errorMessage, error: error, value: value, reset: reset };
}
//# sourceMappingURL=index.js.map