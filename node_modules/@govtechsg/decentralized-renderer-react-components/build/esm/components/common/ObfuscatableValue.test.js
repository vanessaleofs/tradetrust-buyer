import React from "react";
import { ObfuscatableValue } from "./ObfuscatableValue";
import { render, fireEvent } from "@testing-library/react";
describe("obfuscatablevalue component", function () {
    it("should display value only and not call onObfuscationRequested when editable is not set", function () {
        var callback = jest.fn();
        var _a = render(React.createElement(ObfuscatableValue, { value: "Text to display", onObfuscationRequested: callback })), getByText = _a.getByText, queryByTitle = _a.queryByTitle;
        expect(getByText("Text to display")).toBeDefined();
        expect(queryByTitle("Obfuscate value")).toBeNull();
        fireEvent.click(getByText(/Text to display/i));
        expect(callback).toHaveBeenCalledTimes(0);
    });
    it("should display value only and not call onObfuscationRequested when editable is set to false", function () {
        var callback = jest.fn();
        var _a = render(React.createElement(ObfuscatableValue, { value: "Text to display", onObfuscationRequested: callback, editable: false })), getByText = _a.getByText, queryByTitle = _a.queryByTitle;
        expect(getByText("Text to display")).toBeDefined();
        expect(queryByTitle("Obfuscate value")).toBeNull();
        fireEvent.click(getByText(/Text to display/i));
        expect(callback).toHaveBeenCalledTimes(0);
    });
    it("should display value/cross and call onObfuscationRequested when editable is set to true", function () {
        var callback = jest.fn();
        var _a = render(React.createElement(ObfuscatableValue, { value: "Text to display", onObfuscationRequested: callback, editable: true })), getByText = _a.getByText, getByTitle = _a.getByTitle;
        expect(getByText("Text to display")).toBeDefined();
        expect(getByTitle("Obfuscate value")).toBeDefined();
        fireEvent.click(getByText(/Text to display/i));
        expect(callback).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=ObfuscatableValue.test.js.map