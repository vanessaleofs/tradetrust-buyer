import Ajv from "ajv";
import { WrappedDocument, SchemaId } from "./@types/document";
import * as utils from "./utils";
import * as v2 from "./__generated__/schemaV2";
import * as v3 from "./__generated__/schemaV3";
interface WrapDocumentOption {
    externalSchemaId?: string;
    version?: SchemaId;
}
declare class SchemaValidationError extends Error {
    validationErrors: Ajv.ErrorObject[];
    document: any;
    constructor(message: string, validationErrors: Ajv.ErrorObject[], document: any);
}
declare const isSchemaValidationError: (error: any) => error is SchemaValidationError;
export declare const wrapDocument: <T = unknown>(data: T, options?: WrapDocumentOption | undefined) => WrappedDocument<T>;
export declare const wrapDocuments: <T = unknown>(dataArray: T[], options?: WrapDocumentOption | undefined) => WrappedDocument<T>[];
export declare const validateSchema: (document: WrappedDocument<any>) => boolean;
export { digestDocument } from "./digest";
export { obfuscateDocument } from "./privacy";
export { sign } from "./sign";
export { checkProof, MerkleTree, wrap, verify as verifySignature } from "./signature";
export { utils, isSchemaValidationError };
export * from "./@types/document";
export * from "./schema/3.0/w3c";
export { getData } from "./utils";
export { v2 };
export { v3 };
