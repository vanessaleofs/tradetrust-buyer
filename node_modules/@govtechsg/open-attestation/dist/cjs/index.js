"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var digest_1 = require("./digest");
var schema_1 = require("./schema");
var signature_1 = require("./signature");
var document_1 = require("./@types/document");
var salt_1 = require("./privacy/salt");
var utils = __importStar(require("./utils"));
exports.utils = utils;
var v2 = __importStar(require("./__generated__/schemaV2"));
exports.v2 = v2;
var v3 = __importStar(require("./__generated__/schemaV3"));
exports.v3 = v3;
var defaultVersion = document_1.SchemaId.v2;
var createDocument = function (data, option) {
    var _a, _b, _c;
    var documentSchema = {
        version: (_b = (_a = option) === null || _a === void 0 ? void 0 : _a.version, (_b !== null && _b !== void 0 ? _b : defaultVersion)),
        data: salt_1.saltData(data)
    };
    if ((_c = option) === null || _c === void 0 ? void 0 : _c.externalSchemaId) {
        documentSchema.schema = option.externalSchemaId;
    }
    return documentSchema;
};
var SchemaValidationError = /** @class */ (function (_super) {
    __extends(SchemaValidationError, _super);
    function SchemaValidationError(message, validationErrors, document) {
        var _this = _super.call(this, message) || this;
        _this.validationErrors = validationErrors;
        _this.document = document;
        return _this;
    }
    return SchemaValidationError;
}(Error));
var isSchemaValidationError = function (error) {
    return !!error.validationErrors;
};
exports.isSchemaValidationError = isSchemaValidationError;
exports.wrapDocument = function (data, options) {
    var _a, _b;
    var document = createDocument(data, options);
    var errors = schema_1.validateSchema(document, schema_1.getSchema((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.version, (_b !== null && _b !== void 0 ? _b : defaultVersion))));
    if (errors.length > 0) {
        throw new SchemaValidationError("Invalid document", errors, document);
    }
    return signature_1.wrap(document, [digest_1.digestDocument(document)]);
};
exports.wrapDocuments = function (dataArray, options) {
    var documents = dataArray.map(function (data) { return createDocument(data, options); });
    documents.forEach(function (document) {
        var _a, _b;
        var errors = schema_1.validateSchema(document, schema_1.getSchema((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.version, (_b !== null && _b !== void 0 ? _b : defaultVersion))));
        if (errors.length > 0) {
            throw new SchemaValidationError("Invalid document", errors, document);
        }
    });
    var batchHashes = documents.map(digest_1.digestDocument);
    return documents.map(function (doc) { return signature_1.wrap(doc, batchHashes); });
};
exports.validateSchema = function (document) {
    var _a;
    return schema_1.validateSchema(document, schema_1.getSchema("" + (((_a = document) === null || _a === void 0 ? void 0 : _a.version) || document_1.SchemaId.v2))).length === 0;
};
var digest_2 = require("./digest");
exports.digestDocument = digest_2.digestDocument;
var privacy_1 = require("./privacy");
exports.obfuscateDocument = privacy_1.obfuscateDocument;
var sign_1 = require("./sign");
exports.sign = sign_1.sign;
var signature_2 = require("./signature");
exports.checkProof = signature_2.checkProof;
exports.MerkleTree = signature_2.MerkleTree;
exports.wrap = signature_2.wrap;
exports.verifySignature = signature_2.verify;
__export(require("./@types/document"));
__export(require("./schema/3.0/w3c"));
var utils_1 = require("./utils"); // keep it to avoid breaking change, moved from privacy to utils
exports.getData = utils_1.getData;
