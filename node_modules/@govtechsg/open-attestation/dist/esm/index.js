var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { digestDocument } from "./digest";
import { getSchema, validateSchema as validate } from "./schema";
import { wrap } from "./signature";
import { SchemaId } from "./@types/document";
import { saltData } from "./privacy/salt";
import * as utils from "./utils";
import * as v2 from "./__generated__/schemaV2";
import * as v3 from "./__generated__/schemaV3";
var defaultVersion = SchemaId.v2;
var createDocument = function (data, option) {
    var _a, _b, _c;
    var documentSchema = {
        version: (_b = (_a = option) === null || _a === void 0 ? void 0 : _a.version, (_b !== null && _b !== void 0 ? _b : defaultVersion)),
        data: saltData(data)
    };
    if ((_c = option) === null || _c === void 0 ? void 0 : _c.externalSchemaId) {
        documentSchema.schema = option.externalSchemaId;
    }
    return documentSchema;
};
var SchemaValidationError = /** @class */ (function (_super) {
    __extends(SchemaValidationError, _super);
    function SchemaValidationError(message, validationErrors, document) {
        var _this = _super.call(this, message) || this;
        _this.validationErrors = validationErrors;
        _this.document = document;
        return _this;
    }
    return SchemaValidationError;
}(Error));
var isSchemaValidationError = function (error) {
    return !!error.validationErrors;
};
export var wrapDocument = function (data, options) {
    var _a, _b;
    var document = createDocument(data, options);
    var errors = validate(document, getSchema((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.version, (_b !== null && _b !== void 0 ? _b : defaultVersion))));
    if (errors.length > 0) {
        throw new SchemaValidationError("Invalid document", errors, document);
    }
    return wrap(document, [digestDocument(document)]);
};
export var wrapDocuments = function (dataArray, options) {
    var documents = dataArray.map(function (data) { return createDocument(data, options); });
    documents.forEach(function (document) {
        var _a, _b;
        var errors = validate(document, getSchema((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.version, (_b !== null && _b !== void 0 ? _b : defaultVersion))));
        if (errors.length > 0) {
            throw new SchemaValidationError("Invalid document", errors, document);
        }
    });
    var batchHashes = documents.map(digestDocument);
    return documents.map(function (doc) { return wrap(doc, batchHashes); });
};
export var validateSchema = function (document) {
    var _a;
    return validate(document, getSchema("" + (((_a = document) === null || _a === void 0 ? void 0 : _a.version) || SchemaId.v2))).length === 0;
};
export { digestDocument } from "./digest";
export { obfuscateDocument } from "./privacy";
export { sign } from "./sign";
export { checkProof, MerkleTree, wrap, verify as verifySignature } from "./signature";
export { utils, isSchemaValidationError };
export * from "./@types/document";
export * from "./schema/3.0/w3c";
export { getData } from "./utils"; // keep it to avoid breaking change, moved from privacy to utils
export { v2 };
export { v3 };
