{
	"id": 0,
	"name": "Truffle Decoding and Encoding",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "@truffle/codec",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gnidan/src/work/truffle/packages/codec/lib/index.ts",
			"comment": {
				"shortText": "# Truffle Codec",
				"text": "This module provides low-level decoding and encoding functionality for\nSolidity and the Solidity ABI.  Many parts of this module are intended\nprimarily for internal use by Truffle and so remain largely undocumented,\nbut some of its types are also output by @truffle/decoder, which provides\na higher-level interface to much of this module's functionality.\n\n## If you're here from Truffle Decoder\n\nIf you're coming here from [[@truffle/decoder]], you probably just want to\nknow about the parts that are relevant to you.  These are:\n\n* The \"data\" category (specifically [[Format]])\n* The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n* The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n\nNote that the data category is largely scarce in\ndocumentation, although that's because it's largely self-explanatory.\n\nIf you're not just here from Truffle Decoder, but are actually\ninterested in the lower-level workings, read on.\n\n## How this module differs from Truffle Decoder\n\nUnlike Truffle Decoder, this library makes no network connections\nand avoids dependencies that do.  Instead, its decoding functionality\nis generator-based; calling one of the decoding functions returns a\ngenerator.  This generator's `next()` function may return a finished\nresult, or it may return a request for more information.  It is up to\nthe caller to fulfill these requests -- say, by making a network\nconnection of its own.  This is how @truffle/decoder works; @truffle/codec\nmakes requests, and @truffle/decoder fulfills them by\nlooking up the necessary information on the blockchain.\n\nThis library also provides additional functionality beyond what's used by\nTruffle Decoder.  In particular, this library also exists to support Truffle\nDebugger, and so it provides encoding functionality not just for\ntransactions, logs, and state variables, but also for Solidity variables\nduring transaction execution, including circularity detection for memroy\nstructures.  It includes functionality for decoding Solidity's internal\nfunction pointers, which the debugger uses, but which Truffle Decoder\ncurrently does not (although this is planned for the future).\n\nThere is also functionality for decoding return values and revert messages\n(currently mostly unused, intended to be hooked up later) as well as some\nrudimentary encoding functionality, although currently that's just used\ninternally.  A better interface for these things is intended for the future.\n\n## How to use\n\nYou should probably use [[@truffle/decoder]] instead, if your use case doesn't\npreclude it.  This module has little documentation, where it has any at all,\nand it's likely that parts of its interface may change (particularly\nregarding allocation).  That said, if you truly need the functionality here,\nTruffle Decoder can perhaps serve as something of a reference implementation\n(and perhaps Truffle Debugger as well, though that code is much harder to\nread or copy).\n"
			},
			"children": [
				{
					"id": 1136,
					"name": "AbiData",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation, encoding, and decoding of locations related to the ABI\n(calldata in Solidity, events, etc.)"
					},
					"children": [
						{
							"id": 1137,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1214,
									"name": "AbiAllocationAndMode",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1215,
											"name": "allocation",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 494,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocation"
											}
										},
										{
											"id": 1216,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 495,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 985
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1215,
												1216
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 493,
											"character": 30
										}
									]
								},
								{
									"id": 1172,
									"name": "AbiAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1175,
											"name": "allocations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 48,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1139
											}
										},
										{
											"id": 1174,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 47,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1173,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 46,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1175,
												1174,
												1173
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 45,
											"character": 27
										}
									]
								},
								{
									"id": 1139,
									"name": "AbiAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1140,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1141,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AbiAllocation"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 30,
											"character": 31
										}
									]
								},
								{
									"id": 1142,
									"name": "AbiSizeInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1144,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1143,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1144,
												1143
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 19,
											"character": 28
										}
									]
								},
								{
									"id": 1145,
									"name": "CalldataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1146,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 76,
													"character": 5
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionAbiEntry",
														"id": 1346
													},
													{
														"type": "reference",
														"name": "ConstructorAbiEntry",
														"id": 1354
													}
												]
											}
										},
										{
											"id": 1149,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 79,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 985
											}
										},
										{
											"id": 1148,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 78,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "CalldataArgumentAllocation"
												}
											}
										},
										{
											"id": 1147,
											"name": "offset",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 77,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1146,
												1149,
												1148,
												1147
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 75,
											"character": 35
										}
									]
								},
								{
									"id": 1155,
									"name": "CalldataAndReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1156,
											"name": "input",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 71,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocation",
												"id": 1145
											}
										},
										{
											"id": 1157,
											"name": "output",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 72,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "ReturndataAllocation",
												"id": 1150
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1156,
												1157
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 70,
											"character": 48
										}
									]
								},
								{
									"id": 1158,
									"name": "ContractAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1159,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 11,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiData.Abi",
												"id": 1344
											}
										},
										{
											"id": 1164,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 16,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1163,
											"name": "compiler",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 15,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "CompilerVersion",
												"id": 1919
											}
										},
										{
											"id": 1162,
											"name": "constructorContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 14,
													"character": 20
												}
											],
											"type": {
												"type": "reference",
												"name": "DecoderContext",
												"id": 1982
											}
										},
										{
											"id": 1160,
											"name": "contractNode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 12,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										},
										{
											"id": 1161,
											"name": "deployedContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 13,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "DecoderContext",
												"id": 1982
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1159,
												1164,
												1163,
												1162,
												1160,
												1161
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 10,
											"character": 39
										}
									]
								},
								{
									"id": 1165,
									"name": "EventAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1166,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 115,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAbiEntry",
												"id": 1367
											}
										},
										{
											"id": 1171,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 120,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 985
											}
										},
										{
											"id": 1169,
											"name": "anonymous",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 118,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1170,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 119,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventArgumentAllocation"
												}
											}
										},
										{
											"id": 1167,
											"name": "contextHash",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 116,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1168,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 117,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.ContractType",
												"id": 193
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1166,
												1171,
												1169,
												1170,
												1167,
												1168
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 114,
											"character": 32
										}
									]
								},
								{
									"id": 1176,
									"name": "EventParameterInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1179,
											"name": "indexed",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 54,
													"character": 9
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 558,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1178,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 53,
													"character": 6
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 556,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1177,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 52,
													"character": 6
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 557,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1179,
												1178,
												1177
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 51,
											"character": 28
										},
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 555,
											"character": 28
										}
									]
								},
								{
									"id": 1150,
									"name": "ReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1153,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 140,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 985
											}
										},
										{
											"id": 1152,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 139,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1154,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 141,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "ReturndataKind"
											}
										},
										{
											"id": 1151,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 138,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1153,
												1152,
												1154,
												1151
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 137,
											"character": 37
										}
									]
								},
								{
									"id": 1138,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:allocate\")"
								},
								{
									"id": 1195,
									"name": "abiSizeAndAllocate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1196,
											"name": "abiSizeAndAllocate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1197,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1198,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1199,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocationInfo",
												"id": 1172
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 157,
											"character": 27
										}
									]
								},
								{
									"id": 1200,
									"name": "abiSizeInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isProtected": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 1201,
											"name": "abiSizeInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isProtected": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 1202,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1203,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiSizeInfo",
												"id": 1142
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 308,
											"character": 27
										}
									]
								},
								{
									"id": 1204,
									"name": "allocateCalldataAndReturndata",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1205,
											"name": "allocateCalldataAndReturndata",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1206,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1346
															},
															{
																"type": "reference",
																"name": "ConstructorAbiEntry",
																"id": 1354
															}
														]
													}
												},
												{
													"id": 1207,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1705
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1208,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												},
												{
													"id": 1209,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1210,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												},
												{
													"id": 1211,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1212,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1919
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1213,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "DecoderContext",
														"id": 1982
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CalldataAndReturndataAllocation",
														"id": 1155
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 323,
											"character": 38
										}
									]
								},
								{
									"id": 1217,
									"name": "allocateDataArguments",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1218,
											"name": "allocateDataArguments",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1219,
													"name": "fullModeParameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1705
																}
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1220,
													"name": "abiParameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AbiParameter",
															"id": 1372
														}
													}
												},
												{
													"id": 1221,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1222,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												},
												{
													"id": 1223,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1224,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1919
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1225,
													"name": "offset",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "0"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocationAndMode",
												"id": 1214
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 501,
											"character": 30
										}
									]
								},
								{
									"id": 1226,
									"name": "allocateEvent",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1227,
											"name": "allocateEvent",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1228,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventAbiEntry",
														"id": 1367
													}
												},
												{
													"id": 1229,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1705
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1230,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												},
												{
													"id": 1231,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1232,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												},
												{
													"id": 1233,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1234,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1919
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "EventAllocation",
														"id": 1165
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 563,
											"character": 22
										}
									]
								},
								{
									"id": 1188,
									"name": "allocateMembers",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1189,
											"name": "allocateMembers",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1190,
													"name": "parentId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1191,
													"name": "members",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "NameTypePair",
															"id": 144
														}
													}
												},
												{
													"id": 1192,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1193,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												},
												{
													"id": 1194,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "0"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1139
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 94,
											"character": 24
										}
									]
								},
								{
									"id": 1183,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1184,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1185,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 142
													}
												},
												{
													"id": 1186,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1187,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1139
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 77,
											"character": 23
										}
									]
								},
								{
									"id": 1288,
									"name": "contextHashForKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1289,
											"name": "contextHashForKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1290,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1104,
											"character": 26
										}
									]
								},
								{
									"id": 1245,
									"name": "defaultConstructorAllocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1246,
											"name": "defaultConstructorAllocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1247,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderContext",
														"id": 1982
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CalldataAndReturndataAllocation",
														"id": 1155
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 802,
											"character": 37
										}
									]
								},
								{
									"id": 1180,
									"name": "getAbiAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1181,
											"name": "getAbiAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1182,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1139
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 57,
											"character": 33
										}
									]
								},
								{
									"id": 1253,
									"name": "getCalldataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1254,
											"name": "getCalldataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1255,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 1158
														}
													}
												},
												{
													"id": 1256,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1257,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1258,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1259,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1749
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 829,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1260,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1261,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocations"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 827,
											"character": 38
										}
									]
								},
								{
									"id": 1235,
									"name": "getCalldataAllocationsForContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1236,
											"name": "getCalldataAllocationsForContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1237,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiData.Abi",
														"id": 1344
													}
												},
												{
													"id": 1238,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1239,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderContext",
														"id": 1982
													}
												},
												{
													"id": 1240,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												},
												{
													"id": 1241,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1242,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												},
												{
													"id": 1243,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1244,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1919
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocationTemporary"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 745,
											"character": 42
										}
									]
								},
								{
									"id": 1271,
									"name": "getEventAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1272,
											"name": "getEventAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1273,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 1158
														}
													}
												},
												{
													"id": 1274,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1275,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1276,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1277,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1749
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 896,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1278,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1279,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAllocations"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 894,
											"character": 35
										}
									]
								},
								{
									"id": 1262,
									"name": "getEventAllocationsForContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1263,
											"name": "getEventAllocationsForContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1264,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiData.Abi",
														"id": 1344
													}
												},
												{
													"id": 1265,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1705
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1266,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												},
												{
													"id": 1267,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1268,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												},
												{
													"id": 1269,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1270,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 1919
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventAllocationTemporary"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 860,
											"character": 39
										}
									]
								},
								{
									"id": 1285,
									"name": "hasContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1286,
											"name": "hasContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1287,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1100,
											"character": 19
										}
									]
								},
								{
									"id": 1280,
									"name": "makeContractKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1281,
											"name": "makeContractKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1282,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "DecoderContext",
																"id": 1982
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1283,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1284,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1092,
											"character": 24
										}
									]
								},
								{
									"id": 1248,
									"name": "constructorOutputAllocation",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isConst": true
									},
									"children": [
										{
											"id": 1250,
											"name": "allocationMode",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 822,
													"character": 16
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "full"
											},
											"defaultValue": " \"full\" as const"
										},
										{
											"id": 1252,
											"name": "arguments",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 824,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											},
											"defaultValue": " [] as ReturndataArgumentAllocation[]"
										},
										{
											"id": 1251,
											"name": "kind",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 823,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytecode"
											},
											"defaultValue": " \"bytecode\" as const"
										},
										{
											"id": 1249,
											"name": "selector",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 821,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											},
											"defaultValue": " new Uint8Array()"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1250,
												1252,
												1251,
												1249
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 820,
											"character": 33
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1214,
										1172,
										1139,
										1142,
										1145,
										1155,
										1158,
										1165,
										1176,
										1150
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1138
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1195,
										1200,
										1204,
										1217,
										1226,
										1188,
										1183,
										1288,
										1245,
										1180,
										1253,
										1235,
										1271,
										1262,
										1285,
										1280
									]
								},
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										1248
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1304,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1306,
									"name": "AbiLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 16,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "calldata"
											},
											{
												"type": "stringLiteral",
												"value": "eventdata"
											},
											{
												"type": "stringLiteral",
												"value": "returndata"
											}
										]
									}
								},
								{
									"id": 1305,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:decode\")"
								},
								{
									"id": 1307,
									"name": "decodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1308,
											"name": "decodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1309,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1310,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.AbiDataPointer",
														"id": 2067
													}
												},
												{
													"id": 1311,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1312,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 18,
											"character": 26
										}
									]
								},
								{
									"id": 1313,
									"name": "decodeAbiReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1314,
											"name": "decodeAbiReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1315,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Format.Types.ReferenceType",
																"id": 224
															},
															{
																"type": "reference",
																"name": "TupleType",
																"id": 170
															}
														]
													}
												},
												{
													"id": 1316,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Pointer.AbiDataPointer",
																"id": 2067
															},
															{
																"type": "reference",
																"name": "Pointer.StackFormPointer",
																"id": 2065
															}
														]
													}
												},
												{
													"id": 1317,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1318,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 60,
											"character": 44
										}
									]
								},
								{
									"id": 1319,
									"name": "decodeAbiReferenceStatic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1320,
											"name": "decodeAbiReferenceStatic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1321,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Format.Types.ReferenceType",
																"id": 224
															},
															{
																"type": "reference",
																"name": "TupleType",
																"id": 170
															}
														]
													}
												},
												{
													"id": 1322,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.AbiDataPointer",
														"id": 2067
													}
												},
												{
													"id": 1323,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1324,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 333,
											"character": 41
										}
									]
								},
								{
									"id": 1325,
									"name": "decodeAbiStructByPosition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1326,
											"name": "decodeAbiStructByPosition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1327,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 142
													}
												},
												{
													"id": 1328,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiLocation",
														"id": 1306
													}
												},
												{
													"id": 1329,
													"name": "startPosition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1330,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1331,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.StructResult",
														"id": 415
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 424,
											"character": 35
										}
									]
								},
								{
									"id": 1332,
									"name": "decodeAbiTupleByPosition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1333,
											"name": "decodeAbiTupleByPosition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1334,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TupleType",
														"id": 170
													}
												},
												{
													"id": 1335,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiLocation",
														"id": 1306
													}
												},
												{
													"id": 1336,
													"name": "startPosition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1337,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1338,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.TupleResult",
														"id": 427
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 489,
											"character": 34
										}
									]
								}
							],
							"groups": [
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										1306
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1305
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1307,
										1313,
										1319,
										1325,
										1332
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 8,
									"character": 8
								}
							]
						},
						{
							"id": 1291,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1292,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:encode\")"
								},
								{
									"id": 1293,
									"name": "encodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1294,
											"name": "encodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1295,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												},
												{
													"id": 1296,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 23,
											"character": 25
										}
									]
								},
								{
									"id": 1300,
									"name": "encodeTupleAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1301,
											"name": "encodeTupleAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1302,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Format.Values.Result",
															"id": 366
														}
													}
												},
												{
													"id": 1303,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1139
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 131,
											"character": 30
										}
									]
								},
								{
									"id": 1297,
									"name": "padAndPrependLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1298,
											"name": "padAndPrependLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1299,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 117,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1292
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1293,
										1300,
										1297
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1293,
												1300,
												1297
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 5,
									"character": 8
								}
							]
						},
						{
							"id": 1339,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1340,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:import\")"
								},
								{
									"id": 1341,
									"name": "abiParameterToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1342,
											"name": "abiParameterToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1343,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiParameter",
														"id": 1372
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 8,
											"character": 34
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1340
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1341
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 16,
									"character": 8
								}
							]
						},
						{
							"id": 1381,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1383,
									"name": "Web3Utils",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 5,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": " require(\"web3-utils\")"
								},
								{
									"id": 1382,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:utils\")"
								},
								{
									"id": 1425,
									"name": "abiEntryIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1426,
											"name": "abiEntryIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1427,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.AbiEntry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 177,
											"character": 43
										}
									]
								},
								{
									"id": 1395,
									"name": "abiHasPayableFallback",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1396,
											"name": "abiHasPayableFallback",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1397,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 51,
											"character": 37
										}
									]
								},
								{
									"id": 1398,
									"name": "abiMutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1399,
											"name": "abiMutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1400,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1346
															},
															{
																"type": "reference",
																"name": "ConstructorAbiEntry",
																"id": 1354
															},
															{
																"type": "reference",
																"name": "FallbackAbiEntry",
																"id": 1359
															},
															{
																"type": "reference",
																"name": "ReceiveAbiEntry",
																"id": 1363
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Mutability"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 65,
											"character": 22
										}
									]
								},
								{
									"id": 1428,
									"name": "abiParameterIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1429,
											"name": "abiParameterIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1430,
													"name": "abiParameter",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiParameter",
														"id": 1372
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 193,
											"character": 40
										}
									]
								},
								{
									"id": 1410,
									"name": "abiSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1411,
											"name": "abiSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1412,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1346
															},
															{
																"type": "reference",
																"name": "EventAbiEntry",
																"id": 1367
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 108,
											"character": 27
										}
									]
								},
								{
									"id": 1401,
									"name": "abiSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1402,
											"name": "abiSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1403,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionAbiEntry",
																"id": 1346
															},
															{
																"type": "reference",
																"name": "EventAbiEntry",
																"id": 1367
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 85,
											"character": 28
										}
									]
								},
								{
									"id": 1404,
									"name": "abiTupleSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1405,
											"name": "abiTupleSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1406,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AbiParameter",
															"id": 1372
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 91,
											"character": 33
										}
									]
								},
								{
									"id": 1407,
									"name": "abiTypeSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1408,
											"name": "abiTypeSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1409,
													"name": "parameter",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiParameter",
														"id": 1372
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 96,
											"character": 25
										}
									]
								},
								{
									"id": 1413,
									"name": "abisMatch",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1414,
											"name": "abisMatch",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1415,
													"name": "entry1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.AbiEntry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1416,
													"name": "entry2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.AbiEntry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 124,
											"character": 25
										}
									]
								},
								{
									"id": 1392,
									"name": "computeSelectors",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1393,
											"name": "computeSelectors",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1394,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionAbiBySelectors",
														"id": 1378
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 34,
											"character": 32
										}
									]
								},
								{
									"id": 1417,
									"name": "definitionMatchesAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1418,
											"name": "definitionMatchesAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1419,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.AbiEntry"
													}
												},
												{
													"id": 1420,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1421,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 155,
											"character": 36
										}
									]
								},
								{
									"id": 1389,
									"name": "schemaAbiToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1390,
											"name": "schemaAbiToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1391,
													"name": "abiLoose",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SchemaAbi"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Abi.Abi"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 24,
											"character": 30
										}
									]
								},
								{
									"id": 1422,
									"name": "topicsCount",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1423,
											"name": "topicsCount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1424,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventAbiEntry",
														"id": 1367
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 170,
											"character": 27
										}
									]
								},
								{
									"id": 1384,
									"name": "DEFAULT_CONSTRUCTOR_ABI",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"children": [
										{
											"id": 1386,
											"name": "inputs",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 19,
													"character": 8
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "undefined"
												}
											},
											"defaultValue": " []"
										},
										{
											"id": 1388,
											"name": "payable",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "false"
											},
											"defaultValue": "false"
										},
										{
											"id": 1387,
											"name": "stateMutability",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 20,
													"character": 17
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "nonpayable"
											},
											"defaultValue": "\"nonpayable\""
										},
										{
											"id": 1385,
											"name": "type",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 18,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "constructor"
											},
											"defaultValue": "\"constructor\""
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1386,
												1388,
												1387,
												1385
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 17,
											"character": 36
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1383,
										1382
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1425,
										1395,
										1398,
										1428,
										1410,
										1401,
										1404,
										1407,
										1413,
										1392,
										1417,
										1389,
										1422
									]
								},
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										1384
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 26,
									"character": 8
								}
							]
						},
						{
							"id": 1372,
							"name": "AbiParameter",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1376,
									"name": "components",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 54,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1372
										}
									}
								},
								{
									"id": 1375,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 53,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1377,
									"name": "internalType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 55,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1373,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 51,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1374,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 52,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1376,
										1375,
										1377,
										1373,
										1374
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 50,
									"character": 29
								}
							]
						},
						{
							"id": 1354,
							"name": "ConstructorAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1356,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 24,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1372
										}
									}
								},
								{
									"id": 1358,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 26,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1357,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 25,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "payable"
											},
											{
												"type": "stringLiteral",
												"value": "nonpayable"
											}
										]
									}
								},
								{
									"id": 1355,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 23,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "constructor"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1356,
										1358,
										1357,
										1355
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 22,
									"character": 36
								}
							]
						},
						{
							"id": 1367,
							"name": "EventAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1371,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 47,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1370,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 46,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1372
										}
									}
								},
								{
									"id": 1369,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 45,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1368,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 44,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "event"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1371,
										1370,
										1369,
										1368
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 43,
									"character": 30
								}
							]
						},
						{
							"id": 1359,
							"name": "FallbackAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1362,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 32,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1361,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 31,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "payable"
											},
											{
												"type": "stringLiteral",
												"value": "nonpayable"
											}
										]
									}
								},
								{
									"id": 1360,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 30,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "fallback"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1362,
										1361,
										1360
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 29,
									"character": 33
								}
							]
						},
						{
							"id": 1378,
							"name": "FunctionAbiBySelectors",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1379,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1380,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FunctionAbiEntry",
										"id": 1346
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 58,
									"character": 39
								}
							]
						},
						{
							"id": 1346,
							"name": "FunctionAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1352,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 18,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1349,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 15,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1372
										}
									}
								},
								{
									"id": 1348,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 14,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1350,
									"name": "outputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 16,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AbiParameter",
											"id": 1372
										}
									}
								},
								{
									"id": 1353,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 19,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1351,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 17,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 1347,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 13,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "function"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1352,
										1349,
										1348,
										1350,
										1353,
										1351,
										1347
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 12,
									"character": 33
								}
							]
						},
						{
							"id": 1363,
							"name": "ReceiveAbiEntry",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1366,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 38,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1365,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 37,
											"character": 17
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "payable"
									}
								},
								{
									"id": 1364,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/types.ts",
											"line": 36,
											"character": 6
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "receive"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1366,
										1365,
										1364
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 35,
									"character": 32
								}
							]
						},
						{
							"id": 1344,
							"name": "Abi",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 3,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiEntry",
									"id": 1345
								}
							}
						},
						{
							"id": 1345,
							"name": "AbiEntry",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 5,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FunctionAbiEntry",
										"id": 1346
									},
									{
										"type": "reference",
										"name": "ConstructorAbiEntry",
										"id": 1354
									},
									{
										"type": "reference",
										"name": "FallbackAbiEntry",
										"id": 1359
									},
									{
										"type": "reference",
										"name": "ReceiveAbiEntry",
										"id": 1363
									},
									{
										"type": "reference",
										"name": "EventAbiEntry",
										"id": 1367
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1137,
								1304,
								1291,
								1339,
								1381
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1372,
								1354,
								1367,
								1359,
								1378,
								1346,
								1363
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1344,
								1345
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 302,
							"character": 8
						}
					]
				},
				{
					"id": 1701,
					"name": "Ast",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1900,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1901,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:import\")"
								},
								{
									"id": 1908,
									"name": "definitionToStoredType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1909,
											"name": "definitionToStoredType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1910,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1911,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1912,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1919
													}
												},
												{
													"id": 1913,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.UserDefinedType",
												"id": 140
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 357,
											"character": 38
										}
									]
								},
								{
									"id": 1902,
									"name": "definitionToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1903,
											"name": "definitionToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1904,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1905,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1906,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1919
													}
												},
												{
													"id": 1907,
													"name": "forceLocation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Common.Location"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 20,
											"character": 32
										}
									]
								},
								{
									"id": 1914,
									"name": "makeTypeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1915,
											"name": "makeTypeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1916,
													"name": "astId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1917,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 483,
											"character": 19
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1901
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1908,
										1902,
										1914
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1765,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1766,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:utils\")"
								},
								{
									"id": 1840,
									"name": "baseDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1841,
											"name": "baseDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1842,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 286,
											"character": 30
										}
									]
								},
								{
									"id": 1821,
									"name": "contractKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1822,
											"name": "contractKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "only for contract types, obviously! will yield nonsense otherwise!"
											},
											"parameters": [
												{
													"id": 1823,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.ContractKind"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 202,
											"character": 28
										}
									]
								},
								{
									"id": 1791,
									"name": "decimalPlaces",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1792,
											"name": "decimalPlaces",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for fixed-point types, obviously"
											},
											"parameters": [
												{
													"id": 1793,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 118,
											"character": 29
										}
									]
								},
								{
									"id": 1863,
									"name": "definitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1864,
											"name": "definitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "the main function. just does some dispatch.\nreturns undefined on bad input"
											},
											"parameters": [
												{
													"id": 1865,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1866,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AbiData.AbiEntry",
														"id": 1345
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 519,
											"character": 31
										}
									]
								},
								{
									"id": 1871,
									"name": "eventDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1872,
											"name": "eventDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1873,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1874,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAbiEntry",
												"id": 1367
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 606,
											"character": 29
										}
									]
								},
								{
									"id": 1867,
									"name": "functionDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1868,
											"name": "functionDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1869,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1870,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionAbiEntry",
														"id": 1346
													},
													{
														"type": "reference",
														"name": "ConstructorAbiEntry",
														"id": 1354
													},
													{
														"type": "reference",
														"name": "FallbackAbiEntry",
														"id": 1359
													},
													{
														"type": "reference",
														"name": "ReceiveAbiEntry",
														"id": 1363
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 544,
											"character": 32
										}
									]
								},
								{
									"id": 1854,
									"name": "functionKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1855,
											"name": "functionKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "compatibility function, since pre-0.5.0 functions don't have node.kind\nreturns undefined if you don't put in a function node"
											},
											"parameters": [
												{
													"id": 1856,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 456,
											"character": 28
										}
									]
								},
								{
									"id": 1889,
									"name": "getterDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1890,
											"name": "getterDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1891,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1892,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry",
												"id": 1346
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 729,
											"character": 30
										}
									]
								},
								{
									"id": 1893,
									"name": "getterParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1894,
											"name": "getterParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1895,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1896,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1897,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1898,
															"name": "inputs",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 767,
																	"character": 11
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1705
																}
															}
														},
														{
															"id": 1899,
															"name": "outputs",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 767,
																	"character": 31
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1705
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1898,
																1899
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/utils.ts",
															"line": 767,
															"character": 2
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 764,
											"character": 32
										}
									]
								},
								{
									"id": 1794,
									"name": "isArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1795,
											"name": "isArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1796,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 125,
											"character": 23
										}
									]
								},
								{
									"id": 1860,
									"name": "isContractPayable",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1861,
											"name": "isContractPayable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "takes a contract definition and asks, does it have a payable fallback\nfunction?"
											},
											"parameters": [
												{
													"id": 1862,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 506,
											"character": 33
										}
									]
								},
								{
									"id": 1797,
									"name": "isDynamicArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1798,
											"name": "isDynamicArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1799,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 130,
											"character": 30
										}
									]
								},
								{
									"id": 1812,
									"name": "isEnum",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1813,
											"name": "isEnum",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1814,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 175,
											"character": 22
										}
									]
								},
								{
									"id": 1809,
									"name": "isMapping",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1810,
											"name": "isMapping",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1811,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 170,
											"character": 25
										}
									]
								},
								{
									"id": 1815,
									"name": "isReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1816,
											"name": "isReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1817,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 180,
											"character": 27
										}
									]
								},
								{
									"id": 1827,
									"name": "isSimpleConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1828,
											"name": "isSimpleConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1829,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 232,
											"character": 32
										}
									]
								},
								{
									"id": 1806,
									"name": "isStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1807,
											"name": "isStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1808,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 165,
											"character": 24
										}
									]
								},
								{
									"id": 1843,
									"name": "keyDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1844,
											"name": "keyDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings and arrays only!\nfor arrays, fakes up a uint definition"
											},
											"parameters": [
												{
													"id": 1845,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1846,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Scopes",
														"id": 1752
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 318,
											"character": 29
										}
									]
								},
								{
									"id": 1857,
									"name": "mutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1858,
											"name": "mutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar compatibility function for mutability for pre-0.4.16 versions\nreturns undefined if you don't give it a FunctionDefinition or\nVariableDeclaration"
											},
											"parameters": [
												{
													"id": 1859,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Common.Mutability"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 477,
											"character": 26
										}
									]
								},
								{
									"id": 1880,
									"name": "parameterToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1881,
											"name": "parameterToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1882,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1883,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												},
												{
													"id": 1884,
													"name": "checkIndexed",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiParameter",
												"id": 1372
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 642,
											"character": 23
										}
									]
								},
								{
									"id": 1851,
									"name": "parameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1852,
											"name": "parameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns input parameters, then output parameters\nNOTE: ONLY FOR VARIABLE DECLARATIONS OF FUNCTION TYPE\nNOT FOR FUNCTION DEFINITIONS"
											},
											"parameters": [
												{
													"id": 1853,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1705
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1705
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 439,
											"character": 26
										}
									]
								},
								{
									"id": 1875,
									"name": "parametersToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1876,
											"name": "parametersToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1877,
													"name": "nodes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1705
														}
													}
												},
												{
													"id": 1878,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												},
												{
													"id": 1879,
													"name": "checkIndexed",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "AbiParameter",
													"id": 1372
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 625,
											"character": 24
										}
									]
								},
								{
									"id": 1837,
									"name": "rationalValue",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1838,
											"name": "rationalValue",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "extract the actual numerical value from a node of type rational.\ncurrently assumes result will be integer (currently returns BN)"
											},
											"parameters": [
												{
													"id": 1839,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 278,
											"character": 29
										}
									]
								},
								{
									"id": 1818,
									"name": "referenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1819,
											"name": "referenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "note: only use this on things already verified to be references"
											},
											"parameters": [
												{
													"id": 1820,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Location"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 192,
											"character": 29
										}
									]
								},
								{
									"id": 1834,
									"name": "regularizeTypeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1835,
											"name": "regularizeTypeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "adds \"_ptr\" on to the end of type identifiers that might need it; note that\nthis operates on identifiers, not definitions"
											},
											"parameters": [
												{
													"id": 1836,
													"name": "identifier",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 266,
											"character": 40
										}
									]
								},
								{
									"id": 1788,
									"name": "specifiedSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1789,
											"name": "specifiedSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "e.g. uint48 -> 6",
												"returns": "size in bytes for explicit type size, or `null` if not stated"
											},
											"parameters": [
												{
													"id": 1790,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 87,
											"character": 29
										}
									]
								},
								{
									"id": 1830,
									"name": "spliceLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1831,
											"name": "spliceLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "definition: a storage reference definition\nlocation: the location you want it to refer to instead"
											},
											"parameters": [
												{
													"id": 1832,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1833,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Common.Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 242,
											"character": 30
										}
									]
								},
								{
									"id": 1824,
									"name": "stackSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1825,
											"name": "stackSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "stack size, in words, of a given type"
											},
											"parameters": [
												{
													"id": 1826,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 210,
											"character": 25
										}
									]
								},
								{
									"id": 1800,
									"name": "staticLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1801,
											"name": "staticLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "length of a statically sized array -- please only use for arrays\nalready verified to be static!"
											},
											"parameters": [
												{
													"id": 1802,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 147,
											"character": 28
										}
									]
								},
								{
									"id": 1803,
									"name": "staticLengthAsString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1804,
											"name": "staticLengthAsString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "see staticLength for explanation"
											},
											"parameters": [
												{
													"id": 1805,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 158,
											"character": 36
										}
									]
								},
								{
									"id": 1885,
									"name": "toAbiType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1886,
											"name": "toAbiType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1887,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1888,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 698,
											"character": 18
										}
									]
								},
								{
									"id": 1776,
									"name": "typeClass",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1777,
											"name": "typeClass",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns basic type class for a variable definition node\ne.g.:\n `t_uint256` becomes `uint`\n `t_struct$_Thing_$20_memory_ptr` becomes `struct`"
											},
											"parameters": [
												{
													"id": 1778,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 39,
											"character": 25
										}
									]
								},
								{
									"id": 1779,
									"name": "typeClassLongForm",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1780,
											"name": "typeClassLongForm",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar to typeClass, but includes any numeric qualifiers\ne.g.:\n`t_uint256` becomes `uint256`"
											},
											"parameters": [
												{
													"id": 1781,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 49,
											"character": 33
										}
									]
								},
								{
									"id": 1782,
									"name": "typeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1783,
											"name": "typeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for user-defined types -- structs, enums, contracts\noften you can get these from referencedDeclaration, but not\nalways"
											},
											"parameters": [
												{
													"id": 1784,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 59,
											"character": 22
										}
									]
								},
								{
									"id": 1767,
									"name": "typeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1768,
											"name": "typeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1769,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 12,
											"character": 30
										}
									]
								},
								{
									"id": 1770,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1771,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1772,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 17,
											"character": 26
										}
									]
								},
								{
									"id": 1773,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1774,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the type string, but with location (if any) stripped off the end"
											},
											"parameters": [
												{
													"id": 1775,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 25,
											"character": 41
										}
									]
								},
								{
									"id": 1847,
									"name": "valueDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1848,
											"name": "valueDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings only!"
											},
											"parameters": [
												{
													"id": 1849,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1850,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Scopes",
														"id": 1752
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 385,
											"character": 31
										}
									]
								},
								{
									"id": 1785,
									"name": "visibility",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1786,
											"name": "visibility",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "For function types; returns internal or external\n(not for use on other types! will cause an error!)\nshould only return \"internal\" or \"external\""
											},
											"parameters": [
												{
													"id": 1787,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Visibility"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 74,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1766
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1840,
										1821,
										1791,
										1863,
										1871,
										1867,
										1854,
										1889,
										1893,
										1794,
										1860,
										1797,
										1812,
										1809,
										1815,
										1827,
										1806,
										1843,
										1857,
										1880,
										1851,
										1875,
										1837,
										1818,
										1834,
										1788,
										1830,
										1824,
										1800,
										1803,
										1885,
										1776,
										1779,
										1782,
										1767,
										1770,
										1773,
										1847,
										1785
									],
									"categories": [
										{
											"title": "Definition Reading",
											"children": [
												1840,
												1821,
												1791,
												1854,
												1794,
												1860,
												1797,
												1812,
												1809,
												1815,
												1827,
												1806,
												1843,
												1857,
												1851,
												1837,
												1818,
												1834,
												1788,
												1830,
												1824,
												1800,
												1803,
												1776,
												1779,
												1782,
												1767,
												1770,
												1773,
												1847,
												1785
											]
										},
										{
											"title": "Other",
											"children": [
												1863,
												1871,
												1867,
												1889,
												1893,
												1880,
												1875,
												1885
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1705,
							"name": "AstNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1746,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 51,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1741,
									"name": "baseType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 46,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 1709,
									"name": "canonicalName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 12,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1706,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 9,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1747,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 52,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 1720,
									"name": "expression",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 23,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1721,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1722,
													"name": "referencedDeclaration",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 24,
															"character": 25
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1722
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 23,
													"character": 14
												}
											]
										}
									}
								},
								{
									"id": 1727,
									"name": "hexValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 32,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1707,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 10,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1745,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 50,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1748,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 53,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1742,
									"name": "keyType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 47,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 1726,
									"name": "kind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 31,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1710,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 13,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1711,
									"name": "members",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 14,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AstNode",
											"id": 1705
										}
									}
								},
								{
									"id": 1708,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 11,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1713,
									"name": "nodeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 16,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1712,
									"name": "nodes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 15,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AstNode",
											"id": 1705
										}
									}
								},
								{
									"id": 1735,
									"name": "parameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 40,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1736,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1737,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 41,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1705
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1737
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 40,
													"character": 18
												}
											]
										}
									}
								},
								{
									"id": 1729,
									"name": "parameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 34,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1730,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1731,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 35,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1705
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1731
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 34,
													"character": 14
												}
											]
										}
									}
								},
								{
									"id": 1744,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 49,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1728,
									"name": "referencedDeclaration",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 33,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1738,
									"name": "returnParameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 43,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1739,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1740,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 44,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1705
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1740
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 43,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 1732,
									"name": "returnParameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 37,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1733,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1734,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 38,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1705
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1734
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 37,
													"character": 20
												}
											]
										}
									}
								},
								{
									"id": 1714,
									"name": "scope",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 17,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1715,
									"name": "src",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 18,
											"character": 5
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1725,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 30,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 1716,
									"name": "stateVariable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 19,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1717,
									"name": "storageLocation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 20,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1718,
									"name": "typeDescriptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 21,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "TypeDescriptions",
										"id": 1702
									}
								},
								{
									"id": 1719,
									"name": "typeName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 22,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 1723,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 26,
											"character": 7
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								},
								{
									"id": 1743,
									"name": "valueType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 48,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 1724,
									"name": "visibility",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 27,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1746,
										1741,
										1709,
										1706,
										1747,
										1720,
										1727,
										1707,
										1745,
										1748,
										1742,
										1726,
										1710,
										1711,
										1708,
										1713,
										1712,
										1735,
										1729,
										1744,
										1728,
										1738,
										1732,
										1714,
										1715,
										1725,
										1716,
										1717,
										1718,
										1719,
										1723,
										1743,
										1724
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 8,
									"character": 24
								}
							]
						},
						{
							"id": 1749,
							"name": "AstNodes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1750,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1751,
											"name": "nodeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 59,
									"character": 25
								}
							]
						},
						{
							"id": 1752,
							"name": "Scopes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1753,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1754,
											"name": "nodeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1755,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1764,
													"name": "definition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 74,
															"character": 14
														}
													],
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1756,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 66,
															"character": 6
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1758,
													"name": "parentId",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 68,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 1759,
													"name": "pointer",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 69,
															"character": 11
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1757,
													"name": "sourceId",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 67,
															"character": 12
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1760,
													"name": "variables",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 70,
															"character": 13
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reflection",
															"declaration": {
																"id": 1761,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"children": [
																	{
																		"id": 1763,
																		"name": "id",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "codec/lib/ast/types.ts",
																				"line": 72,
																				"character": 8
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "number"
																		}
																	},
																	{
																		"id": 1762,
																		"name": "name",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "codec/lib/ast/types.ts",
																				"line": 71,
																				"character": 10
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			1763,
																			1762
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "codec/lib/ast/types.ts",
																		"line": 70,
																		"character": 15
																	}
																]
															}
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1764,
														1756,
														1758,
														1759,
														1757,
														1760
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 65,
													"character": 19
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 64,
									"character": 23
								}
							]
						},
						{
							"id": 1702,
							"name": "TypeDescriptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1703,
									"name": "typeIdentifier",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 4,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1704,
									"name": "typeString",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 5,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1703,
										1704
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 3,
									"character": 33
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1900,
								1765
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1705,
								1749,
								1752,
								1702
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 369,
							"character": 8
						}
					]
				},
				{
					"id": 1688,
					"name": "AstConstant",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For reading/decoding constants expressed as AST nodes"
					},
					"children": [
						{
							"id": 1694,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1695,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:decode\")"
								},
								{
									"id": 1696,
									"name": "decodeConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1697,
											"name": "decodeConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1698,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1699,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 2102
													}
												},
												{
													"id": 1700,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 14,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1695
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1696
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1689,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1690,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:ast:read\")"
								},
								{
									"id": 1691,
									"name": "readDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1692,
											"name": "readDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1693,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 2102
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 11,
											"character": 30
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1690
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1691
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1694,
								1689
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 359,
							"character": 10
						}
					]
				},
				{
					"id": 1065,
					"name": "Basic",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of primitives and constants"
					},
					"children": [
						{
							"id": 1066,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1067,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:basic:decode\")"
								},
								{
									"id": 1097,
									"name": "checkPaddingLeft",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1098,
											"name": "checkPaddingLeft",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1099,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1100,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 628,
											"character": 32
										}
									]
								},
								{
									"id": 1093,
									"name": "checkPaddingRight",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1094,
											"name": "checkPaddingRight",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1095,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1096,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 622,
											"character": 26
										}
									]
								},
								{
									"id": 1101,
									"name": "checkPaddingSigned",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1102,
											"name": "checkPaddingSigned",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1103,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1104,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 633,
											"character": 27
										}
									]
								},
								{
									"id": 1068,
									"name": "decodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1069,
											"name": "decodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1070,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1071,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2064
													}
												},
												{
													"id": 1072,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1073,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 13,
											"character": 28
										}
									]
								},
								{
									"id": 1074,
									"name": "decodeContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1075,
											"name": "decodeContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1076,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1077,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 354
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 423,
											"character": 31
										}
									]
								},
								{
									"id": 1078,
									"name": "decodeContractAndContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1079,
											"name": "decodeContractAndContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1080,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1081,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "ContractInfoAndContext"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 430,
											"character": 34
										}
									]
								},
								{
									"id": 1082,
									"name": "decodeExternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1083,
											"name": "decodeExternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1084,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1085,
													"name": "selectorBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1086,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.FunctionExternalValueInfo",
														"id": 462
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 466,
											"character": 39
										}
									]
								},
								{
									"id": 1087,
									"name": "decodeInternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1088,
											"name": "decodeInternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1089,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "FunctionInternalType",
														"id": 115
													}
												},
												{
													"id": 1090,
													"name": "deployedPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1091,
													"name": "constructorPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1092,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Values.FunctionInternalResult",
												"id": 479
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 505,
											"character": 38
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1067
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1097,
										1093,
										1101,
										1068,
										1074,
										1078,
										1082,
										1087
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1108,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1109,
									"name": "encodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1110,
											"name": "encodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Handles encoding of basic types; yes the input type is broader than\nit should be but it's hard to fix this without causing other problems,\nsorry!"
											},
											"parameters": [
												{
													"id": 1111,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Value",
														"id": 368
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/encode/index.ts",
											"line": 15,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1109
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1109
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1066,
								1108
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 279,
							"character": 8
						}
					]
				},
				{
					"id": 1112,
					"name": "Bytes",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Contains functions for dealing with raw bytestrings"
					},
					"children": [
						{
							"id": 1118,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1119,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:bytes:decode\")"
								},
								{
									"id": 1120,
									"name": "decodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1121,
											"name": "decodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1122,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "BytesTypeDynamic",
																"id": 29
															},
															{
																"type": "reference",
																"name": "StringType",
																"id": 47
															}
														]
													}
												},
												{
													"id": 1123,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2064
													}
												},
												{
													"id": 1124,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1125,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 13,
											"character": 28
										}
									]
								},
								{
									"id": 1126,
									"name": "decodeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1127,
											"name": "decodeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1128,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Values.StringValueInfo",
												"id": 309
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 65,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1119
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1120,
										1126
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1129,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1130,
									"name": "encodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1131,
											"name": "encodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes without padding, length, etc!"
											},
											"parameters": [
												{
													"id": 1132,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "BytesDynamicValue",
																"id": 289
															},
															{
																"type": "reference",
																"name": "StringValue",
																"id": 304
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 15,
											"character": 27
										}
									]
								},
								{
									"id": 1133,
									"name": "stringToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1134,
											"name": "stringToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1135,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 39,
											"character": 22
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1130,
										1133
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1130,
												1133
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 1113,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1114,
									"name": "readBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1115,
											"name": "readBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1116,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.BytesPointer",
														"id": 2068
													}
												},
												{
													"id": 1117,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2109
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 5,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1114
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1118,
								1129,
								1113
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 285,
							"character": 8
						}
					]
				},
				{
					"id": 1928,
					"name": "Compilations",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1957,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1958,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:compilations:utils\")"
								},
								{
									"id": 1970,
									"name": "extractPrimarySource",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1971,
											"name": "extractPrimarySource",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1972,
													"name": "sourceMap",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 180,
											"character": 29
										}
									]
								},
								{
									"id": 1966,
									"name": "getContractNode",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1967,
											"name": "getContractNode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1968,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Contract",
														"id": 1941
													}
												},
												{
													"id": 1969,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Compilation",
														"id": 1929
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 129,
											"character": 31
										}
									]
								},
								{
									"id": 1959,
									"name": "shimArtifacts",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1960,
											"name": "shimArtifacts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1961,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Artifact"
														}
													}
												},
												{
													"id": 1962,
													"name": "files",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Compilation",
													"id": 1929
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 9,
											"character": 29
										}
									]
								},
								{
									"id": 1963,
									"name": "sourceIndexForAst",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1964,
											"name": "sourceIndexForAst",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1965,
													"name": "ast",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 120,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1958
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1970,
										1966,
										1959,
										1963
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1950,
							"name": "Bytecode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1951,
									"name": "bytes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 118,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1952,
									"name": "linkReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 119,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 1953,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 1956,
														"name": "length",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/compilations/types.ts",
																"line": 122,
																"character": 10
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													{
														"id": 1955,
														"name": "name",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/compilations/types.ts",
																"line": 121,
																"character": 8
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"id": 1954,
														"name": "offsets",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/compilations/types.ts",
																"line": 120,
																"character": 11
															}
														],
														"type": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															1956,
															1955,
															1954
														]
													}
												],
												"sources": [
													{
														"fileName": "codec/lib/compilations/types.ts",
														"line": 119,
														"character": 17
													}
												]
											}
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1951,
										1952
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 117,
									"character": 25
								}
							]
						},
						{
							"id": 1929,
							"name": "Compilation",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An individual compilation."
							},
							"children": [
								{
									"id": 1934,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The compiler used in the compilation.  For internal compatibility\npurposes, this may technically be left out if the compiler is instead\nspecified on each source and contract, but please don't actually do that."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 40,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1919
									}
								},
								{
									"id": 1933,
									"name": "contracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A list of contracts involved in the compilation."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 34,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Contract",
											"id": 1941
										}
									}
								},
								{
									"id": 1930,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The compilation's ID."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 17,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1932,
									"name": "sources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A list of sources involved in the compilation.  These must be ordered according\nto their compilation indices.  (If there is for some reason a gap in the\ncompilation indices, a corresponding gap must be left in the sources array.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 30,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Source",
											"id": 1935
										}
									}
								},
								{
									"id": 1931,
									"name": "unreliableSourceOrder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.  It indicates\nthat the order on the sources should be disregarded and disables functionality\nthat relies on such an order.  (E.g., the debugger will throw an exception if\nthis is set.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 24,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1934,
										1933,
										1930,
										1932,
										1931
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 13,
									"character": 28
								}
							]
						},
						{
							"id": 1941,
							"name": "Contract",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Represents a contract in a compilation."
							},
							"children": [
								{
									"id": 1947,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The contract's ABI."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 103,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "SchemaAbi"
									}
								},
								{
									"id": 1943,
									"name": "bytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 85,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode",
												"id": 1950
											}
										]
									}
								},
								{
									"id": 1948,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 109,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1919
									}
								},
								{
									"id": 1942,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The contract's name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 79,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1944,
									"name": "deployedBytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 91,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode",
												"id": 1950
											}
										]
									}
								},
								{
									"id": 1946,
									"name": "deployedSourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 99,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1949,
									"name": "primarySourceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the contract's primary source."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 113,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1945,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 95,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1947,
										1943,
										1948,
										1942,
										1944,
										1946,
										1949,
										1945
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 75,
									"character": 25
								}
							]
						},
						{
							"id": 1935,
							"name": "Source",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Represents a source in a compilation."
							},
							"children": [
								{
									"id": 1939,
									"name": "ast",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's abstract syntax tree."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 63,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 1940,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 69,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1919
									}
								},
								{
									"id": 1936,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's ID.  For internal compatibility purposes, this may technically\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 51,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1938,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source text."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 59,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1937,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's file path."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 55,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1939,
										1940,
										1936,
										1938,
										1937
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 46,
									"character": 23
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1957
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1950,
								1929,
								1941,
								1935
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 375,
							"character": 8
						}
					]
				},
				{
					"id": 1918,
					"name": "Compiler",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1923,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1924,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:compiler:utils\")"
								},
								{
									"id": 1925,
									"name": "solidityFamily",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1926,
											"name": "solidityFamily",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1927,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1919
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "SolidityFamily",
												"id": 1922
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 7,
											"character": 30
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1924
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1925
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1919,
							"name": "CompilerVersion",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1920,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 2,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1921,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 3,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1920,
										1921
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 1,
									"character": 32
								}
							]
						},
						{
							"id": 1922,
							"name": "SolidityFamily",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 8,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "pre-0.5.0"
									},
									{
										"type": "stringLiteral",
										"value": "0.5.x"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1923
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1919
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1922
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 372,
							"character": 8
						}
					]
				},
				{
					"id": 1973,
					"name": "Contexts",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2009,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2010,
									"name": "contextToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2011,
											"name": "contextToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2012,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 1975
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.ContractType",
												"id": 193
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 4,
											"character": 29
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2010
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 2013,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2014,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:contexts:utils\")"
								},
								{
									"id": 2019,
									"name": "findDebuggerContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2020,
											"name": "findDebuggerContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2021,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DebuggerContexts",
														"id": 1979
													}
												},
												{
													"id": 2022,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 28,
											"character": 35
										}
									]
								},
								{
									"id": 2015,
									"name": "findDecoderContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2016,
											"name": "findDecoderContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2017,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderContexts",
														"id": 1976
													}
												},
												{
													"id": 2018,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DecoderContext",
														"id": 1982
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 16,
											"character": 34
										}
									]
								},
								{
									"id": 2023,
									"name": "matchContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2024,
											"name": "matchContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2025,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 1975
													}
												},
												{
													"id": 2026,
													"name": "givenBinary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 40,
											"character": 28
										}
									]
								},
								{
									"id": 2027,
									"name": "normalizeContexts",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2028,
											"name": "normalizeContexts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2029,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Contexts",
														"id": 1974
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 1974
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 69,
											"character": 33
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2014
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2019,
										2015,
										2023,
										2027
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1996,
							"name": "DebuggerContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2003,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 45,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AbiData.Abi",
										"id": 1344
									}
								},
								{
									"id": 1998,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 38,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2007,
									"name": "compilation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 49,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2006,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1919
									}
								},
								{
									"id": 1997,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 37,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2001,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 43,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2002,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 44,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 2000,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 42,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1999,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 41,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2008,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 50,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2005,
									"name": "primarySource",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 47,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2004,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 46,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2003,
										1998,
										2007,
										2006,
										1997,
										2001,
										2002,
										2000,
										1999,
										2008,
										2005,
										2004
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 36,
									"character": 32
								}
							]
						},
						{
							"id": 1979,
							"name": "DebuggerContexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1980,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1981,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DebuggerContext",
										"id": 1996
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 13,
									"character": 33
								}
							]
						},
						{
							"id": 1982,
							"name": "DecoderContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1989,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 26,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "FunctionAbiBySelectors",
										"id": 1378
									}
								},
								{
									"id": 1984,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 19,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1995,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 33,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 1919
									}
								},
								{
									"id": 1983,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 18,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1987,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 24,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1988,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 25,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 1986,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 23,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1991,
									"name": "fallbackAbi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 28,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1992,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1993,
													"name": "fallback",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 30,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FallbackAbiEntry",
																"id": 1359
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 1994,
													"name": "receive",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 31,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "ReceiveAbiEntry",
																"id": 1363
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1993,
														1994
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/contexts/types.ts",
													"line": 28,
													"character": 15
												}
											]
										}
									}
								},
								{
									"id": 1985,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 22,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1990,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 27,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1989,
										1984,
										1995,
										1983,
										1987,
										1988,
										1986,
										1991,
										1985,
										1990
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 17,
									"character": 31
								}
							]
						},
						{
							"id": 1976,
							"name": "DecoderContexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1977,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1978,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContext",
										"id": 1982
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 9,
									"character": 32
								}
							]
						},
						{
							"id": 1975,
							"name": "Context",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 7,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "DecoderContext",
										"id": 1982
									},
									{
										"type": "reference",
										"name": "DebuggerContext",
										"id": 1996
									}
								]
							}
						},
						{
							"id": 1974,
							"name": "Contexts",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 5,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "DecoderContexts",
										"id": 1976
									},
									{
										"type": "reference",
										"name": "DebuggerContexts",
										"id": 1979
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2009,
								2013
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1996,
								1979,
								1982,
								1976
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1975,
								1974
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 378,
							"character": 8
						}
					]
				},
				{
					"id": 2030,
					"name": "Conversion",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2031,
							"name": "debug",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 2,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "IDebugger"
							},
							"defaultValue": " debugModule(\"codec:conversion\")"
						},
						{
							"id": 2060,
							"name": "cleanBool",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2061,
									"name": "cleanBool",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2062,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Format.Values.ElementaryResult",
												"id": 370
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Format.Values.ElementaryResult",
										"id": 370
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 174,
									"character": 25
								}
							]
						},
						{
							"id": 2057,
							"name": "countDecimalPlaces",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2058,
									"name": "countDecimalPlaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2059,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 166,
									"character": 34
								}
							]
						},
						{
							"id": 2053,
							"name": "shiftBigDown",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2054,
									"name": "shiftBigDown",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2055,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 2056,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 159,
									"character": 28
								}
							]
						},
						{
							"id": 2049,
							"name": "shiftBigUp",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2050,
									"name": "shiftBigUp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2051,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 2052,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 152,
									"character": 26
								}
							]
						},
						{
							"id": 2032,
							"name": "toBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2033,
									"name": "toBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 2034,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "undefined | string | number | BN | Uint8Array | Big"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 12,
									"character": 20
								}
							]
						},
						{
							"id": 2038,
							"name": "toBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2039,
									"name": "toBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2040,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 49,
									"character": 21
								}
							]
						},
						{
							"id": 2045,
							"name": "toBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2046,
									"name": "toBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2047,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										},
										{
											"id": 2048,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 93,
									"character": 23
								}
							]
						},
						{
							"id": 2041,
							"name": "toHexString",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2042,
									"name": "toHexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 2043,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array | BN"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "BN"
													}
												]
											}
										},
										{
											"id": 2044,
											"name": "padLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "number - minimum desired byte length (left-pad with zeroes)"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 60,
									"character": 27
								}
							]
						},
						{
							"id": 2035,
							"name": "toSignedBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2036,
									"name": "toSignedBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 2037,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array"
											},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 38,
									"character": 26
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2031
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2060,
								2057,
								2053,
								2049,
								2032,
								2038,
								2045,
								2041,
								2035
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 381,
							"character": 8
						}
					]
				},
				{
					"id": 2108,
					"name": "Evm",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2156,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2160,
									"name": "ADDRESS_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 10,
											"character": 25
										}
									],
									"type": {
										"type": "unknown",
										"name": "20"
									},
									"defaultValue": "20"
								},
								{
									"id": 2163,
									"name": "MAX_WORD",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 13,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									},
									"defaultValue": " new BN(-1).toTwos(WORD_SIZE * 8)"
								},
								{
									"id": 2162,
									"name": "PC_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 12,
											"character": 20
										}
									],
									"type": {
										"type": "unknown",
										"name": "4"
									},
									"defaultValue": "4"
								},
								{
									"id": 2161,
									"name": "SELECTOR_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 11,
											"character": 26
										}
									],
									"type": {
										"type": "unknown",
										"name": "4"
									},
									"defaultValue": "4"
								},
								{
									"id": 2159,
									"name": "WORD_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 9,
											"character": 22
										}
									],
									"type": {
										"type": "unknown",
										"name": "32"
									},
									"defaultValue": "32"
								},
								{
									"id": 2158,
									"name": "Web3Utils",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 6,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": " require(\"web3-utils\")"
								},
								{
									"id": 2164,
									"name": "ZERO_ADDRESS",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": " \"0x\" + \"00\".repeat(ADDRESS_SIZE)"
								},
								{
									"id": 2157,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:evm:utils\")"
								},
								{
									"id": 2168,
									"name": "equalData",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2169,
											"name": "equalData",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2170,
													"name": "bytes1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 2171,
													"name": "bytes2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 38,
											"character": 25
										}
									]
								},
								{
									"id": 2165,
									"name": "keccak256",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2166,
											"name": "keccak256",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2167,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 22,
											"character": 25
										}
									]
								},
								{
									"id": 2172,
									"name": "toAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2173,
											"name": "toAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2174,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 56,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2160,
										2163,
										2162,
										2161,
										2159,
										2158,
										2164,
										2157
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2168,
										2165,
										2172
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 2132,
							"name": "AllocationInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2135,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 47,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AbiAllocations",
										"id": 1139
									}
								},
								{
									"id": 2136,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataAllocations"
									}
								},
								{
									"id": 2137,
									"name": "event",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 49,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EventAllocations"
									}
								},
								{
									"id": 2134,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 46,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "MemoryAllocations",
										"id": 1462
									}
								},
								{
									"id": 2138,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 50,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "StateAllocations",
										"id": 1583
									}
								},
								{
									"id": 2133,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 45,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "StorageAllocations",
										"id": 1574
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2135,
										2136,
										2137,
										2134,
										2138,
										2133
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 44,
									"character": 31
								}
							]
						},
						{
							"id": 2124,
							"name": "EvmInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2128,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 38,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 2132
									}
								},
								{
									"id": 2129,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 39,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContexts",
										"id": 1976
									}
								},
								{
									"id": 2130,
									"name": "currentContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 40,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"name": "DecoderContext",
										"id": 1982
									}
								},
								{
									"id": 2131,
									"name": "internalFunctionsTable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 41,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "InternalFunctions",
										"id": 2139
									}
								},
								{
									"id": 2126,
									"name": "mappingKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 36,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Storage.Slot",
											"id": 1547
										}
									}
								},
								{
									"id": 2125,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 35,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EvmState",
										"id": 2109
									}
								},
								{
									"id": 2127,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 37,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 226
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2128,
										2129,
										2130,
										2131,
										2126,
										2125,
										2127
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 34,
									"character": 24
								}
							]
						},
						{
							"id": 2109,
							"name": "EvmState",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2113,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 21,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2118,
									"name": "eventdata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 25,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2119,
									"name": "eventtopics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 26,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 2112,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 20,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2120,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 27,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2114,
									"name": "specials",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 22,
											"character": 10
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2115,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2116,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2117,
															"name": "builtin",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/evm/types.ts",
													"line": 22,
													"character": 12
												}
											]
										}
									}
								},
								{
									"id": 2111,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 19,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 2110,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 18,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "WordMapping",
										"id": 2121
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2113,
										2118,
										2119,
										2112,
										2120,
										2114,
										2111,
										2110
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 17,
									"character": 25
								}
							]
						},
						{
							"id": 2142,
							"name": "InternalFunction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2152,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 67,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2153,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 68,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 2151,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 66,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2150,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 65,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 2154,
									"name": "contractPayable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 69,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2149,
									"name": "contractPointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 64,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2147,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 62,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2155,
									"name": "isDesignatedInvalid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 70,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2148,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 63,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 2146,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 61,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2145,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 60,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 2144,
									"name": "pointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 59,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2143,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 58,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2152,
										2153,
										2151,
										2150,
										2154,
										2149,
										2147,
										2155,
										2148,
										2146,
										2145,
										2144,
										2143
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 57,
									"character": 33
								}
							]
						},
						{
							"id": 2139,
							"name": "InternalFunctions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 2140,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 2141,
											"name": "pc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InternalFunction",
										"id": 2142
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 53,
									"character": 34
								}
							]
						},
						{
							"id": 2121,
							"name": "WordMapping",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 2122,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 2123,
											"name": "slotAddress",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 30,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2156
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2132,
								2124,
								2109,
								2142,
								2139,
								2121
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 387,
							"character": 8
						}
					]
				},
				{
					"id": 2,
					"name": "Format",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "# Codec Output Format",
						"text": "## Module information\n\nThis module primarily defines TypeScript types for the output format\nused in results provided by packages\n`@truffle/decoder@^4.0.0` and `@truffle/codec@^0.1.0`.\n\nSee below for complete listing or continue reading\n[Format information](#format-information) to learn about this format.\n\n### How to import\n\nImport either as part of Codec or by itself:\n\n```typescript\n// when importing entire Codec, use Codec.Format.*:\nimport * as Codec from \"@truffle/codec\";\n\n// or import Format directly:\nimport { Format } from \"@truffle/codec\";\n```\n\n![Example struct decoding](media://example-struct-decoding.png)\n\n## Format information\n\nThis format is intended for use in smart contract and dapp development\ntools and libraries, and for use in display contexts, such as when\nbuilding on-screen components to show transaction and smart contract\nstate information.\n\nThis format seeks to provide an exhaustive schema for JavaScript\nobjects to encode **lossless**, **machine-readable** representations of\nall possible Solidity and ABI data types and all possible values of those\ntypes.\n\nThis format targets types and values understood by the\n[Solidity programming language](https://solidity.readthedocs.io) and\nthe [Contract ABI specification](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html),\nwithin the context of the [Ethereum Virtual Machine](https://ethereum.github.io/yellowpaper/paper.pdf)\n(EVM) and in raw data for transactions and logs according to the\n[Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).\n\nObjects in this format may be deeply nested and/or contain circular\ndependencies. As such, **do not** serialize objects in this format or\notherwise attempt to display them in full without considering potential\nrisk. **Objects in this format are for the machine to read, not humans!**\nThis module provides utilities for inspecting objects in this format,\nincluding the **safe** [[Format.Utils.Inspect.ResultInspector]] wrapper\n(for [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)),\nand the **unsafe** [[Format.Utils.Inspect.nativize]] function. For more\ninformation, please see the documentation for those utilities.\n\n### Specification\n\nIndividual decoded values are represented by objects of the type\n[[Format.Values.Result]], which contain the following fields:\n1. `type`: This is a [[Format.Types.Type|`Type`]] object describing the value's\ntype.  Each `Type` has a `typeClass` field describing the overall broad type,\nsuch as `\"uint\"` or `\"bytes\"`, together with additional information that gives\nthe specific type.  For full detail, see [[Format.Types]].\n\n2. `kind`: This is either `\"value\"`, in which case the `Result` is a\n[[Format.Values.Value|`Value`]], or `\"error\"`, in which case the `Result` is an\n[[Format.Errors.ErrorResult|`ErrorResult`]].  In the former case, there will be\na `value` field containin the decoded value.  In the latter case, there will be\nan `error` field indicating what went wrong.  *Warning*: When decoding a\ncomplex type, such as an array, mapping, or array, getting a kind of `\"value\"`\ndoes not necessarily mean the individual elements were decoded successfully.\nEven if the `Result` for the array (mapping, struct) as a whole has kind\n`\"value\"`, the elements might still have kind `\"error\"`.\n\n3. `value`: As mentioned, this is included when `kind` is equal to `\"value\"`.\nIt contains information about the actual decoded value.  See\n[[Format.Values|`Format.Values`]] for more information.\n\n4. `error`: The alternative to `value`.  Generally includes information about\nthe raw data that led to the error.  See [[Format.Errors|`Format.Errors`]] for\nmore information.\n\n5. `reference`: This field is a debugger-only feature and does not\napply to results returned by  @truffle/decoder, so it won't be documented here.\n\n### Values vs. errors\n\nIt's worth taking a moment here to answer the question: What counts as a value,\nand what counts as an error?\n\nIn general, the answer is that anything that can be generated via Solidity\nalone (i.e. no assembly), with correctly-encoded inputs, and without making use\nof compiler bugs, is a value, not an error.  That means that, for instance, the\nfollowing things are values, not errors:\n- A variable of contract type whose address does not actually hold a\ncontract of that type;\n- An external function pointer that does not correspond to a valid\nfunction;\n- A string containing invalid UTF-8;\n- ..., etc.\n\nBy contrast, the following *are* errors:\n- A `bool` which is neither `false` (0) nor `true` (1);\n- An `enum` which is out of range;\n- ..., etc.\n\n(You may be wondering about the enum case here, because if you go sufficiently\nfar back, to Solidity 0.4.4 or earlier, it *was* possible to generate\nout-of-range enums without resorting to assembly or compiler bugs.  However,\nenums are only supported in full mode (see\n[Notes on decoding modes](../#decoding-modes)),\nwhich only supports 0.4.12 and later, so\nwe consider out-of-range enums an error.  There are also additional technical\nreasons why supporting out-of-range enums as a value would be difficult.)\n\nThere are three special cases here that are likely worthy of note.\n\nFirstly, internal function pointers currently can't be meaningfully\ndecoded via @truffle/decoder.  However, they decode to a bare-bones value,\nnot an error, as it is (in a sense) our own fault that we can't decode\nthese, so it doesn't make sense to report an error, which would mean that\nsomething is wrong with the encoded data itself.  This value that it\ndecodes to will give the program counter values it corresponds to, but\nwill not include the function name or defining class, as @truffle/decoder\nis not presently capable of that.  For now, full decoding of internal\nfunction pointers remains a debugger-only feature.  (But limited support for\nthis via @truffle/decoder is planned for the future.)\n\n(When using the debugger, an invalid internal function pointer will decode to an\nerror.  However, when using @truffle/decoder, we have no way of discerning whether\nthe pointer is valid or not, so internal function pointers will always decode to\na value, if an uninformative one.)\n\nSecondly, when decoding events, it is impossible to decode indexed parameters\nof reference type.  Thus, these decode to an error\n(`IndexedReferenceTypeError`, which see) rather than to a value.\n\nThirdly, the decoder is currently limited when it comes to decoding state\nvariables that are declared constant, and not all such variables are yet\nsupported in decoding; attempting to decode one of these that is not currently\nsupported will yield an error.\n\nSimilarly, there are various things that decode to errors for technical reasons.\nObjects with encoded length fields larger than what fits in a JavaScript safe\ninteger, or pointed to by pointers with values larger than what fits in a\nJavaScript safe integer, will decode to errors, even if they may technically be\nlegal.  Such cases are impractical to handle and should never come up in real\nuse so we decode them to errors.  Errors may also be returned in case of an\nerror in attempting to read the data to be decoded.\n\nFinally, except when decoding events, we do not return an error if the pointers\nin an ABI-encoded array or tuple are arranged in a nonstandard way, or if\nstrings or bytestrings are incorrectly padded, because it is not worth the\ntrouble to detect these conditions.\n\n\n## Notes on this documentation\n\nMost of this doesn't have explanatory documentation\nbecause it's largely self-explanatory, but particularly\nnon-obvious parts have been documented for clarity.\n\nA note on optional fields: A number of types or values\nhave optional fields.  These contain helpful\nbut non-essential information, or information which\nfor technical reasons we can't guarantee we can determine.\n"
					},
					"children": [
						{
							"id": 806,
							"name": "Config",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 810,
									"name": "DefaultFormatConfig",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 812,
											"name": "decimalType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/config.ts",
													"line": 8,
													"character": 13
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "Big"
											},
											"overwrites": {
												"type": "reference",
												"name": "FormatConfig.decimalType",
												"id": 809
											}
										},
										{
											"id": 811,
											"name": "integerType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/config.ts",
													"line": 7,
													"character": 13
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BN"
											},
											"overwrites": {
												"type": "reference",
												"name": "FormatConfig.integerType",
												"id": 808
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												812,
												811
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 6,
											"character": 36
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "FormatConfig",
											"id": 807
										}
									]
								},
								{
									"id": 807,
									"name": "FormatConfig",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 809,
											"name": "decimalType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/config.ts",
													"line": 3,
													"character": 13
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "Big"
													},
													{
														"type": "stringLiteral",
														"value": "string"
													}
												]
											}
										},
										{
											"id": 808,
											"name": "integerType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/config.ts",
													"line": 2,
													"character": 13
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "BN"
													},
													{
														"type": "stringLiteral",
														"value": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												809,
												808
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 1,
											"character": 29
										}
									],
									"extendedBy": [
										{
											"type": "reference",
											"name": "DefaultFormatConfig",
											"id": 810
										},
										{
											"type": "reference",
											"name": "SerialFormatConfig",
											"id": 813
										}
									]
								},
								{
									"id": 813,
									"name": "SerialFormatConfig",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 815,
											"name": "decimalType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/config.ts",
													"line": 13,
													"character": 13
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "string"
											},
											"overwrites": {
												"type": "reference",
												"name": "FormatConfig.decimalType",
												"id": 809
											}
										},
										{
											"id": 814,
											"name": "integerType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/config.ts",
													"line": 12,
													"character": 13
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "string"
											},
											"overwrites": {
												"type": "reference",
												"name": "FormatConfig.integerType",
												"id": 808
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												815,
												814
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/config.ts",
											"line": 11,
											"character": 35
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "FormatConfig",
											"id": 807
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										810,
										807,
										813
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 22,
									"character": 9
								}
							]
						},
						{
							"id": 509,
							"name": "Errors",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for error and `ErrorResult` objects."
							},
							"children": [
								{
									"id": 577,
									"name": "AddressErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an address"
									},
									"typeParameter": [
										{
											"id": 578,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 581,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 281,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "AddressError",
														"id": 582,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 580,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 280,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 579,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 279,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												581,
												580,
												579
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 276,
											"character": 35
										}
									]
								},
								{
									"id": 584,
									"name": "AddressPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an address (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 585,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 587,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 305,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "AddressPaddingError"
											}
										},
										{
											"id": 586,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string; no checksum"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 304,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												587,
												586
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 298,
											"character": 36
										}
									]
								},
								{
									"id": 647,
									"name": "ArrayErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an array"
									},
									"typeParameter": [
										{
											"id": 648,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 651,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 512,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "ArrayError",
														"id": 652,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 650,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 511,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 649,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 510,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												651,
												650,
												649
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 507,
											"character": 33
										}
									]
								},
								{
									"id": 541,
									"name": "BoolErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a boolean"
									},
									"typeParameter": [
										{
											"id": 542,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 545,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 182,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "BoolError",
														"id": 546,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 544,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 181,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 543,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 180,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												545,
												544,
												543
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 177,
											"character": 32
										}
									]
								},
								{
									"id": 550,
									"name": "BoolOutOfRangeErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 551,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 204,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BoolOutOfRangeError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												551
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 203,
											"character": 46
										}
									]
								},
								{
									"id": 570,
									"name": "BytesDynamicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a dynamic-length bytestring"
									},
									"typeParameter": [
										{
											"id": 571,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 574,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 259,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "BytesDynamicError",
														"id": 575,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 573,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 258,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 572,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 257,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												574,
												573,
												572
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 254,
											"character": 40
										}
									]
								},
								{
									"id": 566,
									"name": "BytesPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a static-length bytestring (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 567,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"children": [
										{
											"id": 569,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 246,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BytesPaddingError"
											}
										},
										{
											"id": 568,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 245,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												569,
												568
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 241,
											"character": 34
										}
									]
								},
								{
									"id": 559,
									"name": "BytesStaticErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a static-length bytestring"
									},
									"typeParameter": [
										{
											"id": 560,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 563,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 226,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "BytesStaticError",
														"id": 564,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 562,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 225,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 561,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 224,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 23,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												563,
												562,
												561
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 221,
											"character": 39
										}
									]
								},
								{
									"id": 636,
									"name": "ContractErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a contract"
									},
									"typeParameter": [
										{
											"id": 637,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 640,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 471,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "ContractError",
														"id": 641,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 639,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 470,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 638,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 469,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												640,
												639,
												638
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 466,
											"character": 36
										}
									]
								},
								{
									"id": 643,
									"name": "ContractPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for contract (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 644,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 646,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 495,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ContractPaddingError"
											}
										},
										{
											"id": 645,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 494,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												646,
												645
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 488,
											"character": 37
										}
									]
								},
								{
									"id": 722,
									"name": "DeployedFunctionInConstructorError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that this is a deployed-style pointer,\ndespite the fact that you're in a constructor"
									},
									"typeParameter": [
										{
											"id": 723,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 727,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 770,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 725,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 768,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 726,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 769,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 724,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 767,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "DeployedFunctionInConstructorError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												727,
												725,
												726,
												724
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 764,
											"character": 51
										}
									]
								},
								{
									"id": 617,
									"name": "EnumErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an enum"
									},
									"typeParameter": [
										{
											"id": 618,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 621,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 417,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "EnumError",
														"id": 622,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 620,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 416,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 619,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 415,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 175,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												621,
												620,
												619
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 412,
											"character": 32
										}
									]
								},
								{
									"id": 632,
									"name": "EnumNotFoundDecodingErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"typeParameter": [
										{
											"id": 633,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 634,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 457,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumNotFoundDecodingError"
											}
										},
										{
											"id": 635,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 458,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 175,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												634,
												635
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 454,
											"character": 45
										}
									]
								},
								{
									"id": 626,
									"name": "EnumOutOfRangeErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"typeParameter": [
										{
											"id": 627,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 628,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 441,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumOutOfRangeError"
											}
										},
										{
											"id": 629,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 442,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 175,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												628,
												629
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 438,
											"character": 39
										}
									]
								},
								{
									"id": 595,
									"name": "FixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a signed fixed-point number"
									},
									"typeParameter": [
										{
											"id": 596,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 599,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 340,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "FixedError",
														"id": 605,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 598,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 339,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 597,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 338,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												599,
												598,
												597
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 335,
											"character": 33
										}
									]
								},
								{
									"id": 607,
									"name": "FixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a signed fixed-point number (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 608,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 610,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 376,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FixedPaddingError"
											}
										},
										{
											"id": 609,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 375,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												610,
												609
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 369,
											"character": 34
										}
									]
								},
								{
									"id": 689,
									"name": "FunctionExternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an external function"
									},
									"typeParameter": [
										{
											"id": 690,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 693,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 649,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "FunctionExternalError",
														"id": 694,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 692,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 648,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 691,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 647,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 122,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												693,
												692,
												691
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 644,
											"character": 44
										}
									]
								},
								{
									"id": 696,
									"name": "FunctionExternalNonStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for an external function pointer located anywhere other than the stack."
									},
									"typeParameter": [
										{
											"id": 697,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 699,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 675,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalNonStackPaddingError"
											}
										},
										{
											"id": 698,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 674,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												699,
												698
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 668,
											"character": 53
										}
									]
								},
								{
									"id": 700,
									"name": "FunctionExternalStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for external function pointer located on the stack."
									},
									"typeParameter": [
										{
											"id": 701,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 704,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 694,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalStackPaddingError"
											}
										},
										{
											"id": 702,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (no checksum; also a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 689,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 703,
											"name": "rawSelector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (but a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 693,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												704,
												702,
												703
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 683,
											"character": 50
										}
									]
								},
								{
									"id": 705,
									"name": "FunctionInternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an internal function"
									},
									"typeParameter": [
										{
											"id": 706,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 709,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 711,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "FunctionInternalError",
														"id": 710,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 708,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 710,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 707,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 709,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 115,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												709,
												708,
												707
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 706,
											"character": 44
										}
									]
								},
								{
									"id": 712,
									"name": "FunctionInternalPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an internal function"
									},
									"typeParameter": [
										{
											"id": 713,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 715,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 739,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionInternalPaddingError"
											}
										},
										{
											"id": 714,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 738,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												715,
												714
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 732,
											"character": 45
										}
									]
								},
								{
									"id": 742,
									"name": "IndexedReferenceTypeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when decoding an indexed parameter of reference (or tuple) type.  These\ncan't meaningfully be decoded, so instead they decode to an error, sorry."
									},
									"typeParameter": [
										{
											"id": 743,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 744,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 845,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IndexedReferenceTypeError"
											}
										},
										{
											"id": 746,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 850,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 745,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 846,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Types.ReferenceType",
														"id": 224,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TupleType",
														"id": 170,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												744,
												746,
												745
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 842,
											"character": 42
										}
									]
								},
								{
									"id": 530,
									"name": "IntErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a signed integer"
									},
									"typeParameter": [
										{
											"id": 531,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 534,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 147,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "IntError",
														"id": 535,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 533,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 146,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 532,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 145,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												534,
												533,
												532
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 142,
											"character": 31
										}
									]
								},
								{
									"id": 537,
									"name": "IntPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a signed integer (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 538,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"children": [
										{
											"id": 540,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 169,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IntPaddingError"
											}
										},
										{
											"id": 539,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 168,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												540,
												539
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 164,
											"character": 32
										}
									]
								},
								{
									"id": 803,
									"name": "InternalFunctionInABIError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This should never come up, but just to be sure..."
									},
									"typeParameter": [
										{
											"id": 804,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 805,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1007,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "InternalFunctionInABIError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												805
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1004,
											"character": 43
										}
									]
								},
								{
									"id": 776,
									"name": "LengthIntegerFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 777,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 937,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 778,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 779,
															"name": "lengthAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 938,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																779
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 937,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 780,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 940,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 781,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 782,
															"name": "lengthAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 941,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																782
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 940,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												777,
												780
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 936,
											"character": 29
										}
									]
								},
								{
									"id": 675,
									"name": "MagicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a magic variable"
									},
									"typeParameter": [
										{
											"id": 676,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 679,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 600,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "MagicError",
														"id": 680,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 678,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 599,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 677,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 598,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 211,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												679,
												678,
												677
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 595,
											"character": 33
										}
									]
								},
								{
									"id": 728,
									"name": "MalformedInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when the deployed PC is zero but the constructor PC\nis nonzero"
									},
									"typeParameter": [
										{
											"id": 729,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 733,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 785,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 731,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 783,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 732,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 784,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 730,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 782,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "MalformedInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												733,
												731,
												732,
												730
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 779,
											"character": 47
										}
									]
								},
								{
									"id": 654,
									"name": "MappingErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a mapping"
									},
									"typeParameter": [
										{
											"id": 655,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 658,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 534,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "MappingError",
														"id": 659,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 657,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 533,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 656,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 532,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 107,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												658,
												657,
												656
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 529,
											"character": 35
										}
									]
								},
								{
									"id": 716,
									"name": "NoSuchInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that the function pointer being decoded\nfails to point to a valid function, and also is not one of the\ndefault values"
									},
									"typeParameter": [
										{
											"id": 717,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 721,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 755,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 719,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 753,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 720,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 754,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 718,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 752,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "NoSuchInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												721,
												719,
												720,
												718
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 749,
											"character": 44
										}
									]
								},
								{
									"id": 785,
									"name": "OverlargePointersNotImplementedErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 786,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 956,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlargePointersNotImplementedError"
											}
										},
										{
											"id": 787,
											"name": "pointerAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 957,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												786,
												787
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 955,
											"character": 56
										}
									]
								},
								{
									"id": 799,
									"name": "OverlongArrayOrStringStrictModeErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"typeParameter": [
										{
											"id": 800,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 802,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 996,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 801,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 995,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArrayOrStringStrictModeError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												802,
												801
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 992,
											"character": 56
										}
									]
								},
								{
									"id": 773,
									"name": "OverlongArraysAndStringsNotImplementedErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 775,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 933,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 774,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 932,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArraysAndStringsNotImplementedError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												775,
												774
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 931,
											"character": 63
										}
									]
								},
								{
									"id": 788,
									"name": "PointerIntegerFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 789,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 961,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 790,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 791,
															"name": "pointerAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 962,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																791
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 961,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 792,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 964,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 793,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 794,
															"name": "pointerAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 965,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																794
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 964,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												789,
												792
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 960,
											"character": 30
										}
									]
								},
								{
									"id": 552,
									"name": "RawIntegerFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 553,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 208,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 554,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 555,
															"name": "rawAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 209,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																555
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 208,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 556,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 211,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 557,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 558,
															"name": "rawAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 212,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																558
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 211,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												553,
												556
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 207,
											"character": 26
										}
									]
								},
								{
									"id": 761,
									"name": "ReadErrorBytes",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error in a byte-based location (memory, calldata, etc)"
									},
									"typeParameter": [
										{
											"id": 762,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 763,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 903,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorBytes"
											}
										},
										{
											"id": 766,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 906,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 764,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 904,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesLocation",
												"id": 760
											}
										},
										{
											"id": 765,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 905,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												763,
												766,
												764,
												765
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 900,
											"character": 31
										}
									]
								},
								{
									"id": 755,
									"name": "ReadErrorStack",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error on the stack"
									},
									"typeParameter": [
										{
											"id": 756,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 758,
											"name": "from",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 886,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 757,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 885,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStack"
											}
										},
										{
											"id": 759,
											"name": "to",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 887,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												758,
												757,
												759
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 882,
											"character": 31
										}
									]
								},
								{
									"id": 767,
									"name": "ReadErrorStorage",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error in storage"
									},
									"typeParameter": [
										{
											"id": 768,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 769,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 917,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStorage"
											}
										},
										{
											"id": 770,
											"name": "range",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 918,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Range",
												"id": 1538,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												769,
												770
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 914,
											"character": 33
										}
									]
								},
								{
									"id": 588,
									"name": "StringErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a string"
									},
									"typeParameter": [
										{
											"id": 589,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 592,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 318,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "StringError",
														"id": 593,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 591,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 317,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 590,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 316,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												592,
												591,
												590
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 313,
											"character": 34
										}
									]
								},
								{
									"id": 661,
									"name": "StructErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a struct"
									},
									"typeParameter": [
										{
											"id": 662,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 665,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 556,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "StructError",
														"id": 666,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 664,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 555,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 663,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 554,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 142,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												665,
												664,
												663
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 551,
											"character": 34
										}
									]
								},
								{
									"id": 668,
									"name": "TupleErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a tuple"
									},
									"typeParameter": [
										{
											"id": 669,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 672,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 578,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TupleError",
														"id": 673,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 671,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 577,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 670,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 576,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 170,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												672,
												671,
												670
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 573,
											"character": 33
										}
									]
								},
								{
									"id": 682,
									"name": "TypeErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a type"
									},
									"typeParameter": [
										{
											"id": 683,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 686,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 622,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TypeErrorUnion",
														"id": 687,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 685,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 621,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 684,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 620,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TypeType",
												"id": 219,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												686,
												685,
												684
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 617,
											"character": 32
										}
									]
								},
								{
									"id": 600,
									"name": "UfixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an unsigned fixed-point number"
									},
									"typeParameter": [
										{
											"id": 601,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 604,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 352,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "UfixedError",
														"id": 611,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 603,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 351,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 602,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 350,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 58,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												604,
												603,
												602
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 347,
											"character": 34
										}
									]
								},
								{
									"id": 613,
									"name": "UfixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an unsigned fixed-point number (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 614,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 616,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 400,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UfixedPaddingError"
											}
										},
										{
											"id": 615,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 399,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												616,
												615
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 393,
											"character": 35
										}
									]
								},
								{
									"id": 519,
									"name": "UintErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an unsigned integer"
									},
									"typeParameter": [
										{
											"id": 520,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 523,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 110,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 734,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "UintError",
														"id": 524,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 522,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 109,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 521,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 108,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												523,
												522,
												521
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 105,
											"character": 32
										}
									]
								},
								{
									"id": 526,
									"name": "UintPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an unsigned integer (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 527,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 529,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 134,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UintPaddingError"
											}
										},
										{
											"id": 528,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 133,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												529,
												528
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 127,
											"character": 33
										}
									]
								},
								{
									"id": 751,
									"name": "UnsupportedConstantError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error for an unsupported type of constant (this counts as a read error)"
									},
									"typeParameter": [
										{
											"id": 752,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 754,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 874,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										},
										{
											"id": 753,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 873,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UnsupportedConstantError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												754,
												753
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 870,
											"character": 41
										}
									]
								},
								{
									"id": 747,
									"name": "UserDefinedTypeNotFoundError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error for when can't find the definition info for a user-defined type"
									},
									"typeParameter": [
										{
											"id": 748,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 749,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 861,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UserDefinedTypeNotFoundError"
											}
										},
										{
											"id": 750,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 862,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.UserDefinedType",
												"id": 140,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												749,
												750
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 858,
											"character": 45
										}
									]
								},
								{
									"id": 582,
									"name": "AddressError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A address-specific error"
									},
									"typeParameter": [
										{
											"id": 583,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 289,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "AddressPaddingError",
										"id": 584,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 652,
									"name": "ArrayError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An arrray-specific error"
									},
									"typeParameter": [
										{
											"id": 653,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 520,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 738,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 546,
									"name": "BoolError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bool-specific error"
									},
									"typeParameter": [
										{
											"id": 547,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 190,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "BoolOutOfRangeError",
										"id": 548,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 548,
									"name": "BoolOutOfRangeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The bool is neither 0 nor 1"
									},
									"typeParameter": [
										{
											"id": 549,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 199,
											"character": 31
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "BoolOutOfRangeErrorBaseFields",
												"id": 550
											},
											{
												"type": "unknown",
												"name": "RawIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 575,
									"name": "BytesDynamicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A dynamic-bytestring-specific error"
									},
									"typeParameter": [
										{
											"id": 576,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 267,
											"character": 29
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 738,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 517,
									"name": "BytesErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a bytestring"
									},
									"typeParameter": [
										{
											"id": 518,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 96,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 559,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 570,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 760,
									"name": "BytesLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A byte-based location"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 893,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "memory"
											},
											{
												"type": "stringLiteral",
												"value": "calldata"
											},
											{
												"type": "stringLiteral",
												"value": "eventdata"
											},
											{
												"type": "stringLiteral",
												"value": "returndata"
											}
										]
									}
								},
								{
									"id": 564,
									"name": "BytesStaticError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A static-bytestring-specific error"
									},
									"typeParameter": [
										{
											"id": 565,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 234,
											"character": 28
										}
									],
									"type": {
										"type": "reference",
										"name": "BytesPaddingError",
										"id": 566,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											}
										]
									}
								},
								{
									"id": 641,
									"name": "ContractError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract-specific error"
									},
									"typeParameter": [
										{
											"id": 642,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 479,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractPaddingError",
										"id": 643,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 513,
									"name": "DecoderError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "One of the underlying errors contained in an [[ErrorResult]]"
									},
									"typeParameter": [
										{
											"id": 514,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 43,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "GenericError",
												"id": 734,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UintError",
												"id": 524,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntError",
												"id": 535,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolError",
												"id": 546,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesStaticError",
												"id": 564,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicError",
												"id": 575,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressError",
												"id": 582,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringError",
												"id": 593,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedError",
												"id": 605,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedError",
												"id": 611,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayError",
												"id": 652,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingError",
												"id": 659,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructError",
												"id": 666,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicError",
												"id": 680,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeErrorUnion",
												"id": 687,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleError",
												"id": 673,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumError",
												"id": 622,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractError",
												"id": 641,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalError",
												"id": 694,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalError",
												"id": 710,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "InternalUseError",
												"id": 795,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 738,
									"name": "DynamicDataImplementationError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error resulting from overlarge length or pointer values"
									},
									"typeParameter": [
										{
											"id": 739,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 820,
											"character": 42
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArraysAndStringsNotImplementedError",
												"id": 771,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "OverlargePointersNotImplementedError",
												"id": 783,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 515,
									"name": "ElementaryErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an elementary value"
									},
									"typeParameter": [
										{
											"id": 516,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 77,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 519,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 530,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 541,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesErrorResult",
												"id": 517,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 577,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 588,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 595,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 600,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 617,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 636,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 622,
									"name": "EnumError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum-specific error"
									},
									"typeParameter": [
										{
											"id": 623,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 425,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumOutOfRangeError",
												"id": 624,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumNotFoundDecodingError",
												"id": 630,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 630,
									"name": "EnumNotFoundDecodingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The enum type definition could not be located"
									},
									"typeParameter": [
										{
											"id": 631,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 450,
											"character": 37
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "EnumNotFoundDecodingErrorBaseFields",
												"id": 632,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "unknown",
												"name": "RawIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 624,
									"name": "EnumOutOfRangeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The enum is out of range"
									},
									"typeParameter": [
										{
											"id": 625,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 434,
											"character": 31
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "EnumOutOfRangeErrorBaseFields",
												"id": 626,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "unknown",
												"name": "RawIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 740,
									"name": "ErrorForThrowing",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error that may occur in a component other than the main\ncore of the decoder itself and thus may need to get thrown to it"
									},
									"typeParameter": [
										{
											"id": 741,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 832,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 747,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 736,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 511,
									"name": "ErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A result which is an error rather than a value"
									},
									"typeParameter": [
										{
											"id": 512,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 25,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryErrorResult",
												"id": 515,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 647,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 654,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 661,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 675,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeErrorResult",
												"id": 682,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 668,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 689,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 705,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 605,
									"name": "FixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A fixed-specific error"
									},
									"typeParameter": [
										{
											"id": 606,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 360,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "FixedPaddingError",
										"id": 607,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 694,
									"name": "FunctionExternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external-function specific error"
									},
									"typeParameter": [
										{
											"id": 695,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 657,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalNonStackPaddingError",
												"id": 696,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalStackPaddingError",
												"id": 700,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 710,
									"name": "FunctionInternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal-function specific error"
									},
									"typeParameter": [
										{
											"id": 711,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 719,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalPaddingError",
												"id": 712,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "NoSuchInternalFunctionError",
												"id": 716,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "DeployedFunctionInConstructorError",
												"id": 722,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MalformedInternalFunctionError",
												"id": 728,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 734,
									"name": "GenericError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type-non-specific error"
									},
									"typeParameter": [
										{
											"id": 735,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 797,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 747,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IndexedReferenceTypeError",
												"id": 742,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 736,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 535,
									"name": "IntError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An int-specific error"
									},
									"typeParameter": [
										{
											"id": 536,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 155,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"name": "IntPaddingError",
										"id": 537,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 795,
									"name": "InternalUseError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Internal-use error"
									},
									"typeParameter": [
										{
											"id": 796,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 978,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArrayOrStringStrictModeError",
												"id": 797,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "InternalFunctionInABIError",
												"id": 803,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 680,
									"name": "MagicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic-specific error (there are none)"
									},
									"typeParameter": [
										{
											"id": 681,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 608,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 659,
									"name": "MappingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping-specific error (there are none)"
									},
									"typeParameter": [
										{
											"id": 660,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 542,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 783,
									"name": "OverlargePointersNotImplementedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for dynamic type being represented by pointer bigger than a JS number"
									},
									"typeParameter": [
										{
											"id": 784,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 950,
											"character": 48
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlargePointersNotImplementedErrorBaseFields",
												"id": 785
											},
											{
												"type": "unknown",
												"name": "PointerIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 797,
									"name": "OverlongArrayOrStringStrictModeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for the stricter length check in strict mode"
									},
									"typeParameter": [
										{
											"id": 798,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 987,
											"character": 48
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArrayOrStringStrictModeErrorBaseFields",
												"id": 799
											},
											{
												"type": "unknown",
												"name": "LengthIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 771,
									"name": "OverlongArraysAndStringsNotImplementedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for array/string/bytestring having length bigger than a JS number"
									},
									"typeParameter": [
										{
											"id": 772,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 926,
											"character": 55
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArraysAndStringsNotImplementedErrorBaseFields",
												"id": 773
											},
											{
												"type": "unknown",
												"name": "LengthIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 736,
									"name": "ReadError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A read error"
									},
									"typeParameter": [
										{
											"id": 737,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 808,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UnsupportedConstantError",
												"id": 751,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadErrorStack",
												"id": 755,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadErrorBytes",
												"id": 761,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadErrorStorage",
												"id": 767,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 593,
									"name": "StringError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string-specific error"
									},
									"typeParameter": [
										{
											"id": 594,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 326,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 738,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 666,
									"name": "StructError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct-specific error"
									},
									"typeParameter": [
										{
											"id": 667,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 564,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 738,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 673,
									"name": "TupleError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple-specific error"
									},
									"typeParameter": [
										{
											"id": 674,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 586,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 738,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 687,
									"name": "TypeErrorUnion",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error specific to type values (there are none);\nthis isn't called TypeError because that's not legal"
									},
									"typeParameter": [
										{
											"id": 688,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 631,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 611,
									"name": "UfixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A ufixed-specific error"
									},
									"typeParameter": [
										{
											"id": 612,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 384,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "UfixedPaddingError",
										"id": 613,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 524,
									"name": "UintError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A uint-specific error"
									},
									"typeParameter": [
										{
											"id": 525,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 118,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "UintPaddingError",
										"id": 526,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 510,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:errors\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										577,
										584,
										647,
										541,
										550,
										570,
										566,
										559,
										636,
										643,
										722,
										617,
										632,
										626,
										595,
										607,
										689,
										696,
										700,
										705,
										712,
										742,
										530,
										537,
										803,
										776,
										675,
										728,
										654,
										716,
										785,
										799,
										773,
										788,
										552,
										761,
										755,
										767,
										588,
										661,
										668,
										682,
										600,
										613,
										519,
										526,
										751,
										747
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												577,
												584,
												541,
												570,
												566,
												559,
												595,
												607,
												530,
												537,
												588,
												600,
												613,
												519,
												526
											]
										},
										{
											"title": "Container types",
											"children": [
												647,
												654,
												661,
												668
											]
										},
										{
											"title": "Function types",
											"children": [
												722,
												689,
												696,
												700,
												705,
												712,
												728,
												716
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												675,
												682
											]
										},
										{
											"title": "Generic errors",
											"children": [
												742,
												761,
												755,
												767,
												751,
												747
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												803
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												636,
												643,
												617
											]
										},
										{
											"title": "Other",
											"children": [
												550,
												632,
												626,
												776,
												785,
												799,
												773,
												788,
												552
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										582,
										652,
										546,
										548,
										575,
										517,
										760,
										564,
										641,
										513,
										738,
										515,
										622,
										630,
										624,
										740,
										511,
										605,
										694,
										710,
										734,
										535,
										795,
										680,
										659,
										783,
										797,
										771,
										736,
										593,
										666,
										673,
										687,
										611,
										524
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												513,
												511
											]
										},
										{
											"title": "Elementary types",
											"children": [
												582,
												546,
												548,
												575,
												517,
												564,
												515,
												605,
												535,
												593,
												611,
												524
											]
										},
										{
											"title": "Container types",
											"children": [
												652,
												659,
												666,
												673
											]
										},
										{
											"title": "Function types",
											"children": [
												694,
												710
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												680,
												687
											]
										},
										{
											"title": "Generic errors",
											"children": [
												738,
												740,
												734,
												783,
												771,
												736
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												795,
												797
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												641,
												622,
												630,
												624
											]
										},
										{
											"title": "Other",
											"children": [
												760
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										510
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 17,
									"character": 9
								}
							]
						},
						{
							"id": 3,
							"name": "Types",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for type objects, and some\nfunctions for working with them."
							},
							"children": [
								{
									"id": 42,
									"name": "AddressTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address (with payability unspecified)"
									},
									"typeParameter": [
										{
											"id": 43,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 45,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 152,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 44,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 151,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										},
										{
											"id": 46,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 153,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												45,
												44,
												46
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 148,
											"character": 35
										}
									]
								},
								{
									"id": 37,
									"name": "AddressTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address (with payability specified)"
									},
									"typeParameter": [
										{
											"id": 38,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 40,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 139,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 41,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 140,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 39,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 138,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												40,
												41,
												39
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 135,
											"character": 36
										}
									]
								},
								{
									"id": 98,
									"name": "ArrayTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a dynamic-length array"
									},
									"typeParameter": [
										{
											"id": 99,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 102,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 246,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 101,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 245,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 103,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 247,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1042
											}
										},
										{
											"id": 100,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 244,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											}
										},
										{
											"id": 104,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 248,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												102,
												101,
												103,
												100,
												104
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 241,
											"character": 33
										}
									]
								},
								{
									"id": 76,
									"name": "ArrayTypeStaticLengthField",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 77,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 226,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 78,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 79,
															"name": "length",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/types.ts",
																	"line": 227,
																	"character": 10
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																79
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 226,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 80,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 229,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 81,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 82,
															"name": "lengthAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/types.ts",
																	"line": 230,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																82
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 229,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												77,
												80
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 225,
											"character": 43
										}
									]
								},
								{
									"id": 17,
									"name": "BoolType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a boolean"
									},
									"typeParameter": [
										{
											"id": 18,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 19,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 80,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bool"
											}
										},
										{
											"id": 20,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 81,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												19,
												20
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 77,
											"character": 25
										}
									]
								},
								{
									"id": 29,
									"name": "BytesTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a dynamic-length bytestring"
									},
									"typeParameter": [
										{
											"id": 30,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 32,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 116,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 33,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 117,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1042
											}
										},
										{
											"id": 31,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 115,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 34,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 118,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												32,
												33,
												31,
												34
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 112,
											"character": 33
										}
									]
								},
								{
									"id": 23,
									"name": "BytesTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a static-length bytestring"
									},
									"typeParameter": [
										{
											"id": 24,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 26,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 102,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											}
										},
										{
											"id": 27,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 103,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 25,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 101,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 28,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 104,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												26,
												27,
												25,
												28
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 98,
											"character": 32
										}
									]
								},
								{
									"id": 203,
									"name": "ContractTypeForeign",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract w/o full Solidity info -- not used for actual variables"
									},
									"typeParameter": [
										{
											"id": 204,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 208,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 558,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractKind",
												"id": 1045
											}
										},
										{
											"id": 206,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 556,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "foreign"
											}
										},
										{
											"id": 209,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 562,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 205,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 555,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 207,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 557,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												208,
												206,
												209,
												205,
												207
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 552,
											"character": 36
										}
									]
								},
								{
									"id": 195,
									"name": "ContractTypeNative",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract with full Solidity info -- may be used for actual variables"
									},
									"typeParameter": [
										{
											"id": 196,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 201,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 538,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractKind",
												"id": 1045
											}
										},
										{
											"id": 199,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 536,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 198,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 532,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "native"
											}
										},
										{
											"id": 202,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 542,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 197,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 531,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 200,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 537,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												201,
												199,
												198,
												202,
												197,
												200
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 528,
											"character": 35
										}
									]
								},
								{
									"id": 83,
									"name": "DefaultArrayTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 94,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 220,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "__type.baseType",
												"id": 73
											}
										},
										{
											"id": 93,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 219,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "__type.kind",
												"id": 72
											}
										},
										{
											"id": 97,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 227,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "__type.length",
												"id": 79
											}
										},
										{
											"id": 95,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 221,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1042
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "__type.location",
												"id": 74
											}
										},
										{
											"id": 92,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 218,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "__type.typeClass",
												"id": 71
											}
										},
										{
											"id": 96,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 222,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "__type.typeHint",
												"id": 75
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												94,
												93,
												97,
												95,
												92,
												96
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 234,
											"character": 39
										}
									],
									"extendedTypes": [
										{
											"type": "intersection",
											"types": [
												{
													"type": "reflection",
													"declaration": {
														"id": 84,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 87,
																"name": "baseType",
																"kind": 32,
																"kindString": "Variable",
																"flags": {},
																"sources": [
																	{
																		"fileName": "codec/lib/format/types.ts",
																		"line": 220,
																		"character": 10
																	}
																],
																"type": {
																	"type": "reference",
																	"name": "Type",
																	"id": 5,
																	"typeArguments": [
																		{
																			"type": "typeParameter",
																			"name": "C"
																		}
																	]
																}
															},
															{
																"id": 86,
																"name": "kind",
																"kind": 32,
																"kindString": "Variable",
																"flags": {},
																"sources": [
																	{
																		"fileName": "codec/lib/format/types.ts",
																		"line": 219,
																		"character": 6
																	}
																],
																"type": {
																	"type": "stringLiteral",
																	"value": "static"
																}
															},
															{
																"id": 88,
																"name": "location",
																"kind": 32,
																"kindString": "Variable",
																"flags": {
																	"isOptional": true
																},
																"sources": [
																	{
																		"fileName": "codec/lib/format/types.ts",
																		"line": 221,
																		"character": 10
																	}
																],
																"type": {
																	"type": "reference",
																	"name": "Location",
																	"id": 1042
																}
															},
															{
																"id": 85,
																"name": "typeClass",
																"kind": 32,
																"kindString": "Variable",
																"flags": {},
																"sources": [
																	{
																		"fileName": "codec/lib/format/types.ts",
																		"line": 218,
																		"character": 11
																	}
																],
																"type": {
																	"type": "stringLiteral",
																	"value": "array"
																}
															},
															{
																"id": 89,
																"name": "typeHint",
																"kind": 32,
																"kindString": "Variable",
																"flags": {
																	"isOptional": true
																},
																"sources": [
																	{
																		"fileName": "codec/lib/format/types.ts",
																		"line": 222,
																		"character": 10
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"groups": [
															{
																"title": "Variables",
																"kind": 32,
																"children": [
																	87,
																	86,
																	88,
																	85,
																	89
																]
															}
														]
													}
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 90,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 91,
																"name": "length",
																"kind": 32,
																"kindString": "Variable",
																"flags": {},
																"sources": [
																	{
																		"fileName": "codec/lib/format/types.ts",
																		"line": 227,
																		"character": 10
																	}
																],
																"type": {
																	"type": "reference",
																	"name": "BN"
																}
															}
														],
														"groups": [
															{
																"title": "Variables",
																"kind": 32,
																"children": [
																	91
																]
															}
														]
													}
												}
											]
										}
									]
								},
								{
									"id": 186,
									"name": "EnumTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Global enum"
									},
									"typeParameter": [
										{
											"id": 187,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 190,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 503,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 189,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 499,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 192,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 508,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 188,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 498,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 191,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 504,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												190,
												189,
												192,
												188,
												191
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 495,
											"character": 31
										}
									]
								},
								{
									"id": 177,
									"name": "EnumTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Local enum (defined in a contract)"
									},
									"typeParameter": [
										{
											"id": 178,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 184,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 483,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 183,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 482,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 181,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 480,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 180,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 476,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 185,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 487,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 179,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 475,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 182,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 481,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												184,
												183,
												181,
												180,
												185,
												179,
												182
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 472,
											"character": 30
										}
									]
								},
								{
									"id": 52,
									"name": "FixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a signed fixed-point number"
									},
									"typeParameter": [
										{
											"id": 53,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 55,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 178,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 56,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 179,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 54,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 177,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "fixed"
											}
										},
										{
											"id": 57,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 180,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												55,
												56,
												54,
												57
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 174,
											"character": 26
										}
									]
								},
								{
									"id": 132,
									"name": "FunctionExternalTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer (general ABI type)"
									},
									"typeParameter": [
										{
											"id": 133,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 136,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 345,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 134,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 343,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 137,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 347,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 135,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 344,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												136,
												134,
												137,
												135
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 340,
											"character": 44
										}
									]
								},
								{
									"id": 124,
									"name": "FunctionExternalTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer (full Solidity type)"
									},
									"typeParameter": [
										{
											"id": 125,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 130,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 330,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 128,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 328,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 129,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 329,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Mutability",
												"id": 1044
											}
										},
										{
											"id": 131,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 331,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 126,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 326,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 127,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 327,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												130,
												128,
												129,
												131,
												126,
												127
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 323,
											"character": 45
										}
									]
								},
								{
									"id": 115,
									"name": "FunctionInternalType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an internal function pointer"
									},
									"typeParameter": [
										{
											"id": 116,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 120,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 304,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 119,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 303,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Mutability",
												"id": 1044
											}
										},
										{
											"id": 121,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 305,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 117,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 301,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 118,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 302,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "internal"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												120,
												119,
												121,
												117,
												118
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 298,
											"character": 37
										}
									]
								},
								{
									"id": 12,
									"name": "IntType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a signed integer"
									},
									"typeParameter": [
										{
											"id": 13,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 15,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 68,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 14,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 67,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "int"
											}
										},
										{
											"id": 16,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 69,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												15,
												14,
												16
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 64,
											"character": 24
										}
									]
								},
								{
									"id": 211,
									"name": "MagicType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a magic variable"
									},
									"typeParameter": [
										{
											"id": 212,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 215,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 582,
													"character": 13
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 216,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 217,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 218,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Type",
																"id": 5,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C",
																		"constraint": {
																			"type": "reference",
																			"name": "FormatConfig",
																			"id": 807
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 582,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 213,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 577,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "magic"
											}
										},
										{
											"id": 214,
											"name": "variable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 578,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicVariableName",
												"id": 210
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												215,
												213,
												214
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 574,
											"character": 26
										}
									]
								},
								{
									"id": 107,
									"name": "MappingType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a mapping"
									},
									"typeParameter": [
										{
											"id": 108,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 110,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 279,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryType",
												"id": 105,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 112,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 281,
													"character": 10
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "storage"
											}
										},
										{
											"id": 109,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 278,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "mapping"
											}
										},
										{
											"id": 111,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 280,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												110,
												112,
												109,
												111
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 275,
											"character": 28
										}
									]
								},
								{
									"id": 144,
									"name": "NameTypePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 145,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 146,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 386,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 147,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 387,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												146,
												147
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 383,
											"character": 29
										}
									]
								},
								{
									"id": 166,
									"name": "OptionallyNamedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 167,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 168,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 439,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 169,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 440,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												168,
												169
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 436,
											"character": 36
										}
									]
								},
								{
									"id": 47,
									"name": "StringType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a string"
									},
									"typeParameter": [
										{
											"id": 48,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 50,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 165,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1042
											}
										},
										{
											"id": 49,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 164,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "string"
											}
										},
										{
											"id": 51,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 166,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												50,
												49,
												51
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 161,
											"character": 27
										}
									]
								},
								{
									"id": 158,
									"name": "StructTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Global structs"
									},
									"typeParameter": [
										{
											"id": 159,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 162,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 427,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 161,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 423,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 165,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 433,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1042
											}
										},
										{
											"id": 164,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 432,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 144,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 160,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 422,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 163,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 428,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												162,
												161,
												165,
												164,
												160,
												163
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 419,
											"character": 33
										}
									]
								},
								{
									"id": 148,
									"name": "StructTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Local structs (defined in contracts)"
									},
									"typeParameter": [
										{
											"id": 149,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 155,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 406,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 154,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 405,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 152,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 403,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 151,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 399,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 157,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 411,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1042
											}
										},
										{
											"id": 156,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 410,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 144,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 150,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 398,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 153,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 404,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												155,
												154,
												152,
												151,
												157,
												156,
												150,
												153
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 395,
											"character": 32
										}
									]
								},
								{
									"id": 170,
									"name": "TupleType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a tuple (for use in ABI)"
									},
									"typeParameter": [
										{
											"id": 171,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 173,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 452,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedType",
													"id": 166,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 172,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 451,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "tuple"
											}
										},
										{
											"id": 174,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 453,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												173,
												172,
												174
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 448,
											"character": 26
										}
									]
								},
								{
									"id": 219,
									"name": "TypeType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a type!  This is currently only used for contract types, but\nmay expand in the future."
									},
									"typeParameter": [
										{
											"id": 220,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 223,
											"name": "stateVariableTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order, and must only include\n**non-inherited** state variables"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 602,
													"character": 20
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 144,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										},
										{
											"id": 222,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 597,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 221,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 596,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												223,
												222,
												221
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 593,
											"character": 25
										}
									]
								},
								{
									"id": 226,
									"name": "TypesById",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 227,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 228,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "UserDefinedType",
												"id": 140
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 622,
											"character": 26
										}
									]
								},
								{
									"id": 58,
									"name": "UfixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an unsigned fixed-point number"
									},
									"typeParameter": [
										{
											"id": 59,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 61,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 192,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 62,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 193,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 60,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 191,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ufixed"
											}
										},
										{
											"id": 63,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 194,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												61,
												62,
												60,
												63
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 188,
											"character": 27
										}
									]
								},
								{
									"id": 7,
									"name": "UintType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an unsigned integer"
									},
									"typeParameter": [
										{
											"id": 8,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 10,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 55,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 9,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 54,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "uint"
											}
										},
										{
											"id": 11,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 56,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												10,
												9,
												11
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 51,
											"character": 25
										}
									]
								},
								{
									"id": 35,
									"name": "AddressType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address"
									},
									"typeParameter": [
										{
											"id": 36,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 126,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressTypeSpecific",
												"id": 37,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressTypeGeneral",
												"id": 42,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 64,
									"name": "ArrayType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an array"
									},
									"typeParameter": [
										{
											"id": 65,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 202,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayTypeStatic",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayTypeDynamic",
												"id": 98,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 66,
									"name": "ArrayTypeStatic",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a static-length array"
									},
									"typeParameter": [
										{
											"id": 67,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 211,
											"character": 27
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "ArrayTypeStaticBaseFields",
												"id": 68,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "unknown",
												"name": "ArrayTypeStaticLengthField[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 68,
									"name": "ArrayTypeStaticBaseFields",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 69,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 215,
											"character": 37
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 70,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 73,
													"name": "baseType",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 220,
															"character": 10
														}
													],
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig",
																	"id": 807
																}
															}
														]
													}
												},
												{
													"id": 72,
													"name": "kind",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 219,
															"character": 6
														}
													],
													"type": {
														"type": "stringLiteral",
														"value": "static"
													}
												},
												{
													"id": 74,
													"name": "location",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 221,
															"character": 10
														}
													],
													"type": {
														"type": "reference",
														"name": "Location",
														"id": 1042
													}
												},
												{
													"id": 71,
													"name": "typeClass",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 218,
															"character": 11
														}
													],
													"type": {
														"type": "stringLiteral",
														"value": "array"
													}
												},
												{
													"id": 75,
													"name": "typeHint",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 222,
															"character": 10
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														73,
														72,
														74,
														71,
														75
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 217,
													"character": 3
												}
											]
										}
									}
								},
								{
									"id": 21,
									"name": "BytesType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a bytestring (static or dynamic)"
									},
									"typeParameter": [
										{
											"id": 22,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 89,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 23,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 138,
									"name": "ContractDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Types defined inside contracts"
									},
									"typeParameter": [
										{
											"id": 139,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 355,
											"character": 31
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 148,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 193,
									"name": "ContractType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract; used not just for actual values but wherever a contract type\nis needed",
										"text": "Contract types may be native (has Solidity info) or foreign (lacking Solidity info).\n"
									},
									"typeParameter": [
										{
											"id": 194,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 519,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractTypeForeign",
												"id": 203,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 105,
									"name": "ElementaryType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an elementary value"
									},
									"typeParameter": [
										{
											"id": 106,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 256,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 21,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 58,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumType",
												"id": 175,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 175,
									"name": "EnumType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an enum",
										"text": "Enums may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"typeParameter": [
										{
											"id": 176,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 463,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 186,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 122,
									"name": "FunctionExternalType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer"
									},
									"typeParameter": [
										{
											"id": 123,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 314,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalTypeSpecific",
												"id": 124,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalTypeGeneral",
												"id": 132,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 113,
									"name": "FunctionType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a function pointer (internal or external)"
									},
									"typeParameter": [
										{
											"id": 114,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 289,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 115,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalType",
												"id": 122,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 210,
									"name": "MagicVariableName",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 567,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "message"
											},
											{
												"type": "stringLiteral",
												"value": "block"
											},
											{
												"type": "stringLiteral",
												"value": "transaction"
											}
										]
									}
								},
								{
									"id": 224,
									"name": "ReferenceType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Reference types"
									},
									"typeParameter": [
										{
											"id": 225,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 610,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 107,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 142,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 142,
									"name": "StructType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a struct",
										"text": "Structs may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"typeParameter": [
										{
											"id": 143,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 379,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 148,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 158,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 5,
									"name": "Type",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Object representing a type"
									},
									"typeParameter": [
										{
											"id": 6,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 27,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 21,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 58,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 107,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionType",
												"id": 113,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 142,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumType",
												"id": 175,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicType",
												"id": 211,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeType",
												"id": 219,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleType",
												"id": 170,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 140,
									"name": "UserDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "User-defined types"
									},
									"typeParameter": [
										{
											"id": 141,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 364,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractDefinedType",
												"id": 138,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 158,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 186,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 4,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:types\")"
								},
								{
									"id": 235,
									"name": "fullType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 236,
											"name": "fullType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 237,
													"name": "basicType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												},
												{
													"id": 238,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 644,
											"character": 24
										}
									]
								},
								{
									"id": 249,
									"name": "isContractDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 250,
											"name": "isContractDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 251,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 819,
											"character": 37
										}
									]
								},
								{
									"id": 232,
									"name": "isReferenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 233,
											"name": "isReferenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 234,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 631,
											"character": 31
										}
									]
								},
								{
									"id": 229,
									"name": "isUserDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 230,
											"name": "isUserDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 231,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 626,
											"character": 26
										}
									]
								},
								{
									"id": 239,
									"name": "specifyLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 240,
											"name": "specifyLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 241,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												},
												{
													"id": 242,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Location",
																"id": 1042
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 661,
											"character": 31
										}
									]
								},
								{
									"id": 243,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 244,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 245,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 706,
											"character": 26
										}
									]
								},
								{
									"id": 246,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 247,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 248,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 715,
											"character": 41
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										42,
										37,
										98,
										76,
										17,
										29,
										23,
										203,
										195,
										83,
										186,
										177,
										52,
										132,
										124,
										115,
										12,
										211,
										107,
										144,
										166,
										47,
										158,
										148,
										170,
										219,
										226,
										58,
										7
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												42,
												37,
												17,
												29,
												23,
												52,
												12,
												47,
												58,
												7
											]
										},
										{
											"title": "Container types",
											"children": [
												98,
												107,
												158,
												148,
												170
											]
										},
										{
											"title": "Function types",
											"children": [
												132,
												124,
												115
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												211,
												219
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												203,
												186,
												177
											]
										},
										{
											"title": "User-defined elemntary types",
											"children": [
												195
											]
										},
										{
											"title": "Other",
											"children": [
												76,
												83,
												144,
												166,
												226
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										35,
										64,
										66,
										68,
										21,
										138,
										193,
										105,
										175,
										122,
										113,
										210,
										224,
										142,
										5,
										140
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												138,
												105,
												224,
												5,
												140
											]
										},
										{
											"title": "Elementary types",
											"children": [
												35,
												21
											]
										},
										{
											"title": "Container types",
											"children": [
												64,
												66,
												142
											]
										},
										{
											"title": "Function types",
											"children": [
												122,
												113
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												193,
												175
											]
										},
										{
											"title": "Other",
											"children": [
												68,
												210
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										4
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										235,
										249,
										232,
										229,
										239,
										243,
										246
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 5,
									"character": 8
								}
							]
						},
						{
							"id": 816,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 892,
									"name": "Circularity",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 893,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "IDebugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:circularity\")"
										},
										{
											"id": 901,
											"name": "sever",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 902,
													"name": "sever",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 903,
															"name": "tied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 85,
													"character": 21
												}
											]
										},
										{
											"id": 894,
											"name": "tie",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 895,
													"name": "tie",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 896,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 6,
													"character": 19
												}
											]
										},
										{
											"id": 897,
											"name": "tieWithTable",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 898,
													"name": "tieWithTable",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 899,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366
															}
														},
														{
															"id": 900,
															"name": "seenSoFar",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "union",
																	"types": [
																		{
																			"type": "reference",
																			"name": "ArrayValue",
																			"id": 398,
																			"typeArguments": [
																				{
																					"type": "reference",
																					"name": "DefaultFormatConfig",
																					"id": 810
																				}
																			]
																		},
																		{
																			"type": "reference",
																			"name": "StructValue",
																			"id": 417,
																			"typeArguments": [
																				{
																					"type": "reference",
																					"name": "DefaultFormatConfig",
																					"id": 810
																				}
																			]
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 10,
													"character": 21
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												893
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												901,
												894,
												897
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 13,
											"character": 8
										}
									]
								},
								{
									"id": 817,
									"name": "Exception",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isProtected": true,
										"isExported": true
									},
									"comment": {},
									"children": [
										{
											"id": 818,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "IDebugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:exception\")"
										},
										{
											"id": 825,
											"name": "keyInfoForPrinting",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 826,
													"name": "keyInfoForPrinting",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 827,
															"name": "input",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.ElementaryValue",
																"id": 254
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 828,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 829,
																	"name": "type",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/exception.ts",
																			"line": 76,
																			"character": 9
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 830,
																	"name": "value",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/exception.ts",
																			"line": 76,
																			"character": 24
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		829,
																		830
																	]
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/exception.ts",
																	"line": 76,
																	"character": 2
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 74,
													"character": 27
												}
											]
										},
										{
											"id": 819,
											"name": "message",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 820,
													"name": "message",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 821,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Errors.ErrorForThrowing",
																"id": 740
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 11,
													"character": 23
												}
											]
										},
										{
											"id": 822,
											"name": "slotAddressPrintout",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 823,
													"name": "slotAddressPrintout",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 824,
															"name": "slot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Storage.Slot",
																"id": 1547
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 47,
													"character": 28
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												818
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												825,
												819,
												822
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 2,
											"character": 8
										}
									]
								},
								{
									"id": 831,
									"name": "Inspect",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 853,
											"name": "ContractInfoInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {},
											"children": [
												{
													"id": 855,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {},
													"signatures": [
														{
															"id": 856,
															"name": "new ContractInfoInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 857,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Format.Values.ContractValueInfo",
																		"id": 354
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "ContractInfoInspector",
																"id": 853
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 379,
															"character": 41
														}
													]
												},
												{
													"id": 854,
													"name": "value",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 379,
															"character": 7
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 354
													}
												},
												{
													"id": 858,
													"name": "__computed",
													"kind": 2048,
													"kindString": "Method",
													"flags": {},
													"signatures": [
														{
															"id": 859,
															"name": "__computed",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 860,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			},
																			{
																				"type": "intrinsic",
																				"name": "null"
																			}
																		]
																	}
																},
																{
																	"id": 861,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions",
																		"id": 833
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 383,
															"character": 23
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														855
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														854
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														858
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 378,
													"character": 27
												}
											]
										},
										{
											"id": 844,
											"name": "ResultInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "This class is meant to be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfunction.  Given a [[Format.Values.Result]] `value`, one can use\n`new ResultInspector(value)` to create a ResultInspector for that value,\nwhich can be used with util.inspect() to create a human-readable string\nrepresenting the value.",
												"tags": [
													{
														"tag": "example",
														"text": "\nSuppose `value` is a Result.  In Node, the following would print to the\nconsole a human-readable representation of `value`, with colors enabled,\nno maximum depth, and no maximum array length, and lines (usually) no\nlonger than 80 characters:\n```javascript\nconsole.log(\n  util.inspect(\n    new ResultInspector(value),\n    {\n      colors: true,\n      depth: null,\n      maxArrayLength: null,\n      breakLength: 80\n    }\n  )\n);\n```\nOf course, there are many other ways to use util.inspect; see Node's\ndocumentation, linked above, for more.\n"
													}
												]
											},
											"children": [
												{
													"id": 846,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 847,
															"name": "new ResultInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 848,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Format.Values.Result",
																		"id": 366
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "ResultInspector",
																"id": 844
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 31
														}
													]
												},
												{
													"id": 845,
													"name": "result",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												},
												{
													"id": 849,
													"name": "__computed",
													"kind": 2048,
													"kindString": "Method",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 850,
															"name": "__computed",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 851,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			},
																			{
																				"type": "intrinsic",
																				"name": "null"
																			}
																		]
																	}
																},
																{
																	"id": 852,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions",
																		"id": 833
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 60,
															"character": 23
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														846
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														845
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														849
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 55,
													"character": 28
												}
											]
										},
										{
											"id": 833,
											"name": "InspectOptions",
											"kind": 256,
											"kindString": "Interface",
											"flags": {},
											"children": [
												{
													"id": 840,
													"name": "breakLength",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 13,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 839,
													"name": "colors",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 12,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 834,
													"name": "stylize",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 11,
															"character": 9
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 835,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 836,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 837,
																			"name": "toMaybeColor",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 838,
																			"name": "style",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 11,
																	"character": 11
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														840,
														839,
														834
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 10,
													"character": 24
												}
											]
										},
										{
											"id": 832,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "IDebugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:inspect\")"
										},
										{
											"id": 841,
											"name": "cleanStylize",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 842,
													"name": "cleanStylize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 843,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 833
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 17,
													"character": 21
												}
											]
										},
										{
											"id": 873,
											"name": "enumFullName",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 874,
													"name": "enumFullName",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 875,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "EnumValue",
																"id": 335
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 415,
													"character": 21
												}
											]
										},
										{
											"id": 862,
											"name": "enumTypeName",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 863,
													"name": "enumTypeName",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 864,
															"name": "enumType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Types.EnumType",
																"id": 175
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 398,
													"character": 21
												}
											]
										},
										{
											"id": 869,
											"name": "formatCircular",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 870,
													"name": "formatCircular",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 871,
															"name": "loopLength",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 872,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 833
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 411,
													"character": 23
												}
											]
										},
										{
											"id": 885,
											"name": "nativize",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 886,
													"name": "nativize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you absolutely have\nto!  Using it in controlled tests is fine, but do NOT use it in real code if\nyou have any better option!",
														"text": "This function is a giant hack.  It will throw exceptions on numbers that\ndon't fit in a Javascript number.  It loses various information.  It was\nonly ever written to support our hacked-together watch expression system,\nand later repurposed to make testing easier.\n\nIf you are not doing something as horrible as evaluating user-inputted\nJavascript expressions meant to operate upon Solidity variables, then you\nprobably have a better option than using this in real code!\n\n(For instance, if you just want to nicely print individual values, without\nattempting to first operate on them via Javascript expressions, we have the\n[[ResultInspector]] class, which can be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nto do exactly that.)\n\nRemember, the decoder output format was made to be machine-readable.  It\nshouldn't be too hard for you to process.  If it comes to it, copy-paste\nthis code and dehackify it for your use case, which hopefully is more\nmanageable than the one that caused us to write this.\n"
													},
													"parameters": [
														{
															"id": 887,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 469,
													"character": 24
												}
											]
										},
										{
											"id": 876,
											"name": "nativizeVariables",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 877,
													"name": "nativizeVariables",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you\nabsolutely have to!  Using it in controlled tests is fine,\nbut do NOT use it in real code if you have any better option!\nSee [[nativize]] for why!"
													},
													"parameters": [
														{
															"id": 878,
															"name": "variables",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 879,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"indexSignature": [
																		{
																			"id": 880,
																			"name": "__index",
																			"kind": 8192,
																			"kindString": "Index signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 881,
																					"name": "name",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "Format.Values.Result",
																				"id": 366
																			}
																		}
																	],
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/inspect.ts",
																			"line": 432,
																			"character": 44
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 882,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 883,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 884,
																			"name": "name",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 434,
																	"character": 3
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 432,
													"character": 33
												}
											]
										},
										{
											"id": 888,
											"name": "nativizeWithTable",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 889,
													"name": "nativizeWithTable",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 890,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366
															}
														},
														{
															"id": 891,
															"name": "seenSoFar",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 473,
													"character": 26
												}
											]
										},
										{
											"id": 865,
											"name": "styleHexString",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 866,
													"name": "styleHexString",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 867,
															"name": "hex",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 868,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 833
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 405,
													"character": 23
												}
											]
										}
									],
									"groups": [
										{
											"title": "Classes",
											"kind": 128,
											"children": [
												853,
												844
											]
										},
										{
											"title": "Interfaces",
											"kind": 256,
											"children": [
												833
											]
										},
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												832
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												841,
												873,
												862,
												869,
												885,
												876,
												888,
												865
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 10,
											"character": 8
										}
									]
								},
								{
									"id": 904,
									"name": "Serial",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 905,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "IDebugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:serial\")"
										},
										{
											"id": 933,
											"name": "deserializeContractValueInfo",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 934,
													"name": "deserializeContractValueInfo",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 935,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.ContractValueInfo",
																"id": 354,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig",
																		"id": 813
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 354
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 903,
													"character": 37
												}
											]
										},
										{
											"id": 936,
											"name": "deserializeRange",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 937,
													"name": "deserializeRange",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 938,
															"name": "range",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Range",
																"id": 1538,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig",
																		"id": 813
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Range",
														"id": 1538
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 917,
													"character": 25
												}
											]
										},
										{
											"id": 924,
											"name": "deserializeResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 925,
													"name": "deserializeResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 926,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig",
																		"id": 813
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 485,
													"character": 33
												}
											]
										},
										{
											"id": 939,
											"name": "deserializeSlot",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 940,
													"name": "deserializeSlot",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 941,
															"name": "slot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Storage.Slot",
																"id": 1547,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig",
																		"id": 813
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1547
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 935,
													"character": 24
												}
											]
										},
										{
											"id": 930,
											"name": "deserializeToUntiedResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 931,
													"name": "deserializeToUntiedResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 932,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig",
																		"id": 813
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 606,
													"character": 34
												}
											]
										},
										{
											"id": 927,
											"name": "deserializeType",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 928,
													"name": "deserializeType",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 929,
															"name": "dataType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Types.Type",
																"id": 5,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig",
																		"id": 813
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 491,
													"character": 31
												}
											]
										},
										{
											"id": 915,
											"name": "serializeContractValueInfo",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 916,
													"name": "serializeContractValueInfo",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 917,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.ContractValueInfo",
																"id": 354
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 354,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig",
																"id": 813
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 436,
													"character": 35
												}
											]
										},
										{
											"id": 918,
											"name": "serializeRange",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 919,
													"name": "serializeRange",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 920,
															"name": "range",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Range",
																"id": 1538
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Range",
														"id": 1538,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig",
																"id": 813
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 452,
													"character": 23
												}
											]
										},
										{
											"id": 906,
											"name": "serializeResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 907,
													"name": "serializeResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 908,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig",
																"id": 813
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 14,
													"character": 31
												}
											]
										},
										{
											"id": 921,
											"name": "serializeSlot",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 922,
													"name": "serializeSlot",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 923,
															"name": "slot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Storage.Slot",
																"id": 1547
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1547,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig",
																"id": 813
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 470,
													"character": 22
												}
											]
										},
										{
											"id": 909,
											"name": "serializeType",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 910,
													"name": "serializeType",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 911,
															"name": "dataType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Types.Type",
																"id": 5
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig",
																"id": 813
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 20,
													"character": 29
												}
											]
										},
										{
											"id": 912,
											"name": "serializeUntiedResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 913,
													"name": "serializeUntiedResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 914,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 366
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig",
																"id": 813
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 137,
													"character": 30
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												905
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												933,
												936,
												924,
												939,
												930,
												927,
												915,
												918,
												906,
												921,
												909,
												912
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 16,
											"character": 8
										}
									]
								}
							],
							"groups": [
								{
									"title": "Modules",
									"kind": 2,
									"children": [
										892,
										817,
										831,
										904
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 23,
									"character": 9
								}
							]
						},
						{
							"id": 252,
							"name": "Values",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for value and result objects."
							},
							"children": [
								{
									"id": 296,
									"name": "AddressValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An address value"
									},
									"typeParameter": [
										{
											"id": 297,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 299,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 137,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 298,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 136,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 300,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 138,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 301,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 302,
															"name": "asAddress",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "has leading \"0x\" and is checksum-cased"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 142,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 303,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "just a hex string, so no checksum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 146,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																302,
																303
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 138,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												299,
												298,
												300
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 133,
											"character": 29
										}
									]
								},
								{
									"id": 398,
									"name": "ArrayValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An array value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 399,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 401,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 236,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 402,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 240,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 400,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 235,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 403,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 241,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Result",
													"id": 366,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												401,
												402,
												400,
												403
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 232,
											"character": 27
										}
									]
								},
								{
									"id": 274,
									"name": "BoolValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A boolean value"
									},
									"typeParameter": [
										{
											"id": 275,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 277,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 85,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 276,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 84,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 278,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 86,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 279,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 280,
															"name": "asBoolean",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 87,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																280
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 86,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												277,
												276,
												278
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 81,
											"character": 26
										}
									]
								},
								{
									"id": 289,
									"name": "BytesDynamicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (dynamic length)"
									},
									"typeParameter": [
										{
											"id": 290,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 292,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 119,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 291,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 118,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 293,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 120,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 294,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 295,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 124,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																295
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 120,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												292,
												291,
												293
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 115,
											"character": 34
										}
									]
								},
								{
									"id": 281,
									"name": "BytesStaticValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (static length)"
									},
									"typeParameter": [
										{
											"id": 282,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 284,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 100,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 283,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 99,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 23,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 285,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 101,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 286,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 287,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 105,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 288,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 106,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																287,
																288
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 101,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												284,
												283,
												285
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 96,
											"character": 33
										}
									]
								},
								{
									"id": 349,
									"name": "ContractValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract value; see [[ContractValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 350,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 352,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 271,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 351,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 270,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 353,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 272,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfo",
												"id": 354,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												352,
												351,
												353
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 267,
											"character": 30
										}
									]
								},
								{
									"id": 356,
									"name": "ContractValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can identify the class."
									},
									"typeParameter": [
										{
											"id": 357,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 359,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 298,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 361,
											"name": "class",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 303,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 358,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 293,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 360,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 302,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												359,
												361,
												358,
												360
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 290,
											"character": 39
										}
									]
								},
								{
									"id": 362,
									"name": "ContractValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can't identify the class."
									},
									"children": [
										{
											"id": 364,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 318,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 363,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 313,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 365,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 322,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												364,
												363,
												365
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 312,
											"character": 41
										}
									]
								},
								{
									"id": 321,
									"name": "DecimalValueInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 322,
											"name": "Big",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 207,
													"character": 5
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 323,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 324,
															"name": "asBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 208,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 325,
															"name": "rawAsBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 209,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																324,
																325
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 207,
															"character": 6
														}
													]
												}
											}
										},
										{
											"id": 326,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 211,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 327,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 328,
															"name": "asString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 212,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 329,
															"name": "rawAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 213,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																328,
																329
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 211,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												322,
												326
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 206,
											"character": 26
										}
									]
								},
								{
									"id": 335,
									"name": "EnumValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum value"
									},
									"typeParameter": [
										{
											"id": 336,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 338,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 239,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 337,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 238,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 175
											}
										},
										{
											"id": 339,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 240,
													"character": 7
												}
											],
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"name": "EnumValueBaseFields",
														"id": 340
													},
													{
														"type": "unknown",
														"name": "EnumValueNumericFields[C[\"integerType\"]]"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												338,
												337,
												339
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 235,
											"character": 26
										}
									]
								},
								{
									"id": 340,
									"name": "EnumValueBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 341,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 244,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												341
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 243,
											"character": 29
										}
									]
								},
								{
									"id": 342,
									"name": "EnumValueNumericFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 343,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 248,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 344,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 345,
															"name": "numericAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 252,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																345
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 248,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 346,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 254,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 347,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 348,
															"name": "numericAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 258,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																348
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 254,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												343,
												346
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 247,
											"character": 32
										}
									]
								},
								{
									"id": 316,
									"name": "FixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed fixed-point value"
									},
									"typeParameter": [
										{
											"id": 317,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 319,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 202,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 318,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 201,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 320,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 203,
													"character": 7
												}
											],
											"type": {
												"type": "unknown",
												"name": "DecimalValueInfo[C[\"decimalType\"]]"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												319,
												318,
												320
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 198,
											"character": 27
										}
									]
								},
								{
									"id": 457,
									"name": "FunctionExternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external function pointer value; see [[FunctionExternalValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 458,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 460,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 419,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 459,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 418,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 122,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 461,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 420,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionExternalValueInfo",
												"id": 462,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												460,
												459,
												461
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 415,
											"character": 38
										}
									]
								},
								{
									"id": 470,
									"name": "FunctionExternalValueInfoInvalid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can identify the class but can't locate the function."
									},
									"typeParameter": [
										{
											"id": 471,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 473,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 465,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 356,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 472,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 464,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "invalid"
											}
										},
										{
											"id": 474,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 469,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												473,
												472,
												474
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 461,
											"character": 49
										}
									]
								},
								{
									"id": 464,
									"name": "FunctionExternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used for a known function of a known class."
									},
									"typeParameter": [
										{
											"id": 465,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 469,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 452,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionAbiEntry",
												"id": 1346
											}
										},
										{
											"id": 467,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 447,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 356,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 466,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 446,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 468,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 451,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												469,
												467,
												466,
												468
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 443,
											"character": 47
										}
									]
								},
								{
									"id": 475,
									"name": "FunctionExternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can't even locate the class."
									},
									"children": [
										{
											"id": 477,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 479,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 362
											}
										},
										{
											"id": 476,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 478,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 478,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 483,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												477,
												476,
												478
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 477,
											"character": 49
										}
									]
								},
								{
									"id": 481,
									"name": "FunctionInternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal function pointer value; see [[FunctionInternalValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 482,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 484,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 508,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 483,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 507,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 115,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 485,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 509,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalValueInfo",
												"id": 486,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												484,
												483,
												485
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 504,
											"character": 38
										}
									]
								},
								{
									"id": 497,
									"name": "FunctionInternalValueInfoException",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A default value -- internal functions have two default values\ndepending on whether they live in storage or elsewhere.\nIn storage the default value is 0 for both program counters.\nElsewhere they're both nonzero."
									},
									"typeParameter": [
										{
											"id": 498,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 502,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 559,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 500,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 557,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 501,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 558,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 499,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 556,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "exception"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												502,
												500,
												501,
												499
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 553,
											"character": 51
										}
									]
								},
								{
									"id": 488,
									"name": "FunctionInternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionInternalValueInfo is used for an actual internal function."
									},
									"typeParameter": [
										{
											"id": 489,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 493,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 538,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 491,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 536,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 495,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 540,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 492,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 537,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 490,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 535,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 496,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 541,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Mutability"
											}
										},
										{
											"id": 494,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 539,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												493,
												491,
												495,
												492,
												490,
												496,
												494
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 532,
											"character": 47
										}
									]
								},
								{
									"id": 503,
									"name": "FunctionInternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type is used when decoding internal functions from the high-level\ndecoding interface, which presently doesn't support detailed decoding of\ninternal functions.  (The debugger, however, supports it!  You can get this\ndetailed information in the debugger!)  You'll still get the program counter\nvalues, but further information will be absent.  Note you'll get this even\nif really it should decode to an error, because the decoding interface\ndoesn't have the information to determine that it's an error."
									},
									"typeParameter": [
										{
											"id": 504,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 508,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 579,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 506,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 577,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 193,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 507,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 578,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 505,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 576,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												508,
												506,
												507,
												505
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 573,
											"character": 49
										}
									]
								},
								{
									"id": 265,
									"name": "IntValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed integer value"
									},
									"typeParameter": [
										{
											"id": 266,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 268,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 70,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 267,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 69,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 269,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 71,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "IntegerValueInfo",
												"id": 263,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												268,
												267,
												269
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 66,
											"character": 25
										}
									],
									"extendedBy": [
										{
											"type": "reference",
											"name": "IntValueDefault",
											"id": 270
										}
									]
								},
								{
									"id": 270,
									"name": "IntValueDefault",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 272,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 70,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "IntValue.kind",
												"id": 268
											}
										},
										{
											"id": 271,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 69,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "reference",
														"name": "DefaultFormatConfig",
														"id": 810
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "IntValue.type",
												"id": 267
											}
										},
										{
											"id": 273,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 71,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "IntegerValueInfo",
												"id": 263,
												"typeArguments": [
													{
														"type": "reference",
														"name": "DefaultFormatConfig",
														"id": 810
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "IntValue.value",
												"id": 269
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												272,
												271,
												273
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 74,
											"character": 32
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "IntValue",
											"id": 265,
											"typeArguments": [
												{
													"type": "reference",
													"name": "DefaultFormatConfig",
													"id": 810
												}
											]
										}
									]
								},
								{
									"id": 411,
									"name": "KeyValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 412,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 413,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 274,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryValue",
												"id": 254,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 414,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 275,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 366,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												413,
												414
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 271,
											"character": 29
										}
									]
								},
								{
									"id": 440,
									"name": "MagicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic variable's value (may contain errors?)"
									},
									"typeParameter": [
										{
											"id": 441,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 443,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 363,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 442,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 362,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 211,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 444,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 365,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 445,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 446,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 447,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Result",
																"id": 366,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C",
																		"constraint": {
																			"type": "reference",
																			"name": "FormatConfig",
																			"id": 807
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/values.ts",
															"line": 365,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												443,
												442,
												444
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 359,
											"character": 27
										}
									]
								},
								{
									"id": 406,
									"name": "MappingValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 407,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 409,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 262,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 408,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 261,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 107,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 410,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "order is irrelevant; also note keys must be values, not errors"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 268,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "KeyValuePair",
													"id": 411,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												409,
												408,
												410
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 258,
											"character": 29
										}
									]
								},
								{
									"id": 423,
									"name": "NameValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 424,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 425,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 312,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 426,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 313,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 366,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												425,
												426
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 309,
											"character": 30
										}
									]
								},
								{
									"id": 434,
									"name": "OptionallyNamedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 435,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 436,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 341,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 437,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 342,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 366,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												436,
												437
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 338,
											"character": 37
										}
									]
								},
								{
									"id": 304,
									"name": "StringValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string value; see [[StringValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 305,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 307,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 159,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 306,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 158,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 308,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 160,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "StringValueInfo",
												"id": 309
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												307,
												306,
												308
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 155,
											"character": 28
										}
									]
								},
								{
									"id": 313,
									"name": "StringValueInfoMalformed",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a malformed string."
									},
									"children": [
										{
											"id": 315,
											"name": "asHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex-formatted, with leading \"0x\""
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 190,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 314,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 186,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "malformed"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												315,
												314
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 185,
											"character": 41
										}
									]
								},
								{
									"id": 310,
									"name": "StringValueInfoValid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a valid UTF-8 string."
									},
									"children": [
										{
											"id": 312,
											"name": "asString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 177,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 311,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 176,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "valid"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												312,
												311
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 175,
											"character": 37
										}
									]
								},
								{
									"id": 417,
									"name": "StructValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 418,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 420,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 296,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 421,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 300,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 419,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 295,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 142,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 422,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!\nmoreover, any mappings *must* be included, even\nif this is a memory struct (such mappings will be empty)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 306,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameValuePair",
													"id": 423,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												420,
												421,
												419,
												422
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 292,
											"character": 28
										}
									]
								},
								{
									"id": 429,
									"name": "TupleValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 430,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 432,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 334,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 431,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 333,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 170,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 433,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 335,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedValue",
													"id": 434,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												432,
												431,
												433
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 330,
											"character": 27
										}
									]
								},
								{
									"id": 450,
									"name": "TypeValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type's value -- for now, we consider the value of a contract type to\nconsist of the values of its non-inherited state variables in the current\ncontext.  May contain errors."
									},
									"typeParameter": [
										{
											"id": 451,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 453,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 390,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 452,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 389,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TypeType",
												"id": 219,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 454,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 394,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameValuePair",
													"id": 423,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig",
																"id": 807
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												453,
												452,
												454
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 386,
											"character": 26
										}
									]
								},
								{
									"id": 330,
									"name": "UfixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned fixed-point value"
									},
									"typeParameter": [
										{
											"id": 331,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 333,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 226,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 332,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 225,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 58
											}
										},
										{
											"id": 334,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 227,
													"character": 7
												}
											],
											"type": {
												"type": "unknown",
												"name": "DecimalValueInfo[C[\"decimalType\"]]"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												333,
												332,
												334
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 222,
											"character": 28
										}
									]
								},
								{
									"id": 258,
									"name": "UintValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned integer value"
									},
									"typeParameter": [
										{
											"id": 259,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"children": [
										{
											"id": 261,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 45,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 260,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 44,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										},
										{
											"id": 262,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 46,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "IntegerValueInfo",
												"id": 263,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												261,
												260,
												262
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 41,
											"character": 26
										}
									]
								},
								{
									"id": 384,
									"name": "AddressResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An address value or error"
									},
									"typeParameter": [
										{
											"id": 385,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 161,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 296,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 577,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 396,
									"name": "ArrayResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An array value or error"
									},
									"typeParameter": [
										{
											"id": 397,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 223,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 398,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 647,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 378,
									"name": "BoolResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A boolean value or error"
									},
									"typeParameter": [
										{
											"id": 379,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 134,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 274,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 541,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 382,
									"name": "BytesDynamicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (dynamic-length)"
									},
									"typeParameter": [
										{
											"id": 383,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 152,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 570,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 372,
									"name": "BytesResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (static or dynamic)"
									},
									"typeParameter": [
										{
											"id": 373,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 107,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticResult",
												"id": 380,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicResult",
												"id": 382,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 380,
									"name": "BytesStaticResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (static-length)"
									},
									"typeParameter": [
										{
											"id": 381,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 143,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 281,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 559,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 256,
									"name": "BytesValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (static or dynamic)"
									},
									"typeParameter": [
										{
											"id": 257,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 32,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 281,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 394,
									"name": "ContractResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract value or error"
									},
									"typeParameter": [
										{
											"id": 395,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 210,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 349,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 636,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 354,
									"name": "ContractValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "There are two types -- one for contracts whose class we can identify, and one\nfor when we can't identify the class."
									},
									"typeParameter": [
										{
											"id": 355,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 281,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 356,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 362
											}
										]
									}
								},
								{
									"id": 370,
									"name": "ElementaryResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An elementary value or error"
									},
									"typeParameter": [
										{
											"id": 371,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 88,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintResult",
												"id": 374,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntResult",
												"id": 376,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolResult",
												"id": 378,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesResult",
												"id": 372,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressResult",
												"id": 384,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringResult",
												"id": 386,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedResult",
												"id": 388,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedResult",
												"id": 390,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumResult",
												"id": 392,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractResult",
												"id": 394,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 254,
									"name": "ElementaryValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An elementary value"
									},
									"typeParameter": [
										{
											"id": 255,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 13,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 258,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntValue",
												"id": 265,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 274,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesValue",
												"id": 256,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 296,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringValue",
												"id": 304,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 316,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 330,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 335,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 349,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 392,
									"name": "EnumResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum value or error"
									},
									"typeParameter": [
										{
											"id": 393,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 201,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 335,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 617,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 388,
									"name": "FixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed fixed-point value or error"
									},
									"typeParameter": [
										{
											"id": 389,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 179,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 316,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 595,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 455,
									"name": "FunctionExternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external function pointer value or error"
									},
									"typeParameter": [
										{
											"id": 456,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 406,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 457,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 689,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 462,
									"name": "FunctionExternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "External function values come in 3 types:\n1. known function of known class\n2. known class, but can't locate function\n3. can't determine class"
									},
									"typeParameter": [
										{
											"id": 463,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 431,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoKnown",
												"id": 464,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoInvalid",
												"id": 470,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoUnknown",
												"id": 475
											}
										]
									}
								},
								{
									"id": 479,
									"name": "FunctionInternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal function pointer value or error"
									},
									"typeParameter": [
										{
											"id": 480,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 495,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 481,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 705,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 486,
									"name": "FunctionInternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Internal functions come in three types:\n1. An actual function,\n2. A default value,\n3. A special value to indicate that decoding internal functions isn't supported in this context."
									},
									"typeParameter": [
										{
											"id": 487,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 520,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoKnown",
												"id": 488,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoException",
												"id": 497,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoUnknown",
												"id": 503,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 376,
									"name": "IntResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed integer value or error"
									},
									"typeParameter": [
										{
											"id": 377,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 125,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IntValue",
												"id": 265,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 530,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 263,
									"name": "IntegerValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 264,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 49,
											"character": 28
										}
									],
									"type": {
										"type": "unknown",
										"name": "{ BN: { asBN: BN; rawAsBN?: BN; }; string: { asString: string; rawAsString?: string; }; }[C[\"integerType\"]]"
									}
								},
								{
									"id": 438,
									"name": "MagicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic variable's value (or error)"
									},
									"typeParameter": [
										{
											"id": 439,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 350,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 440,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 675,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 404,
									"name": "MappingResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping value or error"
									},
									"typeParameter": [
										{
											"id": 405,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 249,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 406,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 654,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 366,
									"name": "Result",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This is the overall Result type.  It may encode an actual value or an error."
									},
									"typeParameter": [
										{
											"id": 367,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 47,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryResult",
												"id": 370,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayResult",
												"id": 396,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingResult",
												"id": 404,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructResult",
												"id": 415,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleResult",
												"id": 427,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicResult",
												"id": 438,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeResult",
												"id": 448,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalResult",
												"id": 455,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalResult",
												"id": 479,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 386,
									"name": "StringResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string value or error"
									},
									"typeParameter": [
										{
											"id": 387,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 170,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValue",
												"id": 304,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 588,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 309,
									"name": "StringValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "These come in two types: valid strings and malformed strings."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 168,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValueInfoValid",
												"id": 310
											},
											{
												"type": "reference",
												"name": "StringValueInfoMalformed",
												"id": 313
											}
										]
									}
								},
								{
									"id": 415,
									"name": "StructResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct value or error"
									},
									"typeParameter": [
										{
											"id": 416,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 283,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructValue",
												"id": 417,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 661,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 427,
									"name": "TupleResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple value or error"
									},
									"typeParameter": [
										{
											"id": 428,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 321,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 429,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 668,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 448,
									"name": "TypeResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type's value (or error)"
									},
									"typeParameter": [
										{
											"id": 449,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 375,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeValue",
												"id": 450,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeErrorResult",
												"id": 682,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 390,
									"name": "UfixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned fixed-point value or error"
									},
									"typeParameter": [
										{
											"id": 391,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 188,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 330,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 600,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 374,
									"name": "UintResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned integer value or error"
									},
									"typeParameter": [
										{
											"id": 375,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 116,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 258,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 519,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 368,
									"name": "Value",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An actual value, not an error (although if a container type it may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 369,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig",
												"id": 807
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 64,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryValue",
												"id": 254,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 398,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 406,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructValue",
												"id": 417,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 429,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 440,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeValue",
												"id": 450,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 457,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 481,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig",
															"id": 807
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 253,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:format:values\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										296,
										398,
										274,
										289,
										281,
										349,
										356,
										362,
										321,
										335,
										340,
										342,
										316,
										457,
										470,
										464,
										475,
										481,
										497,
										488,
										503,
										265,
										270,
										411,
										440,
										406,
										423,
										434,
										304,
										313,
										310,
										417,
										429,
										450,
										330,
										258
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												296,
												274,
												289,
												281,
												316,
												265,
												304,
												313,
												310,
												330,
												258
											]
										},
										{
											"title": "Container types",
											"children": [
												398,
												406,
												417,
												429
											]
										},
										{
											"title": "Function types",
											"children": [
												457,
												470,
												464,
												475,
												481,
												497,
												488,
												503
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												440,
												450
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												349,
												356,
												362,
												335
											]
										},
										{
											"title": "Other",
											"children": [
												321,
												340,
												342,
												270,
												411,
												423,
												434
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										384,
										396,
										378,
										382,
										372,
										380,
										256,
										394,
										354,
										370,
										254,
										392,
										388,
										455,
										462,
										479,
										486,
										376,
										263,
										438,
										404,
										366,
										386,
										309,
										415,
										427,
										448,
										390,
										374,
										368
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												370,
												254,
												366,
												368
											]
										},
										{
											"title": "Elementary types",
											"children": [
												384,
												378,
												382,
												372,
												380,
												256,
												388,
												376,
												386,
												309,
												390,
												374
											]
										},
										{
											"title": "Container types",
											"children": [
												396,
												404,
												415,
												427
											]
										},
										{
											"title": "Function types",
											"children": [
												455,
												462,
												479,
												486
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												438,
												448
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												394,
												354,
												392
											]
										},
										{
											"title": "Other",
											"children": [
												263
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										253
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 12,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								806,
								509,
								3,
								816,
								252
							],
							"categories": [
								{
									"title": "Main Format",
									"children": [
										509,
										3,
										252
									]
								},
								{
									"title": "Other",
									"children": [
										806,
										816
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 70,
							"character": 8
						}
					]
				},
				{
					"id": 1450,
					"name": "MappingKey",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For encoding mapping keys"
					},
					"children": [
						{
							"id": 1451,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1452,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:mapping-key:encode\")"
								},
								{
									"id": 1453,
									"name": "encodeMappingKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1454,
											"name": "encodeMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1455,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.ElementaryValue",
														"id": 254
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 17,
											"character": 32
										}
									]
								},
								{
									"id": 1456,
									"name": "mappingKeyAsHex",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1457,
											"name": "mappingKeyAsHex",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1458,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.ElementaryValue",
														"id": 254
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 35,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1452
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1453,
										1456
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1453,
												1456
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/mapping-key/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1451
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 327,
							"character": 8
						}
					]
				},
				{
					"id": 1459,
					"name": "Memory",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation and decoding of memory data"
					},
					"children": [
						{
							"id": 1460,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1465,
									"name": "MemoryAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1466,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 16,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "MemoryMemberAllocation",
													"id": 1467
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1466
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 15,
											"character": 33
										}
									]
								},
								{
									"id": 1462,
									"name": "MemoryAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1463,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1464,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocation",
												"id": 1465
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 11,
											"character": 34
										}
									]
								},
								{
									"id": 1467,
									"name": "MemoryMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1468,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1470,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 22,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryPointer",
												"id": 2073
											}
										},
										{
											"id": 1469,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 21,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1468,
												1470,
												1469
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 19,
											"character": 39
										}
									]
								},
								{
									"id": 1461,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:memory:allocate\")"
								},
								{
									"id": 1474,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1475,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1476,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 142
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocation",
												"id": 1465
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 28,
											"character": 23
										}
									]
								},
								{
									"id": 1471,
									"name": "getMemoryAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1472,
											"name": "getMemoryAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1473,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocations",
												"id": 1462
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 14,
											"character": 36
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1465,
										1462,
										1467
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1461
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1474,
										1471
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1477,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1478,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:memory:decode\")"
								},
								{
									"id": 1479,
									"name": "decodeMemory",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1480,
											"name": "decodeMemory",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1481,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1482,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "MemoryPointer",
														"id": 2073
													}
												},
												{
													"id": 1483,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1484,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 15,
											"character": 29
										}
									]
								},
								{
									"id": 1485,
									"name": "decodeMemoryReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1486,
											"name": "decodeMemoryReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1487,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 224
													}
												},
												{
													"id": 1488,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2064
													}
												},
												{
													"id": 1489,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1490,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 45,
											"character": 47
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1478
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1479,
										1485
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/index.ts",
									"line": 5,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1460,
								1477
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 334,
							"character": 13
						}
					]
				},
				{
					"id": 2063,
					"name": "Pointer",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2077,
							"name": "CalldataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2080,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 36,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2078,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 34,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "calldata"
									}
								},
								{
									"id": 2079,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 35,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2080,
										2078,
										2079
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 33,
									"character": 32
								}
							]
						},
						{
							"id": 2102,
							"name": "ConstantDefinitionPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2104,
									"name": "definition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 74,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 2103,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 73,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "definition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2104,
										2103
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 72,
									"character": 42
								}
							]
						},
						{
							"id": 2085,
							"name": "EventDataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2088,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 48,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2086,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 46,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "eventdata"
									}
								},
								{
									"id": 2087,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 47,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2088,
										2086,
										2087
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 45,
									"character": 33
								}
							]
						},
						{
							"id": 2089,
							"name": "EventTopicPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2090,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 52,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "eventtopic"
									}
								},
								{
									"id": 2091,
									"name": "topic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 53,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2090,
										2091
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 51,
									"character": 34
								}
							]
						},
						{
							"id": 2092,
							"name": "GenericAbiPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2095,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 59,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2093,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 57,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "abi"
									}
								},
								{
									"id": 2094,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 58,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2095,
										2093,
										2094
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 56,
									"character": 34
								}
							]
						},
						{
							"id": 2073,
							"name": "MemoryPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2076,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 30,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2074,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 28,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "memory"
									}
								},
								{
									"id": 2075,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 29,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2076,
										2074,
										2075
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 27,
									"character": 30
								}
							]
						},
						{
							"id": 2081,
							"name": "ReturndataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2084,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 42,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2082,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 40,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "returndata"
									}
								},
								{
									"id": 2083,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 41,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2084,
										2082,
										2083
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 39,
									"character": 34
								}
							]
						},
						{
							"id": 2105,
							"name": "SpecialPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2106,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 78,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "special"
									}
								},
								{
									"id": 2107,
									"name": "special",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 79,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2106,
										2107
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 77,
									"character": 31
								}
							]
						},
						{
							"id": 2099,
							"name": "StackLiteralPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2101,
									"name": "literal",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 69,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2100,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 68,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "stackliteral"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2101,
										2100
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 67,
									"character": 36
								}
							]
						},
						{
							"id": 2069,
							"name": "StackPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2071,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 23,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2070,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 22,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "stack"
									}
								},
								{
									"id": 2072,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 24,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2071,
										2070,
										2072
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 21,
									"character": 29
								}
							]
						},
						{
							"id": 2096,
							"name": "StoragePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2097,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 63,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "storage"
									}
								},
								{
									"id": 2098,
									"name": "range",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 64,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 1538
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2097,
										2098
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 62,
									"character": 31
								}
							]
						},
						{
							"id": 2067,
							"name": "AbiDataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 15,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CalldataPointer",
										"id": 2077
									},
									{
										"type": "reference",
										"name": "ReturndataPointer",
										"id": 2081
									},
									{
										"type": "reference",
										"name": "EventDataPointer",
										"id": 2085
									}
								]
							}
						},
						{
							"id": 2066,
							"name": "AbiPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 14,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 2067
									},
									{
										"type": "reference",
										"name": "GenericAbiPointer",
										"id": 2092
									}
								]
							}
						},
						{
							"id": 2068,
							"name": "BytesPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 19,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "MemoryPointer",
										"id": 2073
									},
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 2067
									}
								]
							}
						},
						{
							"id": 2064,
							"name": "DataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 4,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "StackFormPointer",
										"id": 2065
									},
									{
										"type": "reference",
										"name": "MemoryPointer",
										"id": 2073
									},
									{
										"type": "reference",
										"name": "StoragePointer",
										"id": 2096
									},
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 2067
									},
									{
										"type": "reference",
										"name": "ConstantDefinitionPointer",
										"id": 2102
									},
									{
										"type": "reference",
										"name": "SpecialPointer",
										"id": 2105
									},
									{
										"type": "reference",
										"name": "EventTopicPointer",
										"id": 2089
									}
								]
							}
						},
						{
							"id": 2065,
							"name": "StackFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 13,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "StackPointer",
										"id": 2069
									},
									{
										"type": "reference",
										"name": "StackLiteralPointer",
										"id": 2099
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2077,
								2102,
								2085,
								2089,
								2092,
								2073,
								2081,
								2105,
								2099,
								2069,
								2096
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2067,
								2066,
								2068,
								2064,
								2065
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 384,
							"character": 8
						}
					]
				},
				{
					"id": 1491,
					"name": "Special",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of special/magic variables"
					},
					"children": [
						{
							"id": 1492,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1493,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:special:decode\")"
								},
								{
									"id": 1499,
									"name": "decodeMagic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1500,
											"name": "decodeMagic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1501,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "MagicType",
														"id": 211
													}
												},
												{
													"id": 1502,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 2105
													}
												},
												{
													"id": 1503,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.MagicResult",
														"id": 438
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 24,
											"character": 28
										}
									]
								},
								{
									"id": 1494,
									"name": "decodeSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1495,
											"name": "decodeSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1496,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1497,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 2105
													}
												},
												{
													"id": 1498,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 12,
											"character": 30
										}
									]
								},
								{
									"id": 1507,
									"name": "externalAddressType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1508,
											"name": "externalAddressType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1509,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1919
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.AddressType",
												"id": 35
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 146,
											"character": 28
										}
									]
								},
								{
									"id": 1504,
									"name": "senderType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1505,
											"name": "senderType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1506,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1919
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.AddressType",
												"id": 35
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 128,
											"character": 19
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1493
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1499,
										1494,
										1507,
										1504
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1510,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1511,
									"name": "readSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1512,
											"name": "readSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1513,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 2105
													}
												},
												{
													"id": 1514,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2109
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/read/index.ts",
											"line": 4,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1511
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1492,
								1510
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 340,
							"character": 9
						}
					]
				},
				{
					"id": 1515,
					"name": "Stack",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding stack variables"
					},
					"children": [
						{
							"id": 1516,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1517,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:stack:decode\")"
								},
								{
									"id": 1523,
									"name": "decodeLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1524,
											"name": "decodeLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1525,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1526,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackLiteralPointer",
														"id": 2099
													}
												},
												{
													"id": 1527,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 40,
											"character": 30
										}
									]
								},
								{
									"id": 1518,
									"name": "decodeStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1519,
											"name": "decodeStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1520,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1521,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackPointer",
														"id": 2069
													}
												},
												{
													"id": 1522,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 17,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1517
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1523,
										1518
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1528,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1529,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:stack:read\")"
								},
								{
									"id": 1530,
									"name": "readStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1531,
											"name": "readStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1532,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackPointer",
														"id": 2069
													}
												},
												{
													"id": 1533,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2109
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 8,
											"character": 25
										}
									]
								},
								{
									"id": 1534,
									"name": "readStackLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1535,
											"name": "readStackLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1536,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackLiteralPointer",
														"id": 2099
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 35,
											"character": 32
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1529
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1530,
										1534
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1516,
								1528
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 347,
							"character": 10
						}
					]
				},
				{
					"id": 1537,
					"name": "Storage",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation and decoding of storage variables"
					},
					"children": [
						{
							"id": 1569,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1594,
									"name": "UnknownBaseContractIdError",
									"kind": 128,
									"kindString": "Class",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1599,
											"name": "constructor",
											"kind": 512,
											"kindString": "Constructor",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1600,
													"name": "new UnknownBaseContractIdError",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"parameters": [
														{
															"id": 1601,
															"name": "derivedId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1602,
															"name": "derivedName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1603,
															"name": "derivedKind",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1604,
															"name": "baseId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "UnknownBaseContractIdError",
														"id": 1594
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 37,
													"character": 24
												}
											]
										},
										{
											"id": 1598,
											"name": "baseId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 37,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1595,
											"name": "derivedId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 34,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1597,
											"name": "derivedKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 36,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1596,
											"name": "derivedName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 35,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1606,
											"name": "message",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 974,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.message"
											}
										},
										{
											"id": 1605,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 973,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.name"
											}
										},
										{
											"id": 1607,
											"name": "stack",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 975,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"overwrites": {
												"type": "reference",
												"name": "Error.stack"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.stack"
											}
										},
										{
											"id": 1608,
											"name": "Error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isStatic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 984,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorConstructor"
											}
										}
									],
									"groups": [
										{
											"title": "Constructors",
											"kind": 512,
											"children": [
												1599
											]
										},
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1598,
												1595,
												1597,
												1596,
												1606,
												1605,
												1607,
												1608
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 33,
											"character": 39
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "Error"
										}
									]
								},
								{
									"id": 1612,
									"name": "DefinitionPair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1614,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 61,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										},
										{
											"id": 1613,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 60,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1614,
												1613
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 59,
											"character": 24
										}
									]
								},
								{
									"id": 1581,
									"name": "StateAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1582,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 35,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StateVariableAllocation",
													"id": 1589
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1582
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 34,
											"character": 32
										}
									]
								},
								{
									"id": 1583,
									"name": "StateAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1584,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1585,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1586,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 1587,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1588,
																	"name": "id",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "StateAllocation",
																"id": 1581
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/storage/allocate/types.ts",
															"line": 27,
															"character": 26
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 26,
											"character": 33
										}
									]
								},
								{
									"id": 1589,
									"name": "StateVariableAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1592,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 42,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1591,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 41,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										},
										{
											"id": 1590,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 40,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1705
											}
										},
										{
											"id": 1593,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 43,
													"character": 9
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "StoragePointer",
														"id": 2096
													},
													{
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 2102
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1592,
												1591,
												1590,
												1593
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 39,
											"character": 40
										}
									]
								},
								{
									"id": 1571,
									"name": "StorageAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1573,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 14,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StorageMemberAllocation",
													"id": 1577
												}
											}
										},
										{
											"id": 1572,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 13,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1549
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1573,
												1572
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 12,
											"character": 34
										}
									]
								},
								{
									"id": 1609,
									"name": "StorageAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1611,
											"name": "allocations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 56,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1574
											}
										},
										{
											"id": 1610,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 55,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1549
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1611,
												1610
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 54,
											"character": 31
										}
									]
								},
								{
									"id": 1574,
									"name": "StorageAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1575,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1576,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocation",
												"id": 1571
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 7,
											"character": 35
										}
									]
								},
								{
									"id": 1577,
									"name": "StorageMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1578,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 19,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1580,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "StoragePointer",
												"id": 2096
											}
										},
										{
											"id": 1579,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1578,
												1580,
												1579
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 18,
											"character": 40
										}
									]
								},
								{
									"id": 1570,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:allocate\")"
								},
								{
									"id": 1642,
									"name": "allocateContractState",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1643,
											"name": "allocateContractState",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1644,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												},
												{
													"id": 1645,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1646,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 1919
													}
												},
												{
													"id": 1647,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												},
												{
													"id": 1648,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1649,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1574
													}
												},
												{
													"id": 1650,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StateAllocations",
														"id": 1583
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "StateAllocations",
												"id": 1583
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 267,
											"character": 30
										}
									]
								},
								{
									"id": 1633,
									"name": "allocateMembers",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1634,
											"name": "allocateMembers",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1635,
													"name": "parentId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1636,
													"name": "members",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "NameTypePair",
															"id": 144
														}
													}
												},
												{
													"id": 1637,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1638,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1574
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1574
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 137,
											"character": 24
										}
									]
								},
								{
									"id": 1628,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1629,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1630,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 142
													}
												},
												{
													"id": 1631,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1632,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1574
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1574
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 122,
											"character": 23
										}
									]
								},
								{
									"id": 1618,
									"name": "getStateAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1619,
											"name": "getStateAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This function gets allocations for the state variables of the contracts;\nthis is distinct from getStorageAllocations, which gets allocations for\nstorage structs.",
												"text": "While mostly state variables are kept in storage, constant ones are not.\nAnd immutable ones, once those are introduced, will be kept in code!\n(But those don't exist yet so this function doesn't handle them yet.)\n"
											},
											"parameters": [
												{
													"id": 1620,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 1158
														}
													}
												},
												{
													"id": 1621,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1622,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1623,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1624,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1749
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/storage/allocate/index.ts",
																	"line": 97,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1625,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1626,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1574
													}
												},
												{
													"id": 1627,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StateAllocations",
														"id": 1583
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "StateAllocations",
												"id": 1583
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 95,
											"character": 35
										}
									]
								},
								{
									"id": 1639,
									"name": "getStateVariables",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1640,
											"name": "getStateVariables",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1641,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1705
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "AstNode",
													"id": 1705
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 259,
											"character": 26
										}
									]
								},
								{
									"id": 1615,
									"name": "getStorageAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1616,
											"name": "getStorageAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1617,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1574
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 66,
											"character": 37
										}
									]
								},
								{
									"id": 1651,
									"name": "storageSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1652,
											"name": "storageSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1653,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1654,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1655,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1574
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1549
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 383,
											"character": 27
										}
									]
								},
								{
									"id": 1656,
									"name": "storageSizeAndAllocate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1657,
											"name": "storageSizeAndAllocate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1658,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1659,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												},
												{
													"id": 1660,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1574
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocationInfo",
												"id": 1609
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 391,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Classes",
									"kind": 128,
									"children": [
										1594
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1612,
										1581,
										1583,
										1589,
										1571,
										1609,
										1574,
										1577
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1570
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1642,
										1633,
										1628,
										1618,
										1639,
										1615,
										1651,
										1656
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1661,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1662,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:decode\")"
								},
								{
									"id": 1663,
									"name": "decodeStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1664,
											"name": "decodeStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1665,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1666,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 2096
													}
												},
												{
													"id": 1667,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 18,
											"character": 30
										}
									]
								},
								{
									"id": 1673,
									"name": "decodeStorageReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1674,
											"name": "decodeStorageReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1675,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 224
													}
												},
												{
													"id": 1676,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 2096
													}
												},
												{
													"id": 1677,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 90,
											"character": 39
										}
									]
								},
								{
									"id": 1668,
									"name": "decodeStorageReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1669,
											"name": "decodeStorageReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1670,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 224
													}
												},
												{
													"id": 1671,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2064
													}
												},
												{
													"id": 1672,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 33,
											"character": 48
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1662
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1663,
										1673,
										1668
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1678,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1679,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:read\")"
								},
								{
									"id": 1680,
									"name": "readSlot",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1681,
											"name": "readSlot",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1682,
													"name": "storage",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "WordMapping",
														"id": 2121
													}
												},
												{
													"id": 1683,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1547
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 13,
											"character": 25
										}
									]
								},
								{
									"id": 1684,
									"name": "readStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1685,
											"name": "readStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1686,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 2096
													}
												},
												{
													"id": 1687,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2109
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 37,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1679
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1680,
										1684
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 1554,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1555,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:storage:utils\")"
								},
								{
									"id": 1565,
									"name": "equalSlots",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1566,
											"name": "equalSlots",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1567,
													"name": "slot1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Slot",
																"id": 1547
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1568,
													"name": "slot2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Slot",
																"id": 1547
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 50,
											"character": 26
										}
									]
								},
								{
									"id": 1556,
									"name": "isWordsLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1557,
											"name": "isWordsLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1558,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageLength",
														"id": 1549
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 9,
											"character": 29
										}
									]
								},
								{
									"id": 1562,
									"name": "slotAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1563,
											"name": "slotAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert a slot to a word corresponding to actual storage address",
												"text": "if `slot` is an array, return hash of array values.\nif `slot` array is nested, recurse on sub-arrays\n"
											},
											"parameters": [
												{
													"id": 1564,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "number or possibly-nested array of numbers\n"
													},
													"type": {
														"type": "reference",
														"name": "Slot",
														"id": 1547
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 30,
											"character": 27
										}
									]
								},
								{
									"id": 1559,
									"name": "storageLengthToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1560,
											"name": "storageLengthToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1561,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageLength",
														"id": 1549
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 13,
											"character": 36
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1555
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1565,
										1556,
										1562,
										1559
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1538,
							"name": "Range",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 1539,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FormatConfig",
										"id": 807
									}
								}
							],
							"children": [
								{
									"id": 1540,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 8,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "StoragePosition",
										"id": 1543,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								},
								{
									"id": 1542,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 10,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1541,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 9,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "StoragePosition",
										"id": 1543,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1540,
										1542,
										1541
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 5,
									"character": 22
								}
							]
						},
						{
							"id": 1543,
							"name": "StoragePosition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 1544,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FormatConfig",
										"id": 807
									}
								}
							],
							"children": [
								{
									"id": 1546,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 17,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1545,
									"name": "slot",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 16,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Slot",
										"id": 1547,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1546,
										1545
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 13,
									"character": 32
								}
							]
						},
						{
							"id": 1547,
							"name": "Slot",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 1548,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FormatConfig",
										"id": 807
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 20,
									"character": 16
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "SlotBaseFields",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig",
													"id": 807
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "SlotOffsetFields[C[\"integerType\"]]"
									}
								]
							}
						},
						{
							"id": 1549,
							"name": "StorageLength",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 6,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1550,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1551,
													"name": "bytes",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 6,
															"character": 35
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1551
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 6,
													"character": 27
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1552,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1553,
													"name": "words",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 6,
															"character": 55
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1553
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 6,
													"character": 47
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1569,
								1661,
								1678,
								1554
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1538,
								1543
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1547,
								1549
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 353,
							"character": 8
						}
					]
				},
				{
					"id": 1431,
					"name": "Topic",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of event topics"
					},
					"children": [
						{
							"id": 1432,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1433,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:topic:decode\")"
								},
								{
									"id": 1434,
									"name": "decodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1435,
											"name": "decodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1436,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1437,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventTopicPointer",
														"id": 2089
													}
												},
												{
													"id": 1438,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2124
													}
												},
												{
													"id": 1439,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1035
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 12,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1433
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1434
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1440,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1441,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "IDebugger"
									},
									"defaultValue": " debugModule(\"codec:topic:encode\")"
								},
								{
									"id": 1442,
									"name": "encodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1443,
											"name": "encodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes for event topics (indexed parameters).\nWarning: This function is not fully implemented yet!"
											},
											"parameters": [
												{
													"id": 1444,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 14,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1441
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1442
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1442
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1445,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1446,
									"name": "readTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1447,
											"name": "readTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1448,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventTopicPointer",
														"id": 2089
													}
												},
												{
													"id": 1449,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2109
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/read/index.ts",
											"line": 4,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1446
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 18,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1432,
								1440,
								1445
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 309,
							"character": 10
						}
					]
				},
				{
					"id": 1046,
					"name": "UnknownUserDefinedTypeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the decoder was unable to locate a user-defined\ntype (struct, enum, or contract type) via its ID.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in\nthe future with Truffle DB.  In the meantime, it is at least worth noting that\nyou should not encounter this error if your entire project was written in\nSolidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 1049,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1050,
									"name": "new UnknownUserDefinedTypeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1051,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1052,
											"name": "typeString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "UnknownUserDefinedTypeError",
										"id": 1046
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 30,
									"character": 20
								}
							]
						},
						{
							"id": 1048,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 30,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1054,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 1053,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 1055,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 1047,
							"name": "typeString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 29,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1056,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1049
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1048,
								1054,
								1053,
								1055,
								1047,
								1056
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 28,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 1031,
					"name": "AbiArgument",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoded argument passed to a transaction or event,\nor returned from a call."
					},
					"children": [
						{
							"id": 1033,
							"name": "indexed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether this is an indexed paramter.  Only included for event parameters."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 458,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1032,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the parameter.  Excluded if the parameter is nameless."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 454,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1034,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the argument.  Note that this is a [[Format.Values.Result|Format.Values.Result]], so it\nmay contain errors (although event decodings should typically not contain errors;\nsee the [[DecodedLog]] documentation for why)."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 464,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Values.Result",
								"id": 366
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1033,
								1032,
								1034
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 450,
							"character": 28
						}
					]
				},
				{
					"id": 1024,
					"name": "AnonymousDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as an anonymous event."
					},
					"children": [
						{
							"id": 1029,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 271,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventAbiEntry",
								"id": 1367
							}
						},
						{
							"id": 1028,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 266,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1031
								}
							}
						},
						{
							"id": 1026,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 257,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 1030,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 276,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 985
							}
						},
						{
							"id": 1027,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 262,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 1025,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an AnonymousDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 250,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "anonymous"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1029,
								1028,
								1026,
								1030,
								1027,
								1025
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 246,
							"character": 34
						}
					]
				},
				{
					"id": 1039,
					"name": "CodeRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A request for code"
					},
					"children": [
						{
							"id": 1041,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 489,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1040,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 488,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "code"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1041,
								1040
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 487,
							"character": 28
						}
					]
				},
				{
					"id": 995,
					"name": "ConstructorDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for a constructor call.\nIt's even possible to decode a library constructor call with this.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 999,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the constructor that was called.  Note that although\ndefault constructors don't actually get an ABI entry, we still return an\nABI entry regardless in that case."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 111,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ConstructorAbiEntry",
								"id": 1354
							}
						},
						{
							"id": 998,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the constructor.  This will be empty for a\ndefault constructor."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 105,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1031
								}
							}
						},
						{
							"id": 1000,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the constructor that was called."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 115,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 997,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 100,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 1001,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 120,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 985
							}
						},
						{
							"id": 996,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ConstructorDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 96,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								999,
								998,
								1000,
								997,
								1001,
								996
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 92,
							"character": 36
						}
					]
				},
				{
					"id": 1016,
					"name": "EventDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as a non-anonymous event."
					},
					"children": [
						{
							"id": 1021,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 229,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventAbiEntry",
								"id": 1367
							}
						},
						{
							"id": 1020,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 224,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1031
								}
							}
						},
						{
							"id": 1018,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 215,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 1023,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 238,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 985
							}
						},
						{
							"id": 1019,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 220,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 1017,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EventDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 208,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "event"
							}
						},
						{
							"id": 1022,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the event, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 233,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1021,
								1020,
								1018,
								1023,
								1019,
								1017,
								1022
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 204,
							"character": 30
						}
					]
				},
				{
					"id": 988,
					"name": "FunctionDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for an ordinary function call to a known class;\nnot a constructor call, not a fallback call."
					},
					"children": [
						{
							"id": 992,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the function that was called.  You can use this\nto extract the name, for instance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 70,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionAbiEntry",
								"id": 1346
							}
						},
						{
							"id": 991,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 65,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1031
								}
							}
						},
						{
							"id": 990,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 61,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 994,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 79,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 985
							}
						},
						{
							"id": 989,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a FunctionDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 57,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "function"
							}
						},
						{
							"id": 993,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the function that was called, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 74,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								992,
								991,
								990,
								994,
								989,
								993
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 53,
							"character": 33
						}
					]
				},
				{
					"id": 1002,
					"name": "MessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding for a call to a known class that does not appear\nto be a function call, i.e., one that will result in the fallback function being invoked\nif there is one."
					},
					"children": [
						{
							"id": 1005,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the contract's fallback or receive function that would\nhandle this message; will be null if there is none."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 143,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FallbackAbiEntry",
										"id": 1359
									},
									{
										"type": "reference",
										"name": "ReceiveAbiEntry",
										"id": 1363
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1004,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 138,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 1006,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 147,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1007,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 152,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 985
							}
						},
						{
							"id": 1003,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a MessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 134,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "message"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1005,
								1004,
								1006,
								1007,
								1003
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 130,
							"character": 32
						}
					]
				},
				{
					"id": 1036,
					"name": "StorageRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A request for storage"
					},
					"children": [
						{
							"id": 1038,
							"name": "slot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 479,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 1037,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 478,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "storage"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1038,
								1037
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 477,
							"character": 31
						}
					]
				},
				{
					"id": 1008,
					"name": "UnknownCallDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a function call to an unknown class.  In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 1011,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 174,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1010,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 170,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 985
							}
						},
						{
							"id": 1009,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 165,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1011,
								1010,
								1009
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 161,
							"character": 36
						}
					]
				},
				{
					"id": 1012,
					"name": "UnknownCreationDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a contract creation for an unknown class. In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 1015,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the contract creation."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 196,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1014,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 192,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 985
							}
						},
						{
							"id": 1013,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownCreationDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 187,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "create"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1015,
								1014,
								1013
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 183,
							"character": 40
						}
					]
				},
				{
					"id": 986,
					"name": "CalldataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a transaction (calldata) decoding.  As you can see, these come in five types,\neach of which is documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 11,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "FunctionDecoding",
								"id": 988
							},
							{
								"type": "reference",
								"name": "ConstructorDecoding",
								"id": 995
							},
							{
								"type": "reference",
								"name": "MessageDecoding",
								"id": 1002
							},
							{
								"type": "reference",
								"name": "UnknownCallDecoding",
								"id": 1008
							},
							{
								"type": "reference",
								"name": "UnknownCreationDecoding",
								"id": 1012
							}
						]
					}
				},
				{
					"id": 1045,
					"name": "ContractKind",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 16,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "contract"
							},
							{
								"type": "stringLiteral",
								"value": "library"
							},
							{
								"type": "stringLiteral",
								"value": "interface"
							}
						]
					}
				},
				{
					"id": 1035,
					"name": "DecoderRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 470,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "StorageRequest",
								"id": 1036
							},
							{
								"type": "reference",
								"name": "CodeRequest",
								"id": 1039
							}
						]
					}
				},
				{
					"id": 985,
					"name": "DecodingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This is a type for recording what decoding mode a given decoding was produced in.  There are two\ndecoding modes, full mode and ABI mode.  In ABI mode, decoding is done purely based on the ABI JSON.\nFull mode, by contrast, additionally uses AST information to produce a more informative decoding.\nFor more on full mode and ABI mode, see the notes on [Decoding modes](../#decoding-modes)."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 46,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "full"
							},
							{
								"type": "stringLiteral",
								"value": "abi"
							}
						]
					}
				},
				{
					"id": 1042,
					"name": "Location",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "storage"
							},
							{
								"type": "stringLiteral",
								"value": "memory"
							},
							{
								"type": "stringLiteral",
								"value": "calldata"
							}
						]
					}
				},
				{
					"id": 987,
					"name": "LogDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a log (event) decoding.  As you can see, these come in two types, each of which\nis documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 23,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "EventDecoding",
								"id": 1016
							},
							{
								"type": "reference",
								"name": "AnonymousDecoding",
								"id": 1024
							}
						]
					}
				},
				{
					"id": 1044,
					"name": "Mutability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 12,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "pure"
							},
							{
								"type": "stringLiteral",
								"value": "view"
							},
							{
								"type": "stringLiteral",
								"value": "nonpayable"
							},
							{
								"type": "stringLiteral",
								"value": "payable"
							}
						]
					}
				},
				{
					"id": 1043,
					"name": "Visibility",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 8,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "internal"
							},
							{
								"type": "stringLiteral",
								"value": "external"
							}
						]
					}
				},
				{
					"id": 1057,
					"name": "abifyCalldataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1058,
							"name": "abifyCalldataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1059,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 986
									}
								},
								{
									"id": 1060,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 226
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CalldataDecoding",
								"id": 986
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 286,
							"character": 37
						}
					]
				},
				{
					"id": 1061,
					"name": "abifyLogDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1062,
							"name": "abifyLogDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1063,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 987
									}
								},
								{
									"id": 1064,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 226
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "LogDecoding",
								"id": 987
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 313,
							"character": 32
						}
					]
				},
				{
					"id": 953,
					"name": "decodeCalldata",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 954,
							"name": "decodeCalldata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 955,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2124
									}
								},
								{
									"id": 956,
									"name": "isConstructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1035
									},
									{
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 986
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 51,
							"character": 31
						}
					]
				},
				{
					"id": 948,
					"name": "decodeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 949,
							"name": "decodeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 950,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2124
									}
								},
								{
									"id": 951,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 952,
									"name": "targetName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1035
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "LogDecoding",
											"id": 987
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 205,
							"character": 28
						}
					]
				},
				{
					"id": 957,
					"name": "decodeReturndata",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 958,
							"name": "decodeReturndata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there are multiple possibilities, they're always returned in\nthe order: return, revert, failure, empty, bytecode, unknownbytecode"
							},
							"parameters": [
								{
									"id": 959,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2124
									}
								},
								{
									"id": 960,
									"name": "successAllocation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ReturndataAllocation",
												"id": 1150
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								},
								{
									"id": 961,
									"name": "status",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1035
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ReturndataDecoding"
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 488,
							"character": 33
						}
					]
				},
				{
					"id": 962,
					"name": "decodeRevert",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 963,
							"name": "decodeRevert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 964,
									"name": "returndata",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReturndataDecoding"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 699,
							"character": 28
						}
					]
				},
				{
					"id": 942,
					"name": "decodeVariable",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 943,
							"name": "decodeVariable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 944,
									"name": "definition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1705
									}
								},
								{
									"id": 945,
									"name": "pointer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Pointer.DataPointer",
										"id": 2064
									}
								},
								{
									"id": 946,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2124
									}
								},
								{
									"id": 947,
									"name": "compilationId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1035
									},
									{
										"type": "reference",
										"name": "Format.Values.Result",
										"id": 366
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 33,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						1136,
						1701,
						1688,
						1065,
						1112,
						1928,
						1918,
						1973,
						2030,
						2108,
						2,
						1450,
						1459,
						2063,
						1491,
						1515,
						1537,
						1431
					],
					"categories": [
						{
							"title": "Data",
							"children": [
								2
							]
						},
						{
							"title": "ABI data location",
							"children": [
								1136,
								1431
							]
						},
						{
							"title": "Solidity data location",
							"children": [
								1688,
								1450,
								1459,
								1491,
								1515,
								1537
							]
						},
						{
							"title": "Other",
							"children": [
								1701,
								1065,
								1112,
								1928,
								1918,
								1973,
								2030,
								2108,
								2063
							]
						}
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1046
					],
					"categories": [
						{
							"title": "Errors",
							"children": [
								1046
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1031,
						1024,
						1039,
						995,
						1016,
						988,
						1002,
						1036,
						1008,
						1012
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								1031,
								1024,
								995,
								1016,
								988,
								1002,
								1008,
								1012
							]
						},
						{
							"title": "Requests",
							"children": [
								1039,
								1036
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						986,
						1045,
						1035,
						985,
						1042,
						987,
						1044,
						1043
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								986,
								985,
								987
							]
						},
						{
							"title": "Enumerations",
							"children": [
								1045,
								1042,
								1044,
								1043
							]
						},
						{
							"title": "Requests",
							"children": [
								1035
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1057,
						1061,
						953,
						948,
						957,
						962,
						942
					],
					"categories": [
						{
							"title": "Decoding",
							"children": [
								953,
								948,
								957,
								942
							]
						},
						{
							"title": "ABIfication",
							"children": [
								1057,
								1061
							]
						},
						{
							"title": "Other",
							"children": [
								962
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "codec/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2175,
			"name": "@truffle/decoder",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gnidan/src/work/truffle/packages/decoder/lib/index.ts",
			"comment": {
				"shortText": "# Truffle Decoder",
				"text": "This module provides an interface for decoding contract state, transaction\ncalldata, and events.  It's an interface to the same low-level decoding\nfunctionality that Truffle Debugger uses.  However, it has additional\nfunctionality that the debugger does not need, and the debugger has additional\nfunctionality that this interface either does not need or cannot currently\nreplicate.  In the future, this interface will also decode return values and\nrevert strings.\n\nThe interface is split into three classes: The wire decoder, the contract\ndecoder, and the contract instance decoder.  The wire decoder is associated to\nthe project as a whole and decodes transaction calldata and events.  The\ncontract decoder is associated to a specific contract class.  It has all the\ncapabilities of the wire decoder, but in addition it acts as a factory for\ncontract instance decoders.  The contract instance decoder is associated to a\nspecific contract instance; it too has all the capabilities of the wire decoder,\nbut it can also decode the state variables for the specific instance.  (In\naddition, in the case that the contract does not include a `deployedBytecode`\nfield in its artifact, which can hinder decoding certain things, the contract\ninstance decoder can sometimes work around this where the other decoders\ncannot.)\n\nThis documentation describes the current state of the decoder, but you should\nexpect to see improvements soon.\n\n## Usage\n\n### Initialization\n\nCreate a decoder with one of the various constructor functions.\n\nFor a wire decoder, use the [[forProject|`forProject`]] function.\n\nFor a contract decoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance decoder, use one of the following:\n[[forDeployedArtifact|`forDeployedArtifact`]]\n[[forDeployedContract|`forDeployedContract`]]\n[[forArtifactAt|`forArtifactAt`]]\n[[forContractAt|`forContractAt`]]\n[[forContractInstance|`forContractInstance`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\n### Decoder methods\n\nSee the documentation for the individual decoder classes for a method listing.\n\n### Output format information\n\nThe decoder outputs lossless, machine-readable [[Format.Values.Result]] objects\ncontaining individual decoded values. See the [[Format|format documentation]]\nfor an overview and complete module listing.\n\n### Decoding modes and abification\n\nThe decoder runs in either of two modes: full mode or ABI mdoe. Full mode\nrequires some additional constraints but returns substantially more detailed\ninformation. Please see the notes on [decoding modes](../#decoding-modes) for\nmore about this distinction.\n\n### Basic usage examples\n\n#### Decoding a log with the wire decoder\n\nThis usage example is for a project with two contracts, `Contract1` and\n`Contract2`.\n\n```typescript\nimport { forProject } from \"@truffle/decoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst provider = web3.currentProvider;\nconst decoder = await Decoder.forProject(provider, [contract1, contract2]);\nconst decodings = await decoder.decodeLog(log);\n```\n\nThe usage of [[WireDecoder.decodeTransaction|decodeTransaction]] is similar.\n\nFor getting already-decoded logs meeting appropriate conditions, see\n[[WireDecoder.events]].\n\n#### Decoding state variables with the contract instance decoder\n\nThis usage example is for decoding the state variables of a contract `Contract`\nin a project that also contains a contract `OtherContract`.\n\n```typescript\nimport { forContract } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst decoder = await Decoder.forContract(contract, [otherContract]);\nconst instanceDecoder = await decoder.forInstance();\nconst variables = await instanceDecoder.variables();\n```\n\nIn this example, we use the deployed version of `Contract`.  If we wanted an\ninstance at a different address, we could pass the address to `forInstance`.\n\nIn addition, rather than using `forContract` and then `forInstance`, we could\nalso use [[forDeployedContract|`forContractInstance`]] to perform both of these\nin one step.  If we wanted to do this with a specified address, we could use\n[[forContractAt|`forContractAt`]].\n\nYet another way would be:\n```typescript\nimport { forContractInstance } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst deployedContract = await contract.deployed();\nconst instanceDecoder = await Decoder.forContractInstance(deployedContract, [otherContract]);\nconst variables = await instanceDecoder.variables();\n```\n\nThese examples are not exhaustive.\n\nOne can find more advanced decoding examples with\n[[ContractInstanceDecoder.variable|`variable`]] and\n[[ContractInstanceDecoder.watchMappingKey|`watchMappingKey`]] at the\ndocumentation for these individual functions.\n"
			},
			"children": [
				{
					"id": 2422,
					"name": "ContractAllocationFailedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that something went wrong while attempting to determine the location\nof this contract's state variables.  This error will be thrown if you attempt to use\ndecoding functions after something went wrong during setup.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in the future\nwith Truffle DB.  In the meantime, it is at least worth noting that you should not encounter\nthis error if your entire project was written in Solidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 2426,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2427,
									"name": "new ContractAllocationFailedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2428,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2429,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2430,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractAllocationFailedError",
										"id": 2422
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 55,
									"character": 31
								}
							]
						},
						{
							"id": 2425,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 55,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2424,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 54,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2423,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 53,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2432,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2431,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2433,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2434,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2426
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2425,
								2424,
								2423,
								2432,
								2431,
								2433,
								2434
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 52,
							"character": 42
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2398,
					"name": "ContractBeingDecodedHasNoNodeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode does not have AST\ninformation associated with it, or that the decoder cannot find it.  This error will\nbe thrown if you attempt to use functions that require AST information with such a contract."
					},
					"children": [
						{
							"id": 2401,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2402,
									"name": "new ContractBeingDecodedHasNoNodeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2403,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2404,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractBeingDecodedHasNoNodeError",
										"id": 2398
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 9,
									"character": 31
								}
							]
						},
						{
							"id": 2400,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 9,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2399,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 8,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2406,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2405,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2407,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2408,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2401
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2400,
								2399,
								2406,
								2405,
								2407,
								2408
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 7,
							"character": 47
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2176,
					"name": "ContractDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The ContractDecoder class.  Spawns the [[ContractInstanceDecoder]] class.\nAlso, decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2188,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2189,
									"name": "new ContractDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2190,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										},
										{
											"id": 2191,
											"name": "wireDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WireDecoder",
												"id": 2310
											}
										},
										{
											"id": 2192,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2176
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 626,
									"character": 35
								}
							]
						},
						{
							"id": 2185,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 623,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 2132
							}
						},
						{
							"id": 2181,
							"name": "artifact",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 618,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Artifact"
							}
						},
						{
							"id": 2179,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 616,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Compilation",
								"id": 1929
							}
						},
						{
							"id": 2184,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 621,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2178,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 614,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1976
							}
						},
						{
							"id": 2180,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 617,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contract",
								"id": 1941
							}
						},
						{
							"id": 2183,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 620,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2182,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 619,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AstNode",
								"id": 1705
							}
						},
						{
							"id": 2186,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 624,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StateVariableAllocation",
									"id": 1589
								}
							}
						},
						{
							"id": 2177,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 612,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2187,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 626,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WireDecoder",
								"id": 2310
							}
						},
						{
							"id": 2207,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2208,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2209,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 986
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 986
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 790,
									"character": 30
								}
							]
						},
						{
							"id": 2210,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2211,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2212,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 987
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 987
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 797,
									"character": 25
								}
							]
						},
						{
							"id": 2201,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2202,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]]."
									},
									"parameters": [
										{
											"id": 2203,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2497
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 987
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 771,
									"character": 24
								}
							]
						},
						{
							"id": 2198,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2199,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]]."
									},
									"parameters": [
										{
											"id": 2200,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2485
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 986
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 759,
									"character": 32
								}
							]
						},
						{
							"id": 2204,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2205,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.events]]."
									},
									"parameters": [
										{
											"id": 2206,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation on the EventOptions type for more.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2480
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2470
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 781,
									"character": 21
								}
							]
						},
						{
							"id": 2195,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2196,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of this contract."
									},
									"parameters": [
										{
											"id": 2197,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2221
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 747,
									"character": 26
								}
							]
						},
						{
							"id": 2213,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2214,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 2132
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 806,
									"character": 23
								}
							]
						},
						{
							"id": 2219,
							"name": "getContractInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2220,
									"name": "getContractInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ContractInfo"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 827,
									"character": 24
								}
							]
						},
						{
							"id": 2215,
							"name": "getStateVariableReferences",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2216,
									"name": "getStateVariableReferences",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "StateVariableAllocation",
											"id": 1589
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 813,
									"character": 35
								}
							]
						},
						{
							"id": 2217,
							"name": "getWireDecoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2218,
									"name": "getWireDecoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 2310
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 820,
									"character": 23
								}
							]
						},
						{
							"id": 2193,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2194,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 736,
									"character": 19
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2188
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2185,
								2181,
								2179,
								2184,
								2178,
								2180,
								2183,
								2182,
								2186,
								2177,
								2187
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2207,
								2210,
								2201,
								2198,
								2204,
								2195,
								2213,
								2219,
								2215,
								2217,
								2193
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 611,
							"character": 28
						}
					]
				},
				{
					"id": 2221,
					"name": "ContractInstanceDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The ContractInstanceDecoder class.  Decodes storage for a specified\ninstance.  Also, decodes transactions and logs.  See below for a method\nlisting.",
						"text": "Note that when using this class to decode transactions and logs, it does\nhave one advantage over using the WireDecoder or ContractDecoder.  If the\nartifact for the class does not have a deployedBytecode field, the\nWireDecoder (and therefore also the ContractDecoder) will not be able to\ntell that this instance is of that class, and so will fail to decode\ntransactions sent to it or logs originating from it.  However, the\nContractInstanceDecoder has that information and will make use of it, making\nit possible for it to decode transactions sent to this instance, or logs\noriginating from it, even if the deployedBytecode field is misssing."
					},
					"children": [
						{
							"id": 2244,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2245,
									"name": "new ContractInstanceDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2246,
											"name": "contractDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ContractDecoder",
												"id": 2176
											}
										},
										{
											"id": 2247,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2221
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 881,
									"character": 35
								}
							]
						},
						{
							"id": 2232,
							"name": "additionalContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 868,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1976
							}
						},
						{
							"id": 2238,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 872,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 2132
							}
						},
						{
							"id": 2223,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 858,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Compilation",
								"id": 1929
							}
						},
						{
							"id": 2230,
							"name": "compiler",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 865,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "CompilerVersion",
								"id": 1919
							}
						},
						{
							"id": 2229,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 864,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2231,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 867,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1976
							}
						},
						{
							"id": 2224,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 859,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contract",
								"id": 1941
							}
						},
						{
							"id": 2227,
							"name": "contractAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 862,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2228,
							"name": "contractCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 863,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2242,
							"name": "contractDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 880,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractDecoder",
								"id": 2176
							}
						},
						{
							"id": 2226,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 861,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2225,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 860,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AstNode",
								"id": 1705
							}
						},
						{
							"id": 2240,
							"name": "mappingKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 876,
									"character": 21
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Storage.Slot",
									"id": 1547
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 2233,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 870,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2234,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2235,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2236,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNodes",
												"id": 1749
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 870,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2239,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 874,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StateVariableAllocation",
									"id": 1589
								}
							}
						},
						{
							"id": 2241,
							"name": "storageCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 878,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "StorageCache"
							}
						},
						{
							"id": 2237,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 871,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 226
							}
						},
						{
							"id": 2222,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 856,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2243,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 881,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WireDecoder",
								"id": 2310
							}
						},
						{
							"id": 2250,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2251,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "DecoderContext",
										"id": 1982
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 966,
									"character": 21
								}
							]
						},
						{
							"id": 2297,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2298,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2299,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 986
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 986
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1388,
									"character": 30
								}
							]
						},
						{
							"id": 2300,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2301,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2302,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 987
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 987
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1395,
									"character": 25
								}
							]
						},
						{
							"id": 2252,
							"name": "checkAllocationSuccess",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2253,
									"name": "checkAllocationSuccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 970,
									"character": 32
								}
							]
						},
						{
							"id": 2306,
							"name": "constructSlot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2307,
									"name": "constructSlot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2308,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2309,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1547
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											},
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1427,
									"character": 23
								}
							]
						},
						{
							"id": 2294,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2295,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]].\n"
									},
									"parameters": [
										{
											"id": 2296,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2497
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 987
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1377,
									"character": 24
								}
							]
						},
						{
							"id": 2291,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2292,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]].\n"
									},
									"parameters": [
										{
											"id": 2293,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2485
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 986
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1363,
									"character": 32
								}
							]
						},
						{
							"id": 2254,
							"name": "decodeVariable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2255,
									"name": "decodeVariable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2256,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "StateVariableAllocation",
												"id": 1589
											}
										},
										{
											"id": 2257,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "StateVariable",
												"id": 2466
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 986,
									"character": 30
								}
							]
						},
						{
							"id": 2303,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2304,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This mostly behaves as [[WireDecoder.events]].\nHowever, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.\nIf you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.\n(You can also of course set a different address to restrict to that.)"
									},
									"parameters": [
										{
											"id": 2305,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2480
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2470
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1408,
									"character": 21
								}
							]
						},
						{
							"id": 2268,
							"name": "findVariableByNameOrId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2269,
									"name": "findVariableByNameOrId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2270,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StateVariableAllocation",
												"id": 1589
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1150,
									"character": 32
								}
							]
						},
						{
							"id": 2276,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2277,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2278,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2279,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1217,
									"character": 23
								}
							]
						},
						{
							"id": 2271,
							"name": "getStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2272,
									"name": "getStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2273,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2274,
											"name": "slot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 2275,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1184,
									"character": 26
								}
							]
						},
						{
							"id": 2248,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2249,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 923,
									"character": 19
								}
							]
						},
						{
							"id": 2280,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2281,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2282,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1224,
									"character": 31
								}
							]
						},
						{
							"id": 2258,
							"name": "state",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2259,
									"name": "state",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Returns information about the state of the contract, but does not include\ninformation about the storage or decoded variables.  See the documentation\nfor the [[ContractState]] type for more."
									},
									"parameters": [
										{
											"id": 2260,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractState",
												"id": 2460
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1052,
									"character": 20
								}
							]
						},
						{
							"id": 2287,
							"name": "unwatchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2288,
									"name": "unwatchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See\nwatchMappingKey for more on how watching mapping keys works, and on how\nthe parameters work.\n\nNote that unwatching a mapping key will also unwatch all its descendants.\nE.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then\nunwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these\nare currently watched.\n\nThis function has the same caveats as watchMappingKey.\n"
									},
									"parameters": [
										{
											"id": 2289,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2290,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1331,
									"character": 32
								}
							]
						},
						{
							"id": 2264,
							"name": "variable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2265,
									"name": "variable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes an individual contract variable; returns its value as a\n[[Format.Values.Result|Result]].  See the documentation for\n[[variables|variables()]] for various caveats that also apply here.\n\nIf the variable can't be located, throws an exception.",
										"tags": [
											{
												"tag": "example",
												"text": "Consider a contract `Derived` inheriting from a contract `Base`.\n  Suppose `Derived` has a variable `x` and `Base` has variables `x` and\n  `y`.  One can access `Derived.x` as `variable(\"x\")` or\n  `variable(\"Derived.x\")`, can access `Base.x` as `variable(\"Base.x\")`,\n  and can access `Base.y` as `variable(\"y\")` or `variable(\"Base.y\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2266,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name (or numeric ID, if you know that) of the\n  variable.  Can be given as a qualified name, allowing one to get at\n  shadowed variables from base contracts.  If given by ID, can be given as a\n  number or numeric string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2267,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values."
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 366
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1132,
									"character": 23
								}
							]
						},
						{
							"id": 2261,
							"name": "variables",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2262,
									"name": "variables",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the contract's variables; returns an array of these decoded variables.\nSee the documentation of the [[DecodedVariable]] type for more.\n\nNote that variable decoding can only operate in full mode; if the decoder wasn't able to\nstart up in full mode, this method will throw an exception.\n\nNote that decoding mappings requires first watching mapping keys in order to get any results;\nsee the documentation for [[watchMappingKey]].\nAdditional methods to make mapping decoding a less manual affair are planned for the future.\n\nAlso, due to a technical limitation, it is not currently possible to\nusefully decode internal function pointers.  See the\n[[Format.Values.FunctionInternalValue|FunctionInternalValue]]\ndocumentation and the README for more on how these are handled."
									},
									"parameters": [
										{
											"id": 2263,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StateVariable",
													"id": 2466
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1092,
									"character": 24
								}
							]
						},
						{
							"id": 2283,
							"name": "watchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2284,
									"name": "watchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Watches a mapping key; adds it to the decoder's list of watched mapping\nkeys.  This affects the results of both [[variables|variables()]] and\n[[variable|variable()]].  When a mapping is decoded, only the values at\nits watched keys will be included in its value.\n\nNote that it is possible\nto watch mappings that are inside structs, arrays, other mappings, etc;\nsee below for more on how to do this.\n\nNote that watching mapping keys is\nonly possible in full mode; if the decoder wasn't able to start up in full\nmode, this method will throw an exception.\n\n**Warning**: At the moment, this function does very little to check its\ninput.  Bad input may have unpredictable results.  This will be remedied\nin the future (by having it throw exceptions on bad input), but right now\nessentially no checking is implemented.  Also, there may be slight changes\nto the format of indices in the future.\n\n(A bad variable name will cause an exception though; that input is checked.)",
										"tags": [
											{
												"tag": "example",
												"text": "First, a simple example.  Say we have a mapping `m` of type\n  `mapping(uint => uint)`.  You could call `watchMappingKey(\"m\", 0)` to\n  watch `m[0]`."
											},
											{
												"tag": "example",
												"text": "Now for a slightly more complicated example.  Say `m` is of type\n  `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you\n  can call `watchMappingKey(\"m\", 3, 5)`.  This will also automatically\n  watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of\n  anything."
											},
											{
												"tag": "example",
												"text": "Now for a well more complicated example.  Say we have a struct\n  type `MapStruct` with a member called `map` which is a `mapping(string => string)`,\n  and say we have a variable `arr` of type `MapStruct[]`, then one could\n  watch `arr[3].map[\"hello\"]` by calling `watchMappingKey(\"arr\", 3, \"map\", \"hello\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2285,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The variable that the mapping lives under; this works like\n  the nameOrId argument to [[variable|variable()]].  If the mapping is a\n  top-level state variable, put the mapping itself here.  Otherwise, put the\n  top-level state variable it lives under."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2286,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Further arguments to watchMappingKey, if given, will be\n  interpreted as indices into or members of the variable identified by the\n  variable argument; see the example.  Array indices and mapping\n  keys are specified by value; struct members are specified by name.\n\n  Numeric values can be given as number, BN, or\n  numeric string.  Bytestring values are given as hex strings.  Boolean\n  values are given as booleans, or as the strings \"true\" or \"false\".\n  Address values are given as hex strings; they are currently not required\n  to be in checksum case, but this will likely change in the future, so\n  don't rely on that.  Contract values work like address values.\n  Enum values can be given either as a numeric value or by name;\n  in the latter case you can use either a qualified name or just the\n  name of the option (i.e., you can just write `\"Option\"` rather than\n  `\"Enum.Option\"` or `\"Contract.Enum.Option\"`, but those will work too).\n\n  Note that if the path to a given mapping key\n  includes mapping keys above it, any ancestors will also be watched\n  automatically."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1289,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2244
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2232,
								2238,
								2223,
								2230,
								2229,
								2231,
								2224,
								2227,
								2228,
								2242,
								2226,
								2225,
								2240,
								2233,
								2239,
								2241,
								2237,
								2222,
								2243
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2250
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2297,
								2300,
								2252,
								2306,
								2294,
								2291,
								2254,
								2303,
								2268,
								2276,
								2271,
								2248,
								2280,
								2258,
								2287,
								2264,
								2261,
								2283
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 855,
							"character": 36
						}
					]
				},
				{
					"id": 2409,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode could not be found in\nthe project info.  This error will be thrown if you attempt to spawn a contract decoder or\ncontract instance decoder for a contract not appearing in the project info."
					},
					"children": [
						{
							"id": 2413,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2414,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2415,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2416,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2417,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractNotFoundError",
										"id": 2409
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 28,
									"character": 34
								}
							]
						},
						{
							"id": 2411,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 27,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2410,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 26,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2412,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 28,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2419,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2418,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2420,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2421,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2413
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2411,
								2410,
								2412,
								2419,
								2418,
								2420,
								2421
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 25,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2435,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance decoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 2437,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2438,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2439,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InvalidAddressError",
										"id": 2435
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 76,
									"character": 25
								}
							]
						},
						{
							"id": 2436,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 76,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2441,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2440,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2442,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2443,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2437
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2436,
								2441,
								2440,
								2442,
								2443
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 75,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2453,
					"name": "NoProjectInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the user attempted to instantiate a decoder\nwith no project information (by explicitly overriding the default)."
					},
					"children": [
						{
							"id": 2454,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2455,
									"name": "new NoProjectInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NoProjectInfoError",
										"id": 2453
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 102,
									"character": 47
								}
							]
						},
						{
							"id": 2457,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2456,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2458,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2459,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2454
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2457,
								2456,
								2458,
								2459
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 102,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2444,
					"name": "VariableNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the user requested a variable that does not exist."
					},
					"children": [
						{
							"id": 2446,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2447,
									"name": "new VariableNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2448,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VariableNotFoundError",
										"id": 2444
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 89,
									"character": 35
								}
							]
						},
						{
							"id": 2450,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 2449,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 2445,
							"name": "nameOrId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 89,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 2451,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 2452,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2446
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2450,
								2449,
								2445,
								2451,
								2452
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 88,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2310,
					"name": "WireDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The WireDecoder class.  Decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2323,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2324,
									"name": "new WireDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2325,
											"name": "compilations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Compilation",
													"id": 1929
												}
											}
										},
										{
											"id": 2326,
											"name": "provider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Provider"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 2310
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 54,
									"character": 49
								}
							]
						},
						{
							"id": 2321,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 52,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 2132
							}
						},
						{
							"id": 2322,
							"name": "codeCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 54,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "CodeCache"
							}
						},
						{
							"id": 2313,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 46,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 1929
								}
							}
						},
						{
							"id": 2314,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 47,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1976
							}
						},
						{
							"id": 2315,
							"name": "deployedContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 48,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "DecoderContexts",
								"id": 1976
							}
						},
						{
							"id": 2312,
							"name": "network",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 44,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2316,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 50,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2317,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2318,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2319,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNodes",
												"id": 1749
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 50,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2320,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 51,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 226
							}
						},
						{
							"id": 2311,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 42,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2364,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2365,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2366,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 986
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 986
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 477,
									"character": 30
								}
							]
						},
						{
							"id": 2367,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2368,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2369,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 987
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 987
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 489,
									"character": 25
								}
							]
						},
						{
							"id": 2327,
							"name": "collectUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2328,
									"name": "collectUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2329,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2330,
													"name": "definitions",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 177,
															"character": 15
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2331,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 2332,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2333,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1749
																	}
																}
															],
															"sources": [
																{
																	"fileName": "decoder/lib/decoders.ts",
																	"line": 177,
																	"character": 16
																}
															]
														}
													}
												},
												{
													"id": 2334,
													"name": "types",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 178,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 226
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2330,
														2334
													]
												}
											],
											"sources": [
												{
													"fileName": "decoder/lib/decoders.ts",
													"line": 176,
													"character": 36
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 176,
									"character": 33
								}
							]
						},
						{
							"id": 2349,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2350,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Log]] object and decodes it.  Logs can be ambiguous, so this so\nthis function returns an array of [[LogDecoding|LogDecodings]].\n\nNote that logs are decoded in strict mode, so (with one exception) none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.  The one exception to this is that indexed parameters of reference\ntype cannot meaningfully be decoded, so those will decode to an error.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n\n1. Non-anonymous events coming from the contract itself (these will moreover be ordered\n  from most derived to most base)\n2. Non-anonymous events coming from libraries\n3. Anonymous events coming from the contract itself (again, ordered from most derived\n  to most base)\n4. Anonymous events coming from libraries\n\nYou can check the kind and class.contractKind fields to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n"
									},
									"parameters": [
										{
											"id": 2351,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2497
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 987
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 365,
									"character": 24
								}
							]
						},
						{
							"id": 2352,
							"name": "decodeLogWithAdditionalOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2353,
									"name": "decodeLogWithAdditionalOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2354,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 2497
											}
										},
										{
											"id": 2355,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2480
											},
											"defaultValue": " {}"
										},
										{
											"id": 2356,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1976
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 987
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 372,
									"character": 45
								}
							]
						},
						{
							"id": 2342,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2343,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Transaction]] object and decodes it.  The result is a\n[[CalldataDecoding]]; see the documentation on that interface for more.\n\nNote that decoding of transactions sent to libraries is presently not\nsupported and may have unreliable results.  Limited support for this is\nplanned for future versions."
									},
									"parameters": [
										{
											"id": 2344,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2485
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 986
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 285,
									"character": 32
								}
							]
						},
						{
							"id": 2345,
							"name": "decodeTransactionWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2346,
									"name": "decodeTransactionWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2347,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 2485
											}
										},
										{
											"id": 2348,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1976
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 986
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 294,
									"character": 54
								}
							]
						},
						{
							"id": 2357,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2358,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Gets all events meeting certain conditions and decodes them.\nThis function is fairly rudimentary at the moment but more functionality\nwill be added in the future.",
										"returns": "An array of [[DecodedLog|DecodedLogs]].\n  These consist of a log together with its possible decodings; see that\n  type for more info.  And see [[decodeLog]] for more info on how log\n  decoding works in general.",
										"tags": [
											{
												"tag": "example",
												"text": "`events({name: \"TestEvent\"})` -- get events named \"TestEvent\"\n  from the most recent block\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2359,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation\n  on the [[EventOptions]] type for more."
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2480
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2470
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 424,
									"character": 21
								}
							]
						},
						{
							"id": 2360,
							"name": "eventsWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2361,
									"name": "eventsWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2362,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 2480
											},
											"defaultValue": " {}"
										},
										{
											"id": 2363,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1976
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 2470
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 433,
									"character": 43
								}
							]
						},
						{
							"id": 2376,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2377,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract decoder for a given contract artifact."
									},
									"parameters": [
										{
											"id": 2378,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be one of the ones used to initialize the wire\n  decoder; otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractDecoder",
												"id": 2176
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 528,
									"character": 26
								}
							]
						},
						{
							"id": 2379,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2380,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject."
									},
									"parameters": [
										{
											"id": 2381,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be one of the ones used to initialize the wire\n  decoder; otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										},
										{
											"id": 2382,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2221
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 549,
									"character": 26
								}
							]
						},
						{
							"id": 2390,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2391,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 2132
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 576,
									"character": 23
								}
							]
						},
						{
							"id": 2335,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2336,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2337,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2338,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 235,
									"character": 22
								}
							]
						},
						{
							"id": 2396,
							"name": "getCompilations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2397,
									"name": "getCompilations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Compilation",
											"id": 1929
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 601,
									"character": 24
								}
							]
						},
						{
							"id": 2370,
							"name": "getContextByAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2371,
									"name": "getContextByAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2372,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2373,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										},
										{
											"id": 2374,
											"name": "constructorBinary",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2375,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderContexts",
												"id": 1976
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DecoderContext",
														"id": 1982
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 497,
									"character": 35
								}
							]
						},
						{
							"id": 2394,
							"name": "getDeployedContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2395,
									"name": "getDeployedContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "DecoderContexts",
										"id": 1976
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 594,
									"character": 28
								}
							]
						},
						{
							"id": 2383,
							"name": "getReferenceDeclarations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2384,
									"name": "getReferenceDeclarations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2385,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2386,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2387,
															"name": "compilationId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1749
													}
												}
											],
											"sources": [
												{
													"fileName": "decoder/lib/decoders.ts",
													"line": 562,
													"character": 36
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 562,
									"character": 33
								}
							]
						},
						{
							"id": 2388,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2389,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 226
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 569,
									"character": 28
								}
							]
						},
						{
							"id": 2392,
							"name": "getWeb3",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2393,
									"name": "getWeb3",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 587,
									"character": 16
								}
							]
						},
						{
							"id": 2339,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2340,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2341,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DecoderTypes.BlockSpecifier"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 261,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2323
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2321,
								2322,
								2313,
								2314,
								2315,
								2312,
								2316,
								2320,
								2311
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2364,
								2367,
								2327,
								2349,
								2352,
								2342,
								2345,
								2357,
								2360,
								2376,
								2379,
								2390,
								2335,
								2396,
								2370,
								2394,
								2383,
								2388,
								2392,
								2339
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 41,
							"character": 24
						}
					]
				},
				{
					"id": 2460,
					"name": "ContractState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents the state of a contract aside from its storage."
					},
					"children": [
						{
							"id": 2462,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's address, as a checksummed hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 50,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2463,
							"name": "balanceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's balance, in Wei, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 54,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 2461,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's class, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 46,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 2465,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's code, as a hexidecimal string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 62,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2464,
							"name": "nonceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's nonce, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 58,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2462,
								2463,
								2461,
								2465,
								2464
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 42,
							"character": 30
						}
					]
				},
				{
					"id": 2470,
					"name": "DecodedLog",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a web3 Log object that has been decoded.\nNote that it extends the Log type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 2472,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 239,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.address",
								"id": 2498
							}
						},
						{
							"id": 2478,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 264,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockHash",
								"id": 2504
							}
						},
						{
							"id": 2479,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 268,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockNumber",
								"id": 2505
							}
						},
						{
							"id": 2473,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 243,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.data",
								"id": 2499
							}
						},
						{
							"id": 2471,
							"name": "decodings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of possible decodings of the given log -- it's an array because logs can be ambiguous.",
								"text": "This field works just like the output of [[WireDecoder.decodeLog]], so see that for more\ninformation.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 99,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LogDecoding",
									"id": 987
								}
							}
						},
						{
							"id": 2475,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 251,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.logIndex",
								"id": 2501
							}
						},
						{
							"id": 2474,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 247,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.topics",
								"id": 2500
							}
						},
						{
							"id": 2477,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 260,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionHash",
								"id": 2503
							}
						},
						{
							"id": 2476,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 256,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionIndex",
								"id": 2502
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2472,
								2478,
								2479,
								2473,
								2471,
								2475,
								2474,
								2477,
								2476
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 92,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Log",
							"id": 2497
						}
					]
				},
				{
					"id": 2480,
					"name": "EventOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to events().  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 2484,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, will restrict to events emitted by the given address.",
								"text": "NOTE: In the contract instance decoder, if omitted, defaults to the\naddress of the contract instance being decoded, rather than not filtering\nby address.  However, this behavior can be turned off by explicitly specifying\naddress as undefined.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 164,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2482,
							"name": "fromBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The earliest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 151,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 2506
							}
						},
						{
							"id": 2481,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, the name parameter will restrict to events with the given name."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 147,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2483,
							"name": "toBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The latest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 155,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 2506
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2484,
								2482,
								2481,
								2483
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 143,
							"character": 29
						}
					]
				},
				{
					"id": 2497,
					"name": "Log",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Log](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-getpastlogs-return)\ntype."
					},
					"children": [
						{
							"id": 2498,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 239,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2504,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 264,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2505,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 268,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2499,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 243,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2501,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 251,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2500,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 247,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2503,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 260,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2502,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 256,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2498,
								2504,
								2505,
								2499,
								2501,
								2500,
								2503,
								2502
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 235,
							"character": 20
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DecodedLog",
							"id": 2470
						}
					]
				},
				{
					"id": 2507,
					"name": "ProjectInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents information about a Truffle project that can be used to\nconstruct and initialize a decoder for that project.  This information may\nbe passed in various ways; this type is given here as an interface rahter\nthan a union, but note that really you only need to include one of these\nfields.  (The `compilations` field will be used if present, then `artifacts`\nif not, etc.)  Additional, more convenient options for how to specify project\ninformation are intended to be added in the future."
					},
					"children": [
						{
							"id": 2509,
							"name": "artifacts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A list of contract artifacts for contracts in the project.\nContract constructor objects may be substituted for artifacts, so if\nyou're not sure which you're dealing with, it's OK."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Artifact"
								}
							}
						},
						{
							"id": 2508,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An list of compilations, as specified in codec; this method of specifying\na project is mostly intended for internal Truffle use for now, but you can\nsee the documentation of the Compilations type if you want to use it."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 29,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 1929
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2509,
								2508
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 23,
							"character": 28
						}
					]
				},
				{
					"id": 2466,
					"name": "StateVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents one of the decoded contract's state variables."
					},
					"children": [
						{
							"id": 2468,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Format.Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 79,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 193
							}
						},
						{
							"id": 2467,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 73,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2469,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Format.Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 83,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Values.Result",
								"id": 366
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2468,
								2467,
								2469
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 69,
							"character": 30
						}
					]
				},
				{
					"id": 2485,
					"name": "Transaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Transaction](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-gettransaction-return)\ntype."
					},
					"children": [
						{
							"id": 2488,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Hash of this transaction's block as hex string; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 189,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2489,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This transaction's block number; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 193,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2491,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Address of the sender (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 201,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2495,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas provided by the sender, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 218,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2494,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas price for this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 214,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2486,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The transaction hash as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 181,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2496,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Data sent with the transaction, as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 222,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2487,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The nonce of the sender before this transaction was sent."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 185,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2492,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the recipient (as checksummed hex string), or null for a\ncontract creation."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 206,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2490,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of transaction in block; null if block is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 197,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2493,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Wei sent with this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 210,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2488,
								2489,
								2491,
								2495,
								2494,
								2486,
								2496,
								2487,
								2492,
								2490,
								2493
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 177,
							"character": 28
						}
					]
				},
				{
					"id": 2506,
					"name": "BlockSpecifier",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Specifies a block.  Can be given by number, or can be given via the\nspecial strings \"genesis\", \"latest\", or \"pending\".",
						"text": "Intended to work like Web3's\n[BlockType](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#id14).\n\n*Warning*: Using \"pending\", while allowed, is not advised, as it may lead\nto internally inconsistent results.  Use of \"latest\" is safe and will not\nlead to inconsistent results from a single decoder call due to the decoder's\ncaching system, but pending blocks cannot be cached under this system, which\nmay cause inconsistencies."
					},
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 285,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "stringLiteral",
								"value": "genesis"
							},
							{
								"type": "stringLiteral",
								"value": "latest"
							},
							{
								"type": "stringLiteral",
								"value": "pending"
							}
						]
					}
				},
				{
					"id": 2514,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2515,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 2516,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 2517,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2518,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms; see the [[ProjectInfo]] documentation for more\n  information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.\n\n  If this latter option is used, one may omit `artifact` itself from the\n  list of artifacts and only include the *other* relevant artifacts; note\n  that omission this is not allowed when passing a `ProjectInfo`.\n\n  If this parameter is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2176
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 219,
							"character": 33
						}
					]
				},
				{
					"id": 2532,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2533,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 2534,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 2535,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2536,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2537,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2221
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 325,
							"character": 35
						}
					]
				},
				{
					"id": 2519,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2520,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract."
							},
							"parameters": [
								{
									"id": 2521,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 2522,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2176
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 244,
							"character": 33
						}
					]
				},
				{
					"id": 2538,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2539,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 2540,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 2541,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2542,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2221
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 353,
							"character": 35
						}
					]
				},
				{
					"id": 2543,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2544,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 2545,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 2546,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2221
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 376,
							"character": 41
						}
					]
				},
				{
					"id": 2523,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2524,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 2525,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 2526,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2527,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2221
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 272,
							"character": 41
						}
					]
				},
				{
					"id": 2528,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2529,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 2530,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 2531,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2221
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 295,
							"character": 41
						}
					]
				},
				{
					"id": 2510,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2511,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a wire decoder for the project."
							},
							"parameters": [
								{
									"id": 2512,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 2513,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project or contracts being decoded.\n  This may come in several forms; see the [[ProjectInfo]] documentation for\n  more information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.  If this parameter\n  is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "WireDecoder",
										"id": 2310
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 185,
							"character": 32
						}
					]
				},
				{
					"id": 2547,
					"name": "infoToCompilations",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 2548,
							"name": "infoToCompilations",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2549,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 2507
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								},
								{
									"id": 2550,
									"name": "primaryArtifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 1929
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 387,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2422,
						2398,
						2176,
						2221,
						2409,
						2435,
						2453,
						2444,
						2310
					],
					"categories": [
						{
							"title": "Decoder",
							"children": [
								2176,
								2221,
								2310
							]
						},
						{
							"title": "Exception",
							"children": [
								2422,
								2398,
								2409,
								2435,
								2453,
								2444
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2460,
						2470,
						2480,
						2497,
						2507,
						2466,
						2485
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2480,
								2497,
								2507,
								2485
							]
						},
						{
							"title": "Results",
							"children": [
								2460,
								2470,
								2466
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2506
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2506
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2514,
						2532,
						2519,
						2538,
						2543,
						2523,
						2528,
						2510,
						2547
					],
					"categories": [
						{
							"title": "Provider-based Constructor",
							"children": [
								2514,
								2532,
								2523,
								2510
							]
						},
						{
							"title": "Truffle Contract-based Constructor",
							"children": [
								2519,
								2538,
								2543,
								2528
							]
						},
						{
							"title": "Other",
							"children": [
								2547
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "decoder/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				2175
			]
		}
	]
}